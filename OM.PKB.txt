create or replace
PACKAGE body xxcu_ont_create_order_pkg
  /* ===========================================================================================
  -- Module         : ONT
  -- Type           : PL/SQL - Package Body
  -- Filename       : $XXCU_TOP/admin/sql/XXCU_ONT_CREATE_ORDER_PKG.pkb
  -- Author         : Rahul Kumar Singh
  -- Version        : 2.03
  -- Description    : Package to insert parsed order data from AQ XML to EBS interface tables(oe_headers_iface_all,oe_lines_iface_all,oe_price_adjs_iface_all.
  -- History
  Date          Author                  Version             Description
  23 Dec 2015   Rahul Kumar Singh       1.0           Initial Version - Inherited from PNAS
  25 Feb 2016   Vedangi Bagwe           1.1           Modified to incorporate changes suggested in AN100
  07 Apr 2016   Vedangi Bagwe           1.2           Defect# 96
  09 Apr 2016   Vedangi Bagwe           1.3           postal code from and To and Country From and To irrespective of TMS context
  11 Apr 2016   Vedangi Bagwe           1.4           Defect# 125 - removed MO_GLOBAL.INIT('ONT')
  13 Apr 2016   Vedangi Bagwe           1.5           Defect# 140 - Order type mapping with Order source
  14 Apr 2016   Vedangi Bagwe           1.6           Modified Details corrected
  15 Apr 2016   Vedangi Bagwe           1.7           Defect# 160 - If Price List end dated then it should not be considered
  19 Apr 2016   Vedangi Bagwe           1.8           Modified for Artifact artf4721802 to copy return order DFF values from original order
  22 Apr 2016   Vedangi Bagwe           1.9           Modified for Defect# 209,216,167 and 217, artf4774289
  04 May 2016   Vedangi Bagwe           1.10          Modified for Defect# 187 Called 'PB Release Order holds (P)','PB Notification to Credit Department (R)'
  06 May 2016   Vedangi Bagwe           1.11          Modified for Defect# 349 If no return reason is entered at time of order import then standard option of No Reason code entered should default
  30 May 2016   Vedangi Bagwe           1.12          Modified for Defect# 553 OM: Order Import: Item Cross Reference should be picked during Order import if set
  02 Jun 2016   Vedangi Bagwe           1.13          Modified for Defect# 229 OM: Issue with Return Order Tax Import- Tax not populating in the tax Field
  13 Jun 2016   Vedangi Bagwe           1.14          Modified for Defect# 649 OM: Salesperson import at Line level fails for values except No Sales Credit
  27 Jun 2016   Vedangi Bagwe           1.15          Modified for Defect# 949 OM: OM: Order Import + Reconciliation Report: Reconciliation Fields require update. Plus XML tags need to be in sync with AN.100
  21 Jul 2016   Vedangi Bagwe           1.16          Modified for Change Request # 1092 PB Notification Report- Changes based on CRP Feedback
  26 Jul 2016   Vedangi Bagwe           1.17          Modified for Change Request # 1093, Defect 797 Order Import: Additional Import Fields
  02 Aug 2016   Vedangi Bagwe           1.18          Modified for Change Request # 1198 Imported Return Order will have Tax as 0 in all cases, CR # 1233,CR # 1202
  23 Aug 2016   Snehal Narkhede         1.19          Modified for change Request # 1202 Order Type will be derived from DFF Additional Order Type Information
  29 Aug 2016   Snehal Narkhede         1.20          Modified for Change Request #1387  AccountUnit(SalesPerson) has to be mandatory
  01 Sep 2016   Vedangi Bagwe           1.21          Modified for defect 1371
  16 Sep 2016   Snehal Narkhede         1.22          Modified for  Change Request 1320
  28 Sep 2016   Vedangi Bagwe           1.23          Modified for CR 1449,1899
  09 Oct 2016   Vedangi Bagwe           1.24          Modified for CR # 1929
  17 Oct 2016   Vedangi Bagwe           1.25          Modified for CR # 1851
  26 Oct 2016   Vedangi Bagwe           1.26          Modified for Defect # 2243
  08 Nov 2016   Vedangi Bagwe           1.27          Modified for CR # 2224, CR # 2375, CR # 2043, CR # 2468
  17 Nov 2016   Vedangi Bagwe           1.28          Modified for CR # 2499, Defect 2454
  18 Nov 2016   Vedangi Bagwe           1.29          Modified for Defect 2413
  20 Nov 2016   Kavita Chaurasia        1.30          Modified for Defect 2499 Table modified and sold_to_org_id
  20.11.2016    Rahul Singh             1.31          Modified for Invoice Specification Chnages.If no Inv Spec Node then Donot Insert in Custom Table
  08.12.2016    Kavita Chaurasia        1.32          Modified for Defect CR#2449 TAx code mandatory only if tax Calculation is Invoicing for order type
  16.12.2016    Kavita Chaurasia        1.33          Modified for Defect#2848 made changes for return orde..if same OrderReference is used for 2 regular order and for 2 diff Operaing unit
  23.12.2016    Vedangi Bagwe           1.34          Modified for Defect# 2891
  30.12.2016    Vedangi Bagwe           1.35          Modified for Defect #2192 - Prepaid Orders
  09.01.2017    Kavita Chaurasia        1.36          Modified for Defect #2959 -- Bulk orders
  02.02.2017    Vedangi Bagwe           1.37          Modified for CR# 2811 - Sales person on return orders
  07.02.2017    Vedangi Bagwe           1.38          Modified for CR# 3006 - New elements to Invoice Specification
  11.02.2017    Vedangi Bagwe           1.39          Modifiefd for defect 3125
  15.02.2017    Vedangi Bagwe           1.40          Modified for defect 3149
  17.02.2017    Vedangi Bagwe           1.41          Modified for CR 3118
  23.02.2017    Vedangi Bagwe           1.42          Modified for Defect 3195
  27.02.2017    Vedangi Bagwe           1.43          Modified for Defect 3218
  02.03.2017    Vedangi Bagwe           1.44          Modified for Defect 3239
  02.03.2017    Vedangi Bagwe           1.45          Modified for Defect 3243
  03.03.2017    Vedangi Bagwe           1.46          Modified for Defect 3047
  08.03.2017    Vedangi Bagwe           1.47          Modified for Defect 3276, CR 3268
  09.03.2017    Vedangi Bagwe           1.48          Modified for defect 3282
  10.03.2017    Vedangi Bagwe           1.49          Modified for defect 3295
  11.03.2017    Vedangi Bagwe           1.50          Modified for defect 3310
  16.03.2017    Vedangi Bagwe           1.51          Modified for defect 3348
  19.03.2017    Vedangi Bagwe           1.52          Modified for defect 3363
  21.03.2017    Rahul Kumar Singh       1.53          Modified for defect 3304
  22.03.2017    Vedangi Bagwe           1.54          Modified for defect 3399
  27.03.2017    Vedangi Bagwe           1.55          Modified for CR 3359
  29.03.2017    Vedangi Bagwe           1.56          Modified for Defect 3446
  31.03.2017    Vedangi Bagwe           1.57          Modified for CR 3374
  11.04.2017    Vedangi Bagwe           1.58          Modified for CR 3487
  20.04.2017    Vedangi Bagwe           1.59          Modified for Defect 3494
  19.05.2017    Vedangi Bagwe           1.60          Modified for CR 3540
  15.06.2017    Snehal Narkhede         1.61          Modified for Defect 8002
  16.06.2017    Snehal Narkhede         1.62          Modified for Defect 8003
  26.06.2017    Snehal Narkhede         1.63          modified for incident E2-IM013089363 (defect 8035), order lines will be inserted before inserting order header
  27.06.2017    Vijay Nambiar           1.64          modified for Defect # 3528
  04.07.2017    Ramji Agrawal           1.65          Modified for Ticket# E2-IM013214661
  04.08.2017    Divyansh Saini          1.66          Modified for Ticket# E2-IM013492120
  28.09.2017    Vedangi Bagwe           1.67          Modified for Wave2  artf5715512
  13.11.2017    Vedangi Bagwe           1.68          Modified for Defect 3703
  12.11.2017    Vedangi Bagwe           1.69          Modified for Defect 3702
  14.11.2017    Vedangi Bagwe           1.70          Modified for Defect 3711
  25.10.2017    Divyansh Saini        1.71          Modified as per defect # 8447
  01.12.2017    Vedangi Bagwe           1.71          Modified for Defect 3844
  06.12.2017    Divyansh Saini        1.72          Modified as per defect # 8629
  07.12.2017    Vedangi Bagwe           1.72          Modified for Defect 3937
  08.12.2017    Vedangi Bagwe           1.73          Modified for Defect 4001,3947,3921
  14.12.2017    Vedangi Bagwe           1.74          Modified for defect 3922
  15.12.2017    Vedangi Bagwe           1.75          Modified for CR 4089
  25.12.2017    Vedangi Bagwe           1.76          Modified for CR 4205
  28.12.2017    Vedangi Bagwe           1.77          Modified for Defect 4246
  29.12.2017    Vedangi Bagwe           1.78          Modified for Defect 4259
  03.01.2018    Vedangi Bagwe           1.79          Modified for CR 4296
  11.01.2018    Vedangi Bagwe           1.80          Modified for Defect 4310
  16.01.2018    Vedangi Bagwe           1.81          Modified for CR artf5962829
  18.01.2018    Vedangi Bagwe           1.82          Modified for CR 4419
  22.01.2018    Vedangi Bagwe           1.83          Modified for Defect 4452
  24.01.2018    Vedangi Bagwe           1.84          Modified for Defect 4475
  25.01.2018    Vedangi Bagwe           1.85          Modified for Defect 4534
  29.01.2018    Vedangi Bagwe           1.86          Modified for Defect 4583
  01.02.2018    Vedangi Bagwe           1.87          Modified for Defect 4640
  05.02.2018    Vedangi Bagwe           1.88          Modified for Defect 4677,4676
  07.02.2018    Vedangi Bagwe           1.89          Modified for CR 4609,4746
  12.02.2018    Vedangi Bagwe           1.90          Modified for Defect 4783, CR 4799
  16.02.2018    Vedangi Bagwe           1.91          Modified for CR 4813
  20.02.2018    Vedangi Bagwe           1.92          Modified for CR 4721,4790
  22.02.2018    Vedangi Bagwe           1.93          Modified for Defect 4944
  23.02.2018    Vedangi Bagwe           1.94          Modified for Defect 5015
  27.02.2018    Vedangi Bagwe           1.95          Modified for Defect 5055
  28.02.2018    Vedangi Bagwe           1.96          Modified for CR 5026,5027
  05.03.2018    Vedangi Bagwe           1.97          Modified for CR 5144, defect 5130
  12.03.2018    Vedangi Bagwe           1.98          Modified for CR 5204
  16.03.2018    Vedangi Bagwe           1.99          Modified for CR 5113
  20.03.2018    Arinjay Jain            2.00          parallel processing for LM
  22.03.2018    Vedangi Bagwe           2.01          Modified for CR 5310
  23.03.2018    Vedangi Bagwe           2.02          Modified for Defect 5204
  29.03.2018    Adi Narayna Reddy       2.03          Modified for Defect5360,5398
  =============================================================================================== */
  --globle variables
  /*$Header: XXCU_ONT_CREATE_ORDER_PKG.pkb 115.svn-rev yyyy/mm/dd mi:ss CustomizationManager noship $*/
AS
  g_value_list_name    CONSTANT VARCHAR2(25) := 'XXCU_ONT_LM_CONFIG_VALUES';
  g_user_id            NUMBER;--               :=1291;--1352;-----------this will be replaced by actual user once decided--------------
  g_resp_id            NUMBER;
  g_appl_id            NUMBER;
  g_pricelistid        NUMBER;
  g_ordertypeid        NUMBER;
  g_num_conc_instances NUMBER;
  g_order_source_id    NUMBER                 :=NULL;
  gpackagename         CONSTANT VARCHAR2 (50) := 'XXCU_ONT_CREATE_ORDER_PKG';
  gdbmsoutputflag      BOOLEAN                := true;
  g_program_loc        VARCHAR2 (100)         := 'Declaration';
  g_code_error         NUMBER                 := 2;
  g_code_ok            NUMBER                 := 0;
  g_code_warning       NUMBER                 := 1;
  g_org_id             NUMBER;
  g_order_number       NUMBER;
  -- g_conversion_rate_date CONSTANT DATE          := to_date('20080101','yyyymmdd');
  /* ----------------------------------------------------------------------------------------
  * createorder
  *
  *   procedure     : createorder
  *   description   : This procedure is used to call the other two procedures which will insert data into order header and order line respectively.
  *   scope         : public
  *   arguments
  *        in                    : p_batch_order : Batch details
  *
  *
  *        in/out                : NA
  *        out                   : p_status_code : Interface status code
  *                              : p_error_message : Error Message if any
  *
  *  Date               Author              Description
  *  ---------         -------------        -------------------------------------------------------
  *  23.12.2015        Rahul Kumar Singh     Created
  ----------------------------------------------------------------------------------------*/
  PROCEDURE createorder(
      p_batch_order IN xxcu_ont_create_order_parser.batch_order_rec,
      --p_operating_unit  IN              xxcu_ont_create_order_parser.batch_order_rec.org_id,
      p_status_code OUT NUMBER,
      p_error_message OUT VARCHAR2 )
  AS
    --v_order_head xxcu_ont_create_order_parser.order_head         := order_head ();
    v_order_head xxcu_ont_create_order_parser.order_head:= xxcu_ont_create_order_parser.order_head();
    v_order_line xxcu_ont_create_order_parser.order_line:=xxcu_ont_create_order_parser.order_line();
    v_inv_spec xxcu_ont_create_order_parser.spec_line   :=xxcu_ont_create_order_parser.spec_line();
    v_header_id             NUMBER;
    v_orderline_count       NUMBER := 0;
    ln_source_cnt           NUMBER;
    lv_is_bill              VARCHAR2(100):='FALSE';
    lv_cust_count           NUMBER       :=0;
    v_finish_status         BOOLEAN;
    v_startdate             DATE   := to_date(sysdate,'DD-MON-YY HH24:MI:SS');
    v_headers_count         NUMBER := 0;
    v_batch_seq_no          VARCHAR2 (10000);
    v_version_number        NUMBER;
    v_status_function       NUMBER := g_code_ok;
    v_orig_sys_document_ref VARCHAR2 (100);
    v_upd_orig_sys_line_ref VARCHAR2 (50); -- 1161
    v_errors                NUMBER;
    l_party_rec hz_party_v2pub.party_rec_type;
    ln_profile_id NUMBER;
    l_person_rec_type hz_party_v2pub.person_rec_type;
    --Logg attributes
    v_num_orderheads       NUMBER := 0;
    ln_party_obj_version   NUMBER;
    v_num_orderlines       NUMBER := 0;
    v_max_date             DATE   := NULL;
    v_min_date             DATE   := NULL;
    l_status_code          NUMBER;
    ln_order_type_id       NUMBER;
    lv_tax_calc_event_code VARCHAR2(30 byte); ---Added by kavita as per CR#2449
    ln_batch_count         NUMBER;
    l_message              VARCHAR2(1000);
    l_log_label            VARCHAR2(200);
    e_error                EXCEPTION;
    ln_count               NUMBER:=0;
    ln_sum                 NUMBER:=0;
    e_wrong_cust           EXCEPTION;
    e_mixed_order          EXCEPTION;
    lv_customer_num        VARCHAR2(100);
    lv_email               VARCHAR2(1000);
    ln_org_id              NUMBER;
    lv_price_date          DATE;
    lv_curr_code           VARCHAR2(100);
    l_transaction_id       NUMBER;
    lv_msg_text            VARCHAR2(4000);
    lv_tax                 VARCHAR2(100);
    e_null_tax             EXCEPTION;
    ln_total_amount        NUMBER:=0;
    e_invalid_source       EXCEPTION;
    ln_header_id           NUMBER;
    ln_hold                NUMBER;
    ln_spec_count          NUMBER;
    /* version 1.27 */
    ln_k_count        NUMBER:=0;
    lv_wrong_price    VARCHAR2(10);
    lv_wrong_cust     VARCHAR2(10);
    lv_wrong_ret_data VARCHAR2(10);
    lv_wrong_tax      VARCHAR2(10);
    lv_wrong_ref      VARCHAR2(10);
    lv_wrong_salesper VARCHAR2(10);
    /*version 1.23*/
    ln_customer_id  NUMBER;
    lv_party_type   VARCHAR2(20);
    lv_prepay       VARCHAR2(10):='Y';
    ln_print_count  NUMBER      :=0;
    lv_sales_yes_no VARCHAR2(20);
    ln_tax          NUMBER;
    /* start defect 3921 */
    ln_req_id            NUMBER;
    lv_status            VARCHAR2(20):='X';
    lv_phase             VARCHAR2(20):='Z';
    ln_resp_id           NUMBER;
    ln_app_id            NUMBER;
    lv_order_source_cust VARCHAR2(50);
    /*end */
    --Added by Divyansh for defect #8447
    l_item_type    NUMBER;
    l_item_id      NUMBER;
    l_order_count  NUMBER;
    ln_total_addr  NUMBER;
    lv_acct_number VARCHAR2(240):=NULL;
    --Added by Divyansh for defect #8447
    l_country_codes NUMBER;--Added by Divyansh for defect #8629
    x_person_cust_obj_tbl hz_person_cust_bo_tbl;
    lv_person_rec_type hz_party_v2pub.person_rec_type;-- CR 5026
    lv_party_rec hz_party_v2pub.party_rec_type;       -- CR 5026
    /*x_person_cust_obj         OUT NOCOPY hz_person_cust_bo,*/
    --removed as per the defect 1247
    p_return_status VARCHAR2(10);
    x_return_status VARCHAR2(10);
    x_msg_count     NUMBER;
    p_msg_data      VARCHAR2(2000);
    x_msg_data      VARCHAR2(2000);
    p_person_id     NUMBER;
    --ln_resp_id number;
    ln_appl_id     NUMBER;
    lv_orig_system VARCHAR2(240);
    ln_sold_to_org NUMBER;
    p_cust_account_rec hz_cust_account_v2pub.cust_account_rec_type;
    p_object_version_number  NUMBER;
    ln_object_version_number NUMBER;
    l_attributes_row_table ego_user_attr_row_table;
    l_attributes_data_table ego_user_attr_data_table;
    l_change_info_table ego_user_attr_change_table;
    ln_extension_id       NUMBER;
    ln_party_id           NUMBER;
    lv_mode               VARCHAR2(1000);
    lv_failed_row_id_list VARCHAR2(1000);
    lv_return_status      VARCHAR2(255):='S';---defect 4609
    lv_digipost_address   VARCHAR2(255);
    ln_errorcode          NUMBER;
    ln_msg_count          NUMBER;
    lv_msg_data           VARCHAR2(4000);
    ln_organization_id    NUMBER;
    ln_application_id     NUMBER;
    ln_attribute_group_id NUMBER;
    lv_attr_group_type    VARCHAR2(100);
    lv_attr_group_name    VARCHAR2(100);
    lv_attribute_name     VARCHAR2(2000);
    ln_person_profile_id  NUMBER;
    lv_term_name          VARCHAR2(100);
    ln_term               NUMBER;
    lv_distri_flag        VARCHAR2(10);--CR 5144
  BEGIN
    -- p_batch_order.v_order_head:= xxcu_ont_create_order_parser.order_head();
    v_order_head := xxcu_ont_create_order_parser.order_head();
    v_order_line := xxcu_ont_create_order_parser.order_line();
    v_inv_spec   :=xxcu_ont_create_order_parser.spec_line();
    v_order_head.extend(1);
    v_order_line.extend;
    v_inv_spec.extend;
    p_status_code := g_code_ok;
    g_program_loc := 'starter';
    --xxcu_int_util_pkg.int_apps_initialize(apps.fnd_profile.VALUE('ORG_ID'), upper('XXCU_ONT_CREATE_ORDER_PKG'), l_status_code, l_message);
    -- MO_GLOBAL.INIT('ONT');
    IF l_status_code <> 0 THEN
      l_log_label    := 'apps_initialize';
      l_message      := 'Unable to initialize application ' || l_message;
      raise e_error;
    END IF;
    xxcu_log_pkg.log (p_log_level => fnd_log.level_statement, p_module_name => gpackagename, p_log_text => 'Number of order headers: ' || p_batch_order.v_order_head.count );
    v_batch_seq_no := ' || BatchId:' || p_batch_order.batchid || ' Messageno:' || p_batch_order.messagesequenceno || ' || ';
    xxcu_log_pkg.log (p_log_level => fnd_log.level_statement, p_module_name => gpackagename, p_log_text => 'Ready to createorderheader');
    dbms_output.put_line('Hi:' || p_batch_order.v_order_head.count);
    /* added for version 1.9 Defect# 209,167 */
    /* BEGIN
    SELECT COUNT(batchid)
    INTO ln_batch_count
    FROM XXCU.XXCU_ONT_INT_ORDER_BATCH
    WHERE batchid=p_batch_order.batchid;
    EXCEPTION
    WHEN OTHERS THEN
    ln_batch_count:=0;
    END;*/
    IF(p_batch_order.batchid IS NULL ) THEN--OR ln_batch_count >0 ) THEN
      raise e_error;
    END IF;
    FOR hi IN 1 .. p_batch_order.v_order_head.count
    LOOP
      BEGIN
        ln_count:=0;
        ln_sum  :=0;
        initialize_variables(p_batch_order.v_order_head (hi).org_id);
        dbms_output.put_line('g_user_id:'||g_user_id);
        g_org_id:=p_batch_order.v_order_head (hi).org_id;
        /* Version 1.9 Defect # 216 */
        /*    BEGIN
        FOR p IN 1 .. p_batch_order.v_order_head (hi).orderlines.COUNT
        LOOP
        dbms_output.put_line(SIGN(p_batch_order.v_order_head (hi).orderlines(p).quantity));
        /* start defect 2413
        IF(p_batch_order.v_order_head (hi).orderlines(p).quantity=0) THEN
        ln_count                                              :=1;
        ELSE
        ln_count:=SIGN(p_batch_order.v_order_head (hi).orderlines(p).quantity);
        END IF;
        /* end defect 2413
        ln_sum :=ln_count+ln_sum;
        END LOOP;
        dbms_output.put_line('ln_sum:'||ln_sum);
        END;
        IF(ABS(ln_sum)<>p_batch_order.v_order_head (hi).orderlines.COUNT) THEN
        raise e_mixed_order;
        END IF;*/
        /* Version 1.25 CR # 1851 Prepaid Order */
        BEGIN
          ln_total_amount :=0;
          /* start  CR 2811  */
          lv_prepay                                          :='Y';
          IF(upper(p_batch_order.v_order_head (hi).order_type)='RETURN') THEN
            lv_prepay                                        :='N';
          END IF;
          /* end CR 2811 */
          IF(p_batch_order.v_order_head (hi).prepayment_flag='Y' AND lv_prepay<>'N' AND p_batch_order.v_order_head (hi).prepaid_amount IS NULL) THEN ---defect 3922
            FOR b IN 1 .. p_batch_order.v_order_head (hi).orderlines.count
            LOOP
              -- dbms_output.put_line(SIGN(p_batch_order.v_order_head (hi).orderlines(p).quantity));
              ln_total_amount :=ln_total_amount+(p_batch_order.v_order_head (hi).orderlines(b).unit_selling_price* p_batch_order.v_order_head (hi).orderlines(b).quantity)+ NVL(p_batch_order.v_order_head (hi).orderlines(b).tax_value,0);
            END LOOP;
          ELSE
            ln_total_amount:=p_batch_order.v_order_head (hi).prepaid_amount;--defect 3922
          END IF;
          dbms_output.put_line('ln_sum:'||ln_sum);
        END;
        BEGIN
          g_program_loc     := 'createOrderHeader';
          g_order_source_id := getordersourceid(p_batch_order.v_order_head (hi).order_source);
          xxcu_common_log_rt.msglog ('INFO', 'before Create Head ', 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
          v_orig_sys_document_ref := createorderhead_interface (p_batch_order.v_order_head (hi), p_batch_order.batchid, p_status_code, v_num_orderheads,ln_total_amount,p_error_message); --commented for E2-IM013089363 (defect 8035)
          v_headers_count         := v_headers_count + 1;
          --v_header_id             := getheader_id (p_batch_order.v_order_head (hi).ordereddate, p_batch_order.v_order_head (hi).customer_number, v_version_number);
          /* Defect#2848 Start change for Return order added org_id*/
          v_header_id := getheader_id ( p_batch_order.v_order_head (hi).customer_number,p_batch_order.v_order_head (hi).return_order_reference,p_batch_order.v_order_head (hi).org_id, v_version_number);
          /* Defect#2848 End change for Return order added org_id*/
          dbms_output.put_line('Header Id'||v_header_id);
          --COMMIT;
          --   xxcu_log_pkg.LOG (p_log_level => fnd_log.level_statement, p_module_name => gpackagename, p_log_text => ' - Order Lines Count: ' || p_batch_order.v_order_head(hi).orderlines.COUNT );
          dbms_output.put_line('B4 v_orderline_count');
          dbms_output.put_line('v_orderline_count' ||hi);                                           --p_batch_order.v_order_head(hi).orderlines.COUNT);
          v_orderline_count := v_orderline_count + p_batch_order.v_order_head (hi).orderlines.count;--p_batch_order.v_order_head(hi).orderlines.COUNT;
          --setting log attributes
          IF NVL(v_max_date,p_batch_order.v_order_head(hi).ordereddate-1 ) < p_batch_order.v_order_head(hi).ordereddate THEN
            v_max_date                                                    := p_batch_order.v_order_head(hi).ordereddate;
          END IF;
          IF NVL(v_min_date,p_batch_order.v_order_head(hi).ordereddate+1) > p_batch_order.v_order_head(hi).ordereddate THEN
            v_min_date                                                   := p_batch_order.v_order_head(hi).ordereddate;
          END IF;
          dbms_output.put_line('v_max_date:' || v_max_date);
          dbms_output.put_line('v_min_date:' || v_min_date);
          dbms_output.put_line('Hi1ines:' || p_batch_order.v_order_head(hi).orderlines.count);
          /* start CR artf5962829 */
          /* start defect 4677 */
          xxcu_common_log_rt.msglog ('INFO', 'p_batch_order.v_order_head (hi).lv_private_cust.count'||p_batch_order.v_order_head (hi).lv_private_cust.count, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
          FOR bjjj IN 1 .. p_batch_order.v_order_head (hi).lv_private_cust.count
          LOOP
            /* end defect 4677 */
            IF(p_batch_order.v_order_head (hi).lv_private_cust(bjjj).customer_reference IS NOT NULL AND p_batch_order.v_order_head (hi).customer_number IS NULL) THEN
              FOR cust_rec IN 1.. p_batch_order.v_order_head ( hi ) .lv_private_cust.count
              LOOP
                /* start CR 4609 */
                BEGIN
                  SELECT flv.description
                  INTO lv_orig_system
                  FROM applsys.fnd_lookup_values flv
                    /* start defect 4944 */
                    /* ,
                    --    oe_order_headers_all ooha,
                    oe_order_sources oos
                    */
                  WHERE flv.lookup_type     ='XXCU_CUSTOMER_ORDER_SOURCE'
                  AND upper(flv.lookup_code)=upper(p_batch_order.v_order_head (hi).order_source)
                  AND flv.language          ='US';
                  /* start defect 4944 */
                  /*AND oos.name          =p_batch_order.v_order_head (hi).order_source
                  -- AND ooha.org_id               =p_batch_order.v_order_head (hi).org_id
                  --  AND ooha.orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference
                  AND upper(oos.name) =upper(flv.lookup_code) ;*/
                EXCEPTION
                WHEN OTHERS THEN
                  xxcu_common_log_rt.msglog ('ERR', 'Error while deriving source system for private customer'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                END;
                --person type customer
                --   IF ( p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).first_name IS NOT NULL AND p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).last_name IS NOT NULL ) THEN
                --    BEGIN
                /*   INSERT
                INTO oe_customer_info_iface_all
                (
                created_by,
                creation_date,
                customer_info_ref,
                customer_info_type_code,
                customer_number,
                customer_type,
                last_update_date,
                last_updated_by,
                person_first_name,
                person_last_name,
                new_account_number
                )
                VALUES
                (
                g_user_id, -- created_by
                sysdate,   -- creation_date
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).customer_reference
                || '-'
                ||xxcu_oe_cust_ref.nextval,                                                                                       --Defect 4452
                'ACCOUNT',                                                                                                        -- customer_info_type_code
                NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number,xxdm_cust_acct_no_seq.nextval), -- customer_number
                'PERSON',                                                                                                         -- customer_type
                sysdate,                                                                                                          -- last_update_date
                g_user_id,                                                                                                        -- last_updated_by
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).first_name,
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).last_name,
                NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number,xxdm_cust_acct_no_seq.nextval)
                );
                */
                /* start CR 5144 */
                BEGIN
                  SELECT NVL(DECODE(upper(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).distribution_flag),'YES','Y','N'),'N')
                  INTO lv_distri_flag
                  FROM dual;
                EXCEPTION
                WHEN OTHERS THEN
                  lv_distri_flag:='N';
                END;
                /* end CR 5144 */
                IF( p_batch_order.v_order_head ( hi ). lv_private_cust(cust_rec).lv_addresslines.count=1 ) THEN--only bill to address is present in xml
                  FOR cust_addr IN 1 .. p_batch_order.v_order_head ( hi ). lv_private_cust(cust_rec).lv_addresslines.count
                  LOOP
                    BEGIN
                      /* start CR 5144 */
                      /* start CR 5113 */
                      /* xxcu_imc_private_cust_pkg.create_person_cust_bo( p_init_msg_list => fnd_api.g_false, p_validate_bo_flag => fnd_api.g_true, p_person_prenameadj=> NULL, p_person_first_name =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).first_name, p_person_mid_name =>NULL, p_person_last_name => p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).last_name, p_date_of_birth =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).date_of_birth, p_account_name => NULL, p_country_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country,                                                                                             -- country
                      p_address1 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address1, p_address2 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address2, p_address3 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address3, p_address4 =>NULL, p_city =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).city, p_postal_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).postal_code, p_county =>NULL, p_state =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country, -- country
                      p_province =>NULL, p_ship_address1 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address1, p_ship_address2 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address2, p_ship_address3 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address3, p_ship_address4 =>NULL, p_ship_city =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).city , p_ship_postal_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).postal_code, p_ship_country_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country , p_ship_county =>NULL, p_ship_state =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country , p_ship_province =>NULL, p_care_of =>NULL, p_behalf_of =>NULL, p_invoice_ref =>NULL, p_reserved_text =>NULL,
                      p_created_by_module =>NULL, p_source_system =>lv_orig_system, p_source_system_reference =>NULL, p_user_id =>NULL, p_phone_number =>NULL, p_far_bill =>NULL, p_far_ship =>NULL, p_distribution=>lv_distri_flag,p_org_id=>p_batch_order.v_order_head (hi).org_id,x_person_cust_obj_tbl=>x_person_cust_obj_tbl, x_return_status=>p_return_status , x_msg_count=>x_msg_count, x_msg_data=>p_msg_data, x_person_id=>p_person_id );
                      */
                      xxcu_create_svcs_pkg.create_person_cust_bo ( p_init_msg_list => fnd_api.g_false, p_validate_bo_flag => fnd_api.g_true, p_person_prenameadj=> NULL, p_person_first_name =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).first_name, p_person_mid_name =>NULL, p_person_last_name => p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).last_name, p_date_of_birth =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).date_of_birth, p_account_name => NULL, p_country_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country,                                                                                                 -- country
                      p_address1 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address1, p_address2 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address2, p_address3 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address3, p_address4 =>NULL, p_city =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).city, p_postal_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).postal_code, p_county =>NULL, p_state =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country, -- country
                      p_province =>NULL, p_ship_address1 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address1, p_ship_address2 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address2, p_ship_address3 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address3, p_ship_address4 =>NULL, p_ship_city =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).city , p_ship_postal_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).postal_code, p_ship_country_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country , p_ship_county =>NULL, p_ship_state =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country , p_ship_province =>NULL, p_care_of =>NULL, p_behalf_of =>NULL, p_invoice_ref =>NULL, p_reserved_text =>NULL,
                      p_created_by_module =>NULL, p_source_system =>lv_orig_system, p_source_system_reference =>NULL, p_user_id =>NULL, p_phone_number =>NULL, p_far_bill =>NULL, p_far_ship =>NULL, x_person_cust_obj_tbl=>x_person_cust_obj_tbl, x_return_status=>p_return_status , x_msg_count=>x_msg_count, x_msg_data=>p_msg_data, x_person_id=>p_person_id );
                      /* end CR 5113 */
                      /* end CR 5144 */
                      COMMIT;
                      xxcu_common_log_rt.msglog ('INFO', 'Customer creation status '||p_return_status||' ' ||p_person_id|| p_msg_data, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                    EXCEPTION
                    WHEN OTHERS THEN
                      xxcu_common_log_rt.msglog ('ERR', 'Error while creating customer 1'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                    END ;
                  END LOOP;
                  BEGIN
                    FOR i IN x_person_cust_obj_tbl.first.. x_person_cust_obj_tbl.last
                    LOOP
                      FOR j IN x_person_cust_obj_tbl(i).account_objs.first..x_person_cust_obj_tbl(i).account_objs.last
                      LOOP
                        xxcu_common_log_rt.msglog ('INFO', 'Account Number :'||x_person_cust_obj_tbl(i).account_objs(j).account_number, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                        lv_acct_number:=x_person_cust_obj_tbl(i).account_objs(j).account_number;
                      END LOOP;
                    END LOOP;
                  EXCEPTION
                  WHEN OTHERS THEN
                    lv_acct_number:=NULL;
                  END;
                ELSE
                  --bill to and ship to addresses are exactly same or different
                  -- FOR cust_addrr IN 1 .. p_batch_order.v_order_head ( hi ). lv_private_cust(cust_rec).lv_addresslines.count
                  -- LOOP
                  -- ln_k_count:=ln_k_count+1;
                  --   IF( ln_k_count                                                                                                                                                                                                                                                                                           <>p_batch_order.v_order_head(hi).lv_private_cust(cust_rec).lv_addresslines.count) THEN
                  --     IF(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addrr).address1                                                                                                                                                                                                        = p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addrr+1).address1 AND NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addrr).address2,'X') = NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addrr+1).address2,'X') AND NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addrr).address3,'X') = NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addrr+1).address3,'X') AND p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addrr).city = p_batch_order.v_order_head (hi)
                  -- .lv_private_cust(cust_rec).lv_addresslines(cust_addrr+1).city AND p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addrr).postal_code = p_batch_order.v_order_head (hi).lv_private_cust(cust_rec)
                  --      .lv_addresslines(cust_addrr                                                                                                                                                          +1) .postal_code AND p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addrr).country = p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addrr+1).country ) THEN
                  BEGIN
                    /* start CR 5144 */
                    /* CR 5113 */
                    /* xxcu_imc_private_cust_pkg.create_person_cust_bo ( p_init_msg_list => fnd_api.g_false, p_validate_bo_flag => fnd_api.g_true, p_person_prenameadj=> NULL, p_person_first_name =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).first_name, p_person_mid_name =>NULL, p_person_last_name => p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).last_name, p_date_of_birth =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).date_of_birth, p_account_name => NULL, p_country_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).country,                                                    -- country
                    p_address1 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).address1, p_address2 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).address2, p_address3 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).address3, p_address4 =>NULL, p_city =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).city, p_postal_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).postal_code, p_county =>NULL, p_state =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).country, -- country
                    p_province =>NULL, p_ship_address1 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).address1, p_ship_address2 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).address2, p_ship_address3 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).address3, p_ship_address4 =>NULL, p_ship_city =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).city , p_ship_postal_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).postal_code, p_ship_country_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).country , p_ship_county =>NULL, p_ship_state =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).country , p_ship_province =>NULL, p_care_of =>NULL, p_behalf_of =>NULL, p_invoice_ref =>NULL, p_reserved_text =>NULL, p_created_by_module =>NULL, p_source_system =>lv_orig_system,
                    p_source_system_reference =>NULL, p_user_id =>NULL, p_phone_number =>NULL, p_far_bill =>NULL, p_far_ship =>NULL, p_distribution=>lv_distri_flag,p_org_id=>p_batch_order.v_order_head (hi).org_id, x_person_cust_obj_tbl=>x_person_cust_obj_tbl, x_return_status=>p_return_status , x_msg_count=>x_msg_count, x_msg_data=>p_msg_data, x_person_id=>p_person_id );
                    */
                    xxcu_create_svcs_pkg.create_person_cust_bo ( p_init_msg_list => fnd_api.g_false, p_validate_bo_flag => fnd_api.g_true, p_person_prenameadj=> NULL, p_person_first_name =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).first_name, p_person_mid_name =>NULL, p_person_last_name => p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).last_name, p_date_of_birth =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).date_of_birth, p_account_name => NULL, p_country_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).country,                                                         -- country
                    p_address1 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).address1, p_address2 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).address2, p_address3 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).address3, p_address4 =>NULL, p_city =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).city, p_postal_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).postal_code, p_county =>NULL, p_state =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(1).country, -- country
                    p_province =>NULL, p_ship_address1 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).address1, p_ship_address2 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).address2, p_ship_address3 =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).address3, p_ship_address4 =>NULL, p_ship_city =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).city , p_ship_postal_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).postal_code, p_ship_country_code =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).country , p_ship_county =>NULL, p_ship_state =>p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(2).country , p_ship_province =>NULL, p_care_of =>NULL, p_behalf_of =>NULL, p_invoice_ref =>NULL, p_reserved_text =>NULL, p_created_by_module =>NULL, p_source_system =>lv_orig_system,
                    p_source_system_reference =>NULL, p_user_id =>NULL, p_phone_number =>NULL, p_far_bill =>NULL, p_far_ship =>NULL, x_person_cust_obj_tbl=>x_person_cust_obj_tbl, x_return_status=>p_return_status , x_msg_count=>x_msg_count, x_msg_data=>p_msg_data, x_person_id=>p_person_id );
                    /* end CR 5113 */
                    /* end CR 5144 */
                    COMMIT;
                    xxcu_common_log_rt.msglog ('INFO', 'Customer creation status '||p_return_status||' ' ||p_person_id|| p_msg_data, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                    BEGIN
                      FOR i IN x_person_cust_obj_tbl.first.. x_person_cust_obj_tbl.last
                      LOOP
                        FOR j IN x_person_cust_obj_tbl(i).account_objs.first..x_person_cust_obj_tbl(i).account_objs.last
                        LOOP
                          xxcu_common_log_rt.msglog ('INFO', 'Account Number :'||x_person_cust_obj_tbl(i).account_objs(j).account_number, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                          lv_acct_number:=x_person_cust_obj_tbl(i).account_objs(j).account_number;
                        END LOOP;
                      END LOOP;
                    EXCEPTION
                    WHEN OTHERS THEN
                      lv_acct_number:=NULL;
                    END;
                  EXCEPTION
                  WHEN OTHERS THEN
                    xxcu_common_log_rt.msglog ('ERR', 'Error while creating private customer 2'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  END;
                END IF;
                BEGIN
                  IF(lv_acct_number IS NULL) THEN
                    xxcu_common_log_rt.msglog ('INFO', 'p_person_id'||p_person_id, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                    SELECT cust_account_id,
                      object_version_number
                    INTO ln_sold_to_org,
                      p_object_version_number
                    FROM hz_cust_accounts
                    WHERE party_id=p_person_id;
                    xxcu_common_log_rt.msglog ('INFO', 'ln_sold_to_org'||ln_sold_to_org, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  ELSE
                    SELECT cust_account_id,
                      object_version_number
                    INTO ln_sold_to_org,
                      p_object_version_number
                    FROM hz_cust_accounts
                    WHERE account_number=lv_acct_number;
                  END IF;
                  -- xxcu_common_log_rt.msglog ('INFO', 'p_person_id'||p_person_id, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                EXCEPTION
                WHEN OTHERS THEN
                  xxcu_common_log_rt.msglog ('ERROR', 'Customer Creation failed '||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  /* start defect 5204*/
                  p_status_code  :=2;
                  p_error_message:='Customer Creation failed '||p_msg_data;
                  DELETE
                  FROM oe_headers_iface_all
                  WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference
                  AND org_id                 =p_batch_order.v_order_head (hi).org_id;
                  /* end defect 5204 */
                END;
                /* start CR 5026 */
                IF(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).far_number IS NOT NULL) THEN
                  mo_global.init ('AR');
                  SELECT responsibility_id,
                    application_id
                  INTO ln_resp_id,
                    ln_appl_id
                  FROM applsys.fnd_responsibility_tl
                  WHERE responsibility_name LIKE 'PB AR Super User'
                  AND language='US';
                  fnd_global.apps_initialize (user_id => g_user_id, resp_id => ln_resp_id, resp_appl_id => ln_appl_id );
                  mo_global.set_policy_context ('S', p_batch_order.v_order_head (hi).org_id);
                  BEGIN
                    SELECT object_version_number
                    INTO ln_object_version_number
                    FROM ar.hz_parties
                    WHERE party_id=p_person_id;
                  EXCEPTION
                  WHEN OTHERS THEN
                    fnd_file.put_line(fnd_file.output,'Invalid object version number');
                  END;
                  lv_party_rec.party_id        := p_person_id;
                  lv_party_rec.attribute9      := p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).far_number;
                  lv_person_rec_type.party_rec := lv_party_rec;
                  hz_party_v2pub.update_person (p_init_msg_list => fnd_api.g_true, p_person_rec => lv_person_rec_type, p_party_object_version_number => ln_object_version_number, x_profile_id => ln_profile_id, x_return_status =>lv_return_status, x_msg_count => ln_msg_count, x_msg_data => lv_msg_data );
                  --dbms_output.put_line ('API Status: ' || lv_return_status);
                  IF (lv_return_status <> 'S') THEN
                    xxcu_common_log_rt.msglog ('ERR', 'ERROR while updating attribute9 of hz_parties :' || lv_msg_data, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  ELSE
                    xxcu_common_log_rt.msglog ('INFO', 'Attribute9 is updated successfully.', 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  END IF;
                  COMMIT;
                END IF;
                /* end CR 5026 */
                IF(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number IS NOT NULL) THEN
                  mo_global.init ('AR');
                  SELECT responsibility_id,
                    application_id
                  INTO ln_resp_id,
                    ln_appl_id
                  FROM applsys.fnd_responsibility_tl
                  WHERE responsibility_name LIKE 'PB AR Super User'
                  AND language='US';
                  fnd_global.apps_initialize (user_id => g_user_id, resp_id => ln_resp_id, resp_appl_id => ln_appl_id );
                  mo_global.set_policy_context ('S', p_batch_order.v_order_head (hi).org_id);
                  p_cust_account_rec.cust_account_id := ln_sold_to_org;
                  p_cust_account_rec.account_number  := p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number;
                  hz_cust_account_v2pub.update_cust_account ( 'T' , p_cust_account_rec , p_object_version_number , x_return_status , x_msg_count , x_msg_data ) ;
                  COMMIT;
                END IF;
                IF(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).digi_id IS NOT NULL) THEN
                  lv_attr_group_name                                                 := 'DIGIPOST_ID';
                  l_change_info_table                                                := NULL;
                  --  l_attribute_Group_id   :=281;
                  lv_attribute_name :='ID';
                  --l_digipost_address     :=p_digi_id;
                  BEGIN
                    SELECT application_id,
                      attr_group_id
                    INTO ln_application_id,
                      ln_attribute_group_id
                    FROM ego_attr_groups_v
                    WHERE attr_group_type='HZ_PERSON_PROFILES_GROUP';
                  EXCEPTION
                  WHEN OTHERS THEN
                    xxcu_common_log_rt.msglog ('ERR', 'No data found for attr_group_type HZ_PERSON_PROFILES_GROUP'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  END;
                  /*values can be find from EGO_ATTR_GROUPS_V*/
                  l_attributes_row_table :=ego_user_attr_row_table( ego_user_attr_row_obj( 1 --ROW_IDENTIFIER
                  ,ln_attribute_group_id                                                     --ATTR_GROUP_ID
                  ,ln_application_id                                                         --ATTR_GROUP_APP_ID
                  ,lv_attr_group_type                                                        --ATTR_GROUP_TYPE
                  ,lv_attr_group_name ,NULL ,NULL                                            --DATA_LEVEL_1
                  ,NULL                                                                      --DATA_LEVEL_2
                  ,NULL ,NULL ,NULL ,ego_user_attrs_data_pvt.g_create_mode                   --TRANSACTION_TYPE
                  ) );
                  l_attributes_data_table := ego_user_attr_data_table( ego_user_attr_data_obj( 1--ROW_IDENTIFIER
                  ,lv_attribute_name                                                            --ATTR_NAME
                  ,p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).digi_id            --ATTR_VALUE_STR
                  ,NULL                                                                         --ATTR_VALUE_NUM (in the baseUOM,'FT')
                  ,NULL                                                                         --ATTR_VALUE_DATE
                  ,NULL                                                                         --ATTR_DISP_VALUE
                  ,NULL                                                                         --ATTR_UNIT_OF_MEASURE (display this value in'CM')
                  ,1                                                                            --USER_ROW_IDENTIFIER
                  ) );
                  BEGIN
                    SELECT hpp.person_profile_id,
                      hca.party_id
                    INTO ln_person_profile_id,
                      ln_party_id
                    FROM hz_person_profiles hpp,
                      -- oe_order_headers_all ooha,
                      hz_cust_accounts hca
                    WHERE hpp.party_id =hca.party_id
                      --  AND ooha.orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference
                    AND hca.cust_account_id=ln_sold_to_org;
                  EXCEPTION
                  WHEN OTHERS THEN
                    xxcu_common_log_rt.msglog ('ERR', 'No data found for person profile id'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  END;
                  hz_extensibility_pub.process_person_record ( p_api_version => 1.0 , p_person_profile_id => ln_person_profile_id , p_attributes_row_table => l_attributes_row_table , p_attributes_data_table => l_attributes_data_table , p_change_info_table => l_change_info_table , p_entity_id => 1 , p_entity_index => 1 , p_entity_code => NULL , p_debug_level => 3 , p_init_error_handler => fnd_api.g_true , p_write_to_concurrent_log => fnd_api.g_false , p_init_fnd_msg_list => fnd_api.g_false , p_log_errors => fnd_api.g_true , p_add_errors_to_fnd_stack => fnd_api.g_false , p_commit => fnd_api.g_false ,x_failed_row_id_list => lv_failed_row_id_list ,x_return_status => lv_return_status ,x_errorcode => ln_errorcode ,x_msg_count => ln_msg_count ,x_msg_data => lv_msg_data );
                  SELECT extension_id
                  INTO ln_extension_id
                  FROM hz_per_profiles_ext_b
                  WHERE person_profile_id=ln_person_profile_id;
                  --  fnd_file.put_line(fnd_file.output,'Extension Id:'||SUBSTR(ln_extension_id,1,254));
                  -- xxcu_common_log_rt.msglog ('INFO', 'x_return_status '||SQLERRM, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  -- xxcu_common_log_rt.msglog ('INFO', 'l_msg_data '||SUBSTR(l_msg_data,1,254), 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  -- xxcu_common_log_rt.msglog ('INFO', 'Extension id: '||SUBSTR(L_EXTENSION_ID,1,254), 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  IF (LENGTH(lv_failed_row_id_list) > 0) THEN
                    fnd_file.put_line(fnd_file.output,'List of rows that failed: '||lv_failed_row_id_list);
                    -- xxcu_common_log_rt.msglog ('INFO', 'List of rows that failed: '||l_failed_row_id_list, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                    DECLARE
                      lv_errors_tbl error_handler.error_tbl_type;
                    BEGIN
                      error_handler.get_message_list(lv_errors_tbl);
                      FOR i IN 1..lv_errors_tbl.count
                      LOOP
                        xxcu_common_log_rt.msglog ('ERR', 'Message:'||SUBSTR(lv_errors_tbl(i).message_text,1,254), 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                        --   fnd_file.put_line(fnd_file.output,'Message: '||SUBSTR(lv_errors_tbl(i).message_text,1,254));
                        --   fnd_file.put_line(fnd_file.output,'Msg Type: '||SUBSTR(lv_errors_tbl(i).message_type,1,254));
                        --  xxcu_common_log_rt.msglog ('INFO', 'Message: '||SUBSTR(l_errors_tbl(i).message_text,1,254), 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                        --  xxcu_common_log_rt.msglog ('INFO', 'Msg Type: '||SUBSTR(l_errors_tbl(i).message_type,1,254), 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                      END LOOP;
                    END;
                  END IF;
                END IF;
                -- END If;
                -- END LOOP;
                /* start defect 4783 */
                BEGIN
                  BEGIN
                    SELECT flv.profile_option_value
                    INTO lv_term_name
                    FROM fnd_profile_options_vl fpov,
                      applsys.fnd_profile_option_values flv
                    WHERE fpov.profile_option_name='XXCU_DEFAULT_PAYMET_TERM'
                    AND flv.profile_option_id     =fpov.profile_option_id;
                  EXCEPTION
                  WHEN OTHERS THEN
                    xxcu_common_log_rt.msglog ('ERR', 'Error in profile option PB Default Payment Term for Private Customers'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  END;
                  BEGIN
                    SELECT term_id INTO ln_term FROM ra_terms WHERE name=lv_term_name;
                  EXCEPTION
                  WHEN OTHERS THEN
                    xxcu_common_log_rt.msglog ('ERR', 'Error while deriving paymet term for private customer'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  END;
                  /* end defect 4783 */
                  UPDATE oe_headers_iface_all
                  SET payment_term_id        =ln_term,--'10 days',--defect 4783
                    sold_to_org_id           =ln_sold_to_org
                  WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference
                  AND org_id                 =p_batch_order.v_order_head (hi).org_id;
                  COMMIT;
                EXCEPTION
                WHEN OTHERS THEN
                  xxcu_common_log_rt.msglog ('ERR', 'Error while updating order header'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                END;
                /*  FOR bjk IN 1 .. p_batch_order.v_order_head (hi).orderlines.count
                LOOP
                -- dbms_output.put_line(SIGN(p_batch_order.v_order_head (hi).orderlines(p).quantity));
                UPDATE oe_lines_iface_all
                SET payment_term_id           =ln_term,--'10 days'--defect 4783
                WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference
                AND org_id                 =p_batch_order.v_order_head (hi).org_id;
                COMMIT;
                END LOOP;
                */
                /*  EXCEPTION
                WHEN OTHERS THEN
                xxcu_common_log_rt.msglog ('INFO', 'Error in insert of customer '||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                END;
                */
                /*   ELSE
                BEGIN
                INSERT
                INTO oe_customer_info_iface_all
                (
                created_by,
                creation_date,
                customer_info_ref,
                customer_info_type_code,
                customer_number,
                customer_type,
                last_update_date,
                last_updated_by,
                organization_name,
                new_account_number
                )
                VALUES
                (
                g_user_id, -- created_by
                sysdate,   -- creation_date
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).customer_reference
                ||'-'
                ||xxcu_oe_cust_ref.nextval,                                                                                       --Defect 4452
                'ACCOUNT',                                                                                                        -- customer_info_type_code
                NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number,xxdm_cust_acct_no_seq.nextval), -- customer_number
                'ORGANIZATION',                                                                                                   -- customer_type
                sysdate,                                                                                                          -- last_update_date
                g_user_id,                                                                                                        -- last_updated_by
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).customer_reference
                ||'-'
                ||xxcu_oe_cust_ref.currval, --'IL CUST ACT 06', -- customer_info_ref
                NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number,xxdm_cust_acct_no_seq.nextval)
                );
                UPDATE oe_headers_iface_all
                SET orig_sys_customer_ref =p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).customer_reference
                || '-'
                ||xxcu_oe_cust_ref.currval,--Defect 4452
                payment_term             ='10 days'
                WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference
                AND org_id                 =p_batch_order.v_order_head (hi).org_id;
                COMMIT;
                EXCEPTION
                WHEN OTHERS THEN
                xxcu_common_log_rt.msglog ('INFO', 'Error in insert of customer '||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                END;
                FOR bjk IN 1 .. p_batch_order.v_order_head (hi).orderlines.count
                LOOP
                -- dbms_output.put_line(SIGN(p_batch_order.v_order_head (hi).orderlines(p).quantity));
                UPDATE oe_lines_iface_all
                SET payment_term           ='10 days'
                WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference
                AND org_id                 =p_batch_order.v_order_head (hi).org_id;
                COMMIT;
                END LOOP;
                END IF;
                xxcu_common_log_rt.msglog ('INFO', 'p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines.count '||p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines.count, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                /* start defect 4534 */
                /*     IF( p_batch_order.v_order_head ( hi ). lv_private_cust(cust_rec).lv_addresslines.count=1 ) THEN
                FOR cust_addr IN 1 .. p_batch_order.v_order_head ( hi ). lv_private_cust(cust_rec).lv_addresslines.count
                LOOP
                INSERT
                INTO oe_customer_info_iface_all
                (
                address1,
                address2,
                address3,
                --ADDRESS4,
                city,
                country,
                created_by,
                creation_date,
                customer_info_ref,
                customer_info_type_code,
                is_bill_to_address,
                is_ship_to_address,
                last_update_date,
                last_updated_by,
                parent_customer_ref,
                postal_code,
                state
                --location_number
                )
                VALUES
                (
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address1, -- address1
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address2, -- address2
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address3, -- address3
                --'NO 941031', -- address4
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).city,    -- city
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country, -- country
                g_user_id,                                                                                    -- created_by
                sysdate,                                                                                      -- creation_date
                NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number,xxdm_cust_acct_no_seq.currval)
                ||xxcu_oe_bill_ref.nextval, --||'_'||ln_k_count, -- customer_info_ref
                'ADDRESS',                  -- customer_info_type_code
                'Y',                        -- is_bill_to_address
                'Y',                        -- is_ship_to_address
                sysdate,                    -- last_update_date
                g_user_id,                  -- last_updated_by
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).customer_reference
                ||'-'
                ||xxcu_oe_cust_ref.currval,                                                                       --Defect 4452                    --'IL CUST ACT 06', -- parent_customer_ref
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).postal_code, -- postal_code
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country
                --'76567'-- state
                );
                UPDATE oe_headers_iface_all
                SET orig_bill_address_ref=NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number,xxdm_cust_acct_no_seq.currval)
                ||xxcu_oe_bill_ref.currval--||'_'||ln_k_count
                WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference
                AND org_id                 =p_batch_order.v_order_head (hi).org_id;
                COMMIT;
                END LOOP;
                ELSE
                /* end defect 4534 */
                /*   FOR cust_addr IN 1 .. p_batch_order.v_order_head ( hi ). lv_private_cust(cust_rec).lv_addresslines.count
                LOOP
                ln_k_count:=ln_k_count+1;
                BEGIN
                IF( ln_k_count                                                                                                                                                                                                                                                                                           <>p_batch_order.v_order_head(hi).lv_private_cust(cust_rec).lv_addresslines.count) THEN
                IF(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address1                                                                                                                                                                                                        = p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr+1).address1 AND NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address2,'X') = NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr+1).address2,'X') AND NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address3,'X') = NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr+1).address3,'X') AND p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).city = p_batch_order.v_order_head (hi).lv_private_cust(cust_rec)
                .lv_addresslines(cust_addr+1).city AND p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).postal_code = p_batch_order.v_order_head (hi).lv_private_cust(cust_rec)
                .lv_addresslines(cust_addr                                                                                                                                                          +1) .postal_code AND p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country = p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr+1).country ) THEN
                INSERT
                INTO oe_customer_info_iface_all
                (
                address1,
                address2,
                address3,
                --ADDRESS4,
                city,
                country,
                created_by,
                creation_date,
                customer_info_ref,
                customer_info_type_code,
                is_bill_to_address,
                is_ship_to_address,
                last_update_date,
                last_updated_by,
                parent_customer_ref,
                postal_code,
                state
                --location_number
                )
                VALUES
                (
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address1, -- address1
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address2, -- address2
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address3, -- address3
                --'NO 941031', -- address4
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).city,    -- city
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country, -- country
                g_user_id,                                                                                    -- created_by
                sysdate,                                                                                      -- creation_date
                NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number,xxdm_cust_acct_no_seq.currval)
                ||xxcu_oe_bill_ref.nextval, --||'_'||ln_k_count, -- customer_info_ref
                'ADDRESS',                  -- customer_info_type_code
                'Y',                        -- is_bill_to_address
                'Y',                        -- is_ship_to_address
                sysdate,                    -- last_update_date
                g_user_id,                  -- last_updated_by
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).customer_reference
                ||'-'
                ||xxcu_oe_cust_ref.currval,                                                                       --Defect 4452                    --'IL CUST ACT 06', -- parent_customer_ref
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).postal_code, -- postal_code
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country
                --'76567'-- state
                );
                UPDATE oe_headers_iface_all
                SET orig_bill_address_ref=NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number,xxdm_cust_acct_no_seq.currval)
                ||xxcu_oe_bill_ref.currval--||'_'||ln_k_count
                WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference
                AND org_id                 =p_batch_order.v_order_head (hi).org_id;
                COMMIT;
                lv_is_bill:='TRUE';
                ELSE
                INSERT
                INTO oe_customer_info_iface_all
                (
                address1,
                address2,
                address3,
                --ADDRESS4,
                city,
                country,
                created_by,
                creation_date,
                customer_info_ref,
                customer_info_type_code,
                is_bill_to_address,
                is_ship_to_address,
                last_update_date,
                last_updated_by,
                parent_customer_ref,
                postal_code,
                state
                --,
                --location_number
                )
                VALUES
                (
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address1, -- address1
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address2, -- address2
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address3, -- address3
                --'NO 941031', -- address4
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).city,    -- city
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country, -- country
                g_user_id,                                                                                    -- created_by
                sysdate,                                                                                      -- creation_date
                NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number,xxdm_cust_acct_no_seq.currval)
                ||xxcu_oe_bill_ref.nextval,                                                                                                       --||'_'||ln_k_count+1, -- customer_info_ref
                'ADDRESS',                                                                                                                        -- customer_info_type_code
                DECODE(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).addr_type,'BillingAddress','Y','N'),  -- is_bill_to_address
                DECODE(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).addr_type,'ShippingAddress','Y','N'), -- is_ship_to_address
                sysdate,                                                                                                                          -- last_update_date
                g_user_id,                                                                                                                        -- last_updated_by
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).customer_reference
                ||'-'
                ||xxcu_oe_cust_ref.currval,                                                                       --Defect 4452                                                    --'IL CUST ACT 06', -- parent_customer_ref
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).postal_code, -- postal_code
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country
                --'76567'-- state
                );
                END IF;
                ELSE
                IF(lv_is_bill<>'TRUE') THEN
                INSERT
                INTO oe_customer_info_iface_all
                (
                address1,
                address2,
                address3,
                --ADDRESS4,
                city,
                country,
                created_by,
                creation_date,
                customer_info_ref,
                customer_info_type_code,
                is_bill_to_address,
                is_ship_to_address,
                last_update_date,
                last_updated_by,
                parent_customer_ref,
                postal_code,
                state
                --,
                --location_number
                )
                VALUES
                (
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address1, -- address1
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address2, -- address2
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).address3, -- address3
                --'NO 941031', -- address4
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).city,    -- city
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country, -- country
                g_user_id,                                                                                    -- created_by
                sysdate,                                                                                      -- creation_date
                NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number,xxdm_cust_acct_no_seq.currval)
                ||xxcu_oe_bill_ref.nextval,
                'ADDRESS',                                                                                                                        -- customer_info_type_code
                DECODE(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).addr_type,'BillingAddress','Y','N'),  -- is_bill_to_address
                DECODE(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).addr_type,'ShippingAddress','Y','N'), -- is_ship_to_address
                sysdate,                                                                                                                          -- last_update_date
                g_user_id,                                                                                                                        -- last_updated_by
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).customer_reference
                ||'-'
                ||xxcu_oe_cust_ref.currval,                                                                       --'IL CUST ACT 06', -- parent_customer_ref
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).postal_code, -- postal_code
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).country
                --'76567'-- state
                );
                END IF;
                END IF;
                IF(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).lv_addresslines(cust_addr).addr_type='BillingAddress') THEN
                UPDATE oe_headers_iface_all
                SET orig_bill_address_ref=NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number,xxdm_cust_acct_no_seq.currval)
                ||xxcu_oe_bill_ref.currval
                WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference
                AND org_id                 =p_batch_order.v_order_head (hi).org_id;
                COMMIT;
                ELSE
                UPDATE oe_headers_iface_all
                SET orig_ship_address_ref=NVL(p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).private_cust_number,xxdm_cust_acct_no_seq.currval)
                ||xxcu_oe_bill_ref.currval
                WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference
                AND org_id                 =p_batch_order.v_order_head (hi).org_id;
                COMMIT;
                END IF;
                --end if;
                COMMIT;
                EXCEPTION
                WHEN OTHERS THEN
                xxcu_common_log_rt.msglog ('INFO', 'Error in insert of address '||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                END;
                END LOOP;
                */
                /*
                ln_k_count:=0;
                lv_is_bill:='FALSE';
                */
                --END IF;
                /*  BEGIN
                SELECT COUNT(*)
                INTO lv_cust_count
                FROM xxcu_oe_digi_id_data_t
                WHERE order_reference=p_batch_order.v_order_head (hi).order_reference
                AND org_id           =p_batch_order.v_order_head (hi).org_id
                AND process_flag    IS NULL;
                EXCEPTION
                WHEN OTHERS THEN
                lv_cust_count:=0;
                END;
                IF(lv_cust_count=0) THEN
                BEGIN
                INSERT
                INTO xxcu_oe_digi_id_data_t
                (
                oe_digi_id,
                order_reference ,
                org_id,
                digi_id,
                process_flag,
                creation_date ,
                created_by ,
                last_update_date ,
                last_updated_by
                )
                VALUES
                (
                xxcu_oe_digi_id_s.nextval,
                p_batch_order.v_order_head (hi).order_reference,
                p_batch_order.v_order_head (hi).org_id,
                p_batch_order.v_order_head (hi).lv_private_cust(cust_rec).digi_id,
                NULL,
                sysdate,
                g_user_id,
                sysdate,
                g_user_id
                );
                COMMIT;
                EXCEPTION
                WHEN OTHERS THEN
                xxcu_common_log_rt.msglog ('ERR', 'Error while inserting into xxcu_oe_digi_id_data_t '||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                END;
                END IF;
                */
              END LOOP;
            END IF;
          END LOOP;
          /* end artf5962829 */
          /* end CR 4609 */
          /* lines insertion loop starts */
          FOR li IN 1 .. p_batch_order.v_order_head ( hi ) .orderlines.count
          LOOP
            /* start wave 2 modification artf5860509 */
            BEGIN
              SELECT COUNT(tax_rate_code)
              INTO ln_tax
              FROM zx_rates_b
              WHERE tax_rate_code=p_batch_order.v_order_head (hi).orderlines (li).tax_code
              AND effective_to  IS NULL
              AND active_flag    ='Y';
            EXCEPTION
            WHEN OTHERS THEN
              ln_tax:=0;
            END;
            IF(ln_tax=0) THEN
              BEGIN
                SELECT tag
                INTO lv_tax
                FROM fnd_lookup_values_vl
                WHERE lookup_type    ='PB_TAX_CODE_MAPPING'
                AND lookup_code      =p_batch_order.v_order_head (hi).orderlines (li).tax_code
                AND end_date_active IS NULL
                AND enabled_flag     ='Y';
              EXCEPTION
              WHEN OTHERS THEN
                /*  xxcu_common_log_rt.msglog ('ERR', 'Error deriving tax code'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                p_status_code  := 2;
                p_error_message:='Error deriving tax code'||sqlerrm||dbms_utility.format_error_backtrace;
                */
                lv_tax:=NULL;
              END;
            ELSE
              lv_tax:=p_batch_order.v_order_head (hi).orderlines (li).tax_code;
            END IF;
            /* end wave 2 modification */
            --   lv_tax:=p_batch_order.v_order_head (hi).orderlines (li).tax_code;
            -- msgtext := 'Tax Code in main: ' || lv_tax ;
            g_intf_inv_spec_seq := NULL; -- Added by Divyansh for Incident#E2-IM013492120
            --   xxcu_common_log_rt.msglog ('ERR', 'Tax Code in main: ' || p_batch_order.v_order_head (hi).orderlines.COUNT, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => SYSDATE, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
            BEGIN
              dbms_output.put_line('calling lines');
              g_program_loc := 'getline_id_source_exists';
              --IF NOT getline_id_source_exists (p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource, 'LM') THEN
              g_program_loc := 'createOrderlineAggregate';
              --Creates orderlines
              v_status_function := g_code_ok;
              --    v_orderline_count := v_orderline_count + createorderline (p_batch_order.v_order_head (hi).orderlines, v_header_id, v_status_function);
              /* version  1.17 Defect # 797 */
              BEGIN
                SELECT gso.currency_code
                INTO lv_curr_code
                FROM hr_operating_units hou,
                  gl_sets_of_books gso
                WHERE gso.set_of_books_id=hou.set_of_books_id
                AND hou.organization_id  =p_batch_order.v_order_head (hi).org_id;
              EXCEPTION
              WHEN OTHERS THEN
                lv_curr_code:=NULL;
              END;
              IF (upper(p_batch_order.v_order_head (hi).order_type)='RETURN' AND lv_curr_code<>NVL(get_currencycode(getcustomer_id (p_batch_order.v_order_head (hi).customer_number),p_batch_order.v_order_head (hi).org_id),p_batch_order.v_order_head (hi).currency_code) AND p_batch_order.v_order_head (hi).payment_provider_trans_id IS NULL) THEN
                BEGIN
                  SELECT pricing_date
                  INTO lv_price_date
                  FROM oe_order_headers_all
                  WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).return_order_reference
                  AND org_id                 = p_batch_order.v_order_head (hi).org_id; --added org_id defect#2848
                  /* start defect 3446 */
                EXCEPTION
                WHEN OTHERS THEN
                  lv_price_date:=NULL;
                END;
                /* end defect 3446 */
              ELSE
                lv_price_date:=p_batch_order.v_order_head (hi).pricing_date;
              END IF;
              /* call line insertion procedure */
              /*Version added New new parameter of header  Kavita 1.30 CR#2499*/
              SELECT xxcu_intf_spec_inv_s.nextval
              INTO g_intf_inv_spec_seq
              FROM dual; ---- Added by Divyansh for Incident#E2-IM013492120
              /* start wave 2 modification */
              IF(p_batch_order.v_order_head (hi).order_source='NO002_RB' AND upper(p_batch_order.v_order_head (hi).order_type)='RETURN') THEN
                create_rettbetalt_lines(p_batch_order.v_order_head (hi),p_batch_order.v_order_head (hi).orderlines (li),lv_price_date,p_status_code,p_error_message);
              ELSE
                createorderline_interface (p_batch_order.v_order_head (hi),p_batch_order.v_order_head (hi).orderlines (li), v_header_id, p_batch_order.v_order_head (hi).order_reference,                                              -- v_orig_sys_document_ref, --changed on Snehal for 8035
                p_batch_order.v_order_head (hi).currency_code,p_batch_order.v_order_head (hi).sales_agmnt_no,getcustomer_id (p_batch_order.v_order_head (hi).customer_number),p_status_code, v_num_orderlines, v_upd_orig_sys_line_ref --1161
                ,p_batch_order.v_order_head (hi).org_id,lv_price_date,p_batch_order.v_order_head (hi).order_type,p_error_message);
              END IF;
              --  COMMIT;
              ----Start for defect#2959
              -- dbms_lock.sleep(5);
              IF NVL(p_batch_order.v_order_head (hi).orderlines(li).order_line_spec_hdr_cnt,0)>0
                /* start CR 2811 */
                /* start CR 4089 */
                --  AND upper(p_batch_order.v_order_head (hi).order_type)<>'RETURN'
                /* end */
                /* end */
                THEN
                BEGIN
                  /* start defect 4310 */
                  IF( p_batch_order.v_order_head (hi).orderlines (li).date_from            IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).date_to IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).description IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).order_date IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).uom IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).waybill_number IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).sender_name IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).receiver_name IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ship_from IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).spec_ship_to IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).number_of_packages IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).pallet IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).volume IS NOT NULL OR
                    p_batch_order.v_order_head (hi).orderlines (li).weight                 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).freight_calc_weight IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).responsible_person IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).pp_price IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).cargo_type IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).container_reference IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).pick_up_point IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).awb IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).mawb IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).hawb IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).vessel IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).incoterm IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).sender_reference IS NOT NULL OR
                    p_batch_order.v_order_head (hi).orderlines (li).receiver_reference     IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).agent_reference IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).load_carrier IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).transport_method IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).delivery_point IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).our_reference IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).cargo_id_number IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).position_number IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).load_meter IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).cargo_label IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).charteque_number IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).delivered_time IS NOT NULL OR p_batch_order.v_order_head (hi)
                    .orderlines (li).received_time                                         IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ship_from_address1 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ship_from_address2 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ship_from_address3 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ship_from_country IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ship_from_postal_code IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ship_to_address1 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ship_to_address2 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ship_to_address3 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ship_to_postal_code IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ship_to_country IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).volume_uom IS NOT NULL OR
                    p_batch_order.v_order_head (hi).orderlines (li).weight_uom             IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).freight_calc_weight_uom IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).currency IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).currency_amount IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).exchange_rate IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).exchange_date IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).pick_up_address1 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).pick_up_address2 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).pick_up_address3 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).pick_up_postal_code IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).pick_up_city IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).pick_up_country IS NOT NULL OR p_batch_order.v_order_head
                    (hi).orderlines (li).delivery_address1                                 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).delivery_address2 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).delivery_address3 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).delivery_postal_code IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).delivery_city IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).delivery_country IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).consignment_type_code IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).consignment_type_text IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).transport_method_text IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).incoterm_text IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ship_to_fiscal_code IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ship_from_fiscal_code IS NOT
                    NULL OR to_clob( p_batch_order.v_order_head (hi).orderlines (li).note) IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).loading_point IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).unloading_point IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ordered_by IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ordered_by_addr1 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ordered_by_addr2 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ordered_by_addr3 IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ordered_by_postal IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ordered_by_city IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ordered_by_country IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ordered_by_contact IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ordered_by_con_email IS NOT NULL OR
                    p_batch_order.v_order_head (hi).orderlines (li).bill_to_con_person     IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).bill_to_con_email IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).deviation IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).franking_type IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).price_table IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).speed IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).destination IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).weight_spec IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).unit_price_inc_vat IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).total_inc_vat IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).paid_amount IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).agreement_sum IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li)
                    .shipment_id_number                                                    IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).unit_price_excl_vat IS NOT NULL ) THEN
                    /* end defect 4310 */
                    INSERT
                    INTO xxcu_interface_specifications VALUES
                      (
                        -- XXCU.XXCU_INTF_INVOICE_SPEC_S.nextval, --commented 1.30 Kavita
                        'N',
                        p_batch_order.v_order_head (hi).order_source,
                        p_batch_order.v_order_head (hi).order_reference,
                        p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource, -- lv_line_number,
                        p_batch_order.v_order_head (hi).orderlines (li).date_from,
                        p_batch_order.v_order_head (hi).orderlines (li).date_to,
                        p_batch_order.v_order_head (hi).orderlines (li).description,
                        p_batch_order.v_order_head (hi).orderlines (li).order_date,
                        p_batch_order.v_order_head (hi).orderlines (li).uom,
                        /* version 1.27 CR 2468 */
                        -- p_batch_order.v_order_head (rec_head).orderlines (rec_line).PER_TIME_UNIT,
                        -- p_batch_order.v_order_head (rec_head).orderlines (rec_line).UNIT_PRICE,
                        --p_batch_order.v_order_head (rec_head).orderlines (rec_line).AMOUNT,
                        -----------------------------------------------------
                        p_batch_order.v_order_head (hi).orderlines (li).waybill_number,
                        p_batch_order.v_order_head (hi).orderlines (li).sender_name,
                        p_batch_order.v_order_head (hi).orderlines (li).receiver_name,
                        p_batch_order.v_order_head (hi).orderlines (li).ship_from,
                        p_batch_order.v_order_head (hi).orderlines (li).spec_ship_to,
                        p_batch_order.v_order_head (hi).orderlines (li).number_of_packages,
                        p_batch_order.v_order_head (hi).orderlines (li).pallet,
                        p_batch_order.v_order_head (hi).orderlines (li).volume,
                        p_batch_order.v_order_head (hi).orderlines (li).weight,
                        p_batch_order.v_order_head (hi).orderlines (li).freight_calc_weight,
                        p_batch_order.v_order_head (hi).orderlines (li).responsible_person,
                        p_batch_order.v_order_head (hi).orderlines (li).pp_price,
                        p_batch_order.v_order_head (hi).orderlines (li).cargo_type,
                        sysdate,
                        g_user_id,
                        g_user_id,
                        sysdate,
                        /* version 1.24 CR 1929 */
                        p_batch_order.v_order_head (hi).orderlines (li).container_reference,
                        p_batch_order.v_order_head (hi).orderlines (li).pick_up_point ,
                        p_batch_order.v_order_head (hi).orderlines (li).awb ,
                        p_batch_order.v_order_head (hi).orderlines (li).mawb ,
                        p_batch_order.v_order_head (hi).orderlines (li).hawb ,
                        p_batch_order.v_order_head (hi).orderlines (li).vessel ,
                        p_batch_order.v_order_head (hi).orderlines (li).incoterm ,
                        p_batch_order.v_order_head (hi).orderlines (li).sender_reference ,
                        p_batch_order.v_order_head (hi).orderlines (li).receiver_reference,
                        p_batch_order.v_order_head (hi).orderlines (li).agent_reference ,
                        p_batch_order.v_order_head (hi).orderlines (li).load_carrier ,
                        p_batch_order.v_order_head (hi).orderlines (li).transport_method ,
                        p_batch_order.v_order_head (hi).orderlines (li).delivery_point ,
                        p_batch_order.v_order_head (hi).orderlines (li).our_reference ,
                        p_batch_order.v_order_head (hi).orderlines (li).cargo_id_number ,
                        p_batch_order.v_order_head (hi).orderlines (li).position_number ,
                        p_batch_order.v_order_head (hi).orderlines (li).load_meter ,
                        p_batch_order.v_order_head (hi).orderlines (li).cargo_label,
                        p_batch_order.v_order_head (hi).orderlines (li).charteque_number ,
                        p_batch_order.v_order_head (hi).orderlines (li).delivered_time ,
                        p_batch_order.v_order_head (hi).orderlines (li).received_time ,
                        p_batch_order.v_order_head (hi).orderlines (li).ship_from_address1 ,
                        p_batch_order.v_order_head (hi).orderlines (li).ship_from_address2 ,
                        p_batch_order.v_order_head (hi).orderlines (li).ship_from_address3,
                        p_batch_order.v_order_head (hi).orderlines (li).ship_from_country ,
                        p_batch_order.v_order_head (hi).orderlines (li).ship_from_postal_code ,
                        p_batch_order.v_order_head (hi).orderlines (li).ship_to_address1 ,
                        p_batch_order.v_order_head (hi).orderlines (li).ship_to_address2,
                        p_batch_order.v_order_head (hi).orderlines (li).ship_to_address3 ,
                        p_batch_order.v_order_head (hi).orderlines (li).ship_to_postal_code ,
                        p_batch_order.v_order_head (hi).orderlines (li).ship_to_country,
                        -----------------------------------------------------------------------------------------------------------------------------------
                        /* version 1.27 CR 2468 */
                        p_batch_order.v_order_head (hi).orderlines (li).volume_uom,
                        p_batch_order.v_order_head (hi).orderlines (li).weight_uom,
                        p_batch_order.v_order_head (hi).orderlines (li).freight_calc_weight_uom,
                        /* Start 1.30 Kavita CR 2499 */
                        /* Start Defect 3218 */
                        NVL(p_batch_order.v_order_head (hi).printed_order_number,g_order_number),
                        /* end defect 3218 */
                        -- g_order_number
                        /* END 1.30 Kavita CR 2499 */
                        /* start 1.38 CR 3006 */
                        p_batch_order.v_order_head (hi).orderlines (li).currency,
                        p_batch_order.v_order_head (hi).orderlines (li).currency_amount,
                        p_batch_order.v_order_head (hi).orderlines (li).exchange_rate,
                        p_batch_order.v_order_head (hi).orderlines (li).exchange_date,
                        /* end 1.38 CR 3006 */
                        /* start CR 3118 */
                        p_batch_order.v_order_head (hi).orderlines (li).pick_up_address1,
                        p_batch_order.v_order_head (hi).orderlines (li).pick_up_address2,
                        p_batch_order.v_order_head (hi).orderlines (li).pick_up_address3,
                        p_batch_order.v_order_head (hi).orderlines (li).pick_up_postal_code ,
                        p_batch_order.v_order_head (hi).orderlines (li).pick_up_city ,
                        p_batch_order.v_order_head (hi).orderlines (li).pick_up_country ,
                        p_batch_order.v_order_head (hi).orderlines (li).delivery_address1 ,
                        p_batch_order.v_order_head (hi).orderlines (li).delivery_address2 ,
                        p_batch_order.v_order_head (hi).orderlines (li).delivery_address3 ,
                        p_batch_order.v_order_head (hi).orderlines (li).delivery_postal_code,
                        p_batch_order.v_order_head (hi).orderlines (li).delivery_city ,
                        p_batch_order.v_order_head (hi).orderlines (li).delivery_country ,
                        p_batch_order.v_order_head (hi).orderlines (li).consignment_type_code ,
                        p_batch_order.v_order_head (hi).orderlines (li).consignment_type_text,
                        p_batch_order.v_order_head (hi).orderlines (li).transport_method_text,
                        p_batch_order.v_order_head (hi).orderlines (li).incoterm_text ,
                        p_batch_order.v_order_head (hi).orderlines (li).ship_to_fiscal_code ,
                        p_batch_order.v_order_head (hi).orderlines (li).ship_from_fiscal_code,
                        to_clob( p_batch_order.v_order_head (hi).orderlines (li).note),
                        /* start CR 3374 */
                        p_batch_order.v_order_head (hi).orderlines (li).loading_point ,
                        p_batch_order.v_order_head (hi).orderlines (li).unloading_point,
                        /* end CR 3374 */
                        /* end CR 3118 */
                        g_intf_inv_spec_seq, ---- Added by Divyansh for Incident#E2-IM013492120
                        /* start wave 2 modification */
                        p_batch_order.v_order_head (hi).orderlines (li).ordered_by,
                        p_batch_order.v_order_head (hi).orderlines (li).ordered_by_addr1,
                        p_batch_order.v_order_head (hi).orderlines (li).ordered_by_addr2,
                        p_batch_order.v_order_head (hi).orderlines (li).ordered_by_addr3,
                        p_batch_order.v_order_head (hi).orderlines (li).ordered_by_postal,
                        p_batch_order.v_order_head (hi).orderlines (li).ordered_by_city,
                        p_batch_order.v_order_head (hi).orderlines (li).ordered_by_country,
                        p_batch_order.v_order_head (hi).orderlines (li).ordered_by_contact,
                        p_batch_order.v_order_head (hi).orderlines (li).ordered_by_con_email,
                        p_batch_order.v_order_head (hi).orderlines (li).bill_to_con_person,
                        p_batch_order.v_order_head (hi).orderlines (li).bill_to_con_email,
                        p_batch_order.v_order_head (hi).orderlines (li).deviation,
                        p_batch_order.v_order_head (hi).orderlines (li).franking_type,
                        p_batch_order.v_order_head (hi).orderlines (li).price_table,
                        p_batch_order.v_order_head (hi).orderlines (li).speed,
                        p_batch_order.v_order_head (hi).orderlines (li).destination,
                        p_batch_order.v_order_head (hi).orderlines (li).weight_spec,
                        p_batch_order.v_order_head (hi).orderlines (li).unit_price_inc_vat,
                        p_batch_order.v_order_head (hi).orderlines (li).total_inc_vat,
                        p_batch_order.v_order_head (hi).orderlines (li).paid_amount,
                        p_batch_order.v_order_head (hi).orderlines (li).agreement_sum,
                        p_batch_order.v_order_head (hi).orderlines (li).shipment_id_number,
                        p_batch_order.v_order_head (hi).orderlines (li).unit_price_excl_vat,
                        /* end wave 2 modification */
                        /* start CR 4475 */
                        p_batch_order.v_order_head (hi).orderlines (li).freight_payer
                        /* end CR 4475 */
                        ------------------------------------------------------------------------------------------------------------------------
                      );
                    COMMIT;
                  END IF;
                  /* start CR 3118 */
                  FOR rec_spec_ref IN 1.. p_batch_order.v_order_head
                  (
                    hi
                  )
                  .orderlines
                  (
                    li
                  )
                  .ref_spec_line.count-- p_batch_order.v_order_head (rec_head).InvSpecURL.count
                  LOOP
                    xxcu_common_log_rt.msglog
                    (
                      msgtype => xxcu_intf_sys.gc_rlevel_info, msgtext => 'Entered in ref spec for loop', msgcode => 1117, usermsg => '1', -- not sure what this is, maps to user_id in log table
                      msgsrc => 'XXCU_INTERFACE_SPEC_REF' , msgjobid => 10054
                    )
                    ;
                    --xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Excpetion occured before inserting in SPEC_URL TBL <' || v_batch_seq_no || SQLERRM );
                    xxcu_common_log_rt.msglog ( msgtype => xxcu_intf_sys.gc_rlevel_info, msgtext => 'free_reference_code'||p_batch_order.v_order_head (hi).orderlines(li).ref_spec_line(rec_spec_ref).free_reference_code, msgcode => 1117, usermsg => '1', -- not sure what this is, maps to user_id in log table
                    msgsrc => 'XXCU_INTERFACE_SPEC_REF' , msgjobid => 10054);
                    IF( p_batch_order.v_order_head (hi).orderlines(li).ref_spec_line(rec_spec_ref).free_reference_code IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines(li).ref_spec_line(rec_spec_ref).free_reference_text IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines(li).ref_spec_line(rec_spec_ref).free_reference_content IS NOT NULL ) THEN
                      INSERT
                      INTO xxcu.xxcu_interface_spec_ref VALUES
                        (
                          /* start defect 3218 */
                          --g_ordeR_number,
                          NVL(p_batch_order.v_order_head (hi).printed_order_number,g_order_number),
                          /* end defect 3218 */
                          xxcu_interface_spec_ref_s.nextval,
                          p_batch_order.v_order_head (hi).orderlines(li).ref_spec_line(rec_spec_ref).free_reference_code,
                          p_batch_order.v_order_head (hi).orderlines(li).ref_spec_line(rec_spec_ref).free_reference_text,
                          p_batch_order.v_order_head (hi).orderlines(li).ref_spec_line(rec_spec_ref).free_reference_content,
                          NVL(p_batch_order.v_order_head (hi).orderlines(li).ref_spec_line(rec_spec_ref).print_on_invoice_flag,'Yes'),
                          sysdate,
                          g_user_id,
                          sysdate,
                          g_user_id,
                          /* start CR 3487 */
                          p_batch_order.v_order_head (hi).order_reference,
                          p_batch_order.v_order_head (hi).order_source,
                          p_batch_order.v_order_head (hi).orderlines(li).orderlineidsource,
                          /* end CR 3487 */
                          g_intf_inv_spec_seq ---- Added by Divyansh for Incident#E2-IM013492120
                        );
                      COMMIT;
                    END IF;
                  END LOOP;
                  /* end CR 3118 */
                EXCEPTION
                WHEN OTHERS THEN
                  --xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the xxcu_invoice_spec_p > ::Contact your system administrator:: ' || SQLERRM );
                  xxcu_common_log_rt.msglog ('ERR', 'Error Inserted in Spec Header'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  p_status_code  := 2;
                  p_error_message:='Error in invoice spec procedure'||sqlerrm||dbms_utility.format_error_backtrace;
                END;
                -- COMMIT;
                xxcu_common_log_rt.msglog ('INFO', 'Inserted in Spec Header', 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                IF(p_batch_order.v_order_head (hi).orderlines(li).speclines.count=0) THEN
                  /**ln_spec_count                                                             := p_batch_order.v_order_head (hi).orderlines.COUNT;**/
                  ln_spec_count :=0;
                  --  insert_invoice_spec_p(p_batch_order.v_order_head (rec_head),p_batch_order.v_order_head (rec_head).orderlines (rec_line),NULL,p_batch_order.v_order_head (rec_head).Order_Reference,p_batch_order.v_order_head (rec_head).orderlines (rec_line).orderlineidsource,g_order_number,p_status_code,p_error_message);
                ELSE
                  ln_spec_count:=p_batch_order.v_order_head (hi).orderlines(li).speclines.count;
                END IF;
                IF NVL( ln_spec_count ,0) >0 THEN
                  /* start CR 2811 */
                  /* start CR 4089 */
                  --AND upper(p_batch_order.v_order_head (hi).order_type)<>'RETURN' THEN
                  /* end */
                  /* end */
                  FOR rec_spec IN 1.. ln_spec_count
                  LOOP
                    --  dbms_output.put_line('count of spec:'||p_batch_order.v_order_head (rec_head).Orderlines(rec_line).speclines.count);
                    --xxcu_common_log_rt.msglog ('INFO', 'Inside Invoice spec loop', 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => SYSDATE, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                    /** IF nvl(p_batch_order.v_order_head (hi).orderlines(li).order_line_spec_hdr_cnt,0)>0 then
                    IF(p_batch_order.v_order_head (hi).orderlines(li).speclines.count=0) THEN
                    xxcu_common_log_rt.msglog ('INFO', 'Inside Invoice spec loop for speclines.count=0', 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => SYSDATE, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                    insert_invoice_spec_p(p_batch_order.v_order_head (hi),p_batch_order.v_order_head (hi).orderlines (li),NULL,p_batch_order.v_order_head (hi).Order_Reference,p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource,g_order_number,p_status_code,p_error_message);
                    ELSE**/
                    xxcu_common_log_rt.msglog
                    (
                      'INFO', 'Inside Invoice spec loop for speclines.count>0', 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL )
                    )
                    ;
                    insert_invoice_spec_p(p_batch_order.v_order_head (hi),p_batch_order.v_order_head (hi).orderlines (li),p_batch_order.v_order_head (hi).orderlines(li).speclines(rec_spec),p_batch_order.v_order_head (hi).order_reference,p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource,p_batch_order.v_order_head (hi).printed_order_number,p_status_code,p_error_message);
                    COMMIT;
                    /** END IF;**/
                    --  insert_invoice_spec_p(p_batch_order.v_order_head (rec_head),p_batch_order.v_order_head (rec_head).orderlines (rec_line),null,p_batch_order.v_order_head (rec_head).Order_Reference,p_status_code,p_error_message);
                  END LOOP;
                END IF;
              END IF;
              ---End Defect#2959
              /* start wave 2 modification */
              BEGIN
                FOR rec_spec_disc IN 1.. p_batch_order.v_order_head
                (
                  hi
                )
                .orderlines
                (
                  li
                )
                .inv_spec_disc.count
                LOOP
                  xxcu_common_log_rt.msglog
                  (
                    msgtype => xxcu_intf_sys.gc_rlevel_info, msgtext => 'Entered in rec_spec_disc for loop', msgcode => 1117, usermsg => '1', msgsrc => 'XXCU_INTF_DISCOUNT_SPEC' , msgjobid => 10054
                  )
                  ;
                  IF( p_batch_order.v_order_head (hi).orderlines(li).inv_spec_disc(rec_spec_disc).descriptionno IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines(li).inv_spec_disc(rec_spec_disc).descriptionus IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines(li).inv_spec_disc(rec_spec_disc).percentage IS NOT NULL)--defect 4259
                    THEN
                    INSERT
                    INTO xxcu_intf_discount_spec VALUES
                      (
                        g_order_number,
                        p_batch_order.v_order_head (hi).order_reference,
                        p_batch_order.v_order_head (hi).order_source,
                        p_batch_order.v_order_head (hi).orderlines(li).orderlineidsource,
                        p_batch_order.v_order_head (hi).orderlines(li).inv_spec_disc(rec_spec_disc).descriptionno,
                        p_batch_order.v_order_head (hi).orderlines(li).inv_spec_disc(rec_spec_disc).descriptionus,
                        p_batch_order.v_order_head (hi).orderlines(li).inv_spec_disc(rec_spec_disc).percentage,
                        sysdate,
                        g_user_id,
                        g_user_id,
                        sysdate,
                        g_intf_inv_spec_seq
                      );
                    COMMIT;
                  END IF;
                END LOOP;
              EXCEPTION
              WHEN OTHERS THEN
                --xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the xxcu_invoice_spec_p > ::Contact your system administrator:: ' || SQLERRM );
                xxcu_common_log_rt.msglog ('ERR', 'Error Inserted in Spec Discount Header'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                p_status_code  := 2;
                p_error_message:='Error in spec discount insert'||sqlerrm||dbms_utility.format_error_backtrace;
              END;
              /* end wave 2 modification */
              /* Version 1.9 Defect # 217 */
              --xxcu_common_log_rt.msglog ('INFO', 'p_batch_order.v_order_head (hi).lv_private_cust(1).customer_reference '||p_batch_order.v_order_head (hi).lv_private_cust(1).customer_reference, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
              IF(lv_orig_system IS NOT NULL) THEN
                FOR bjk IN 1 .. p_batch_order.v_order_head
                (
                  hi
                )
                .orderlines.count
                LOOP
                  -- dbms_output.put_line(SIGN(p_batch_order.v_order_head (hi).orderlines(p).quantity));
                  /* start defect 4783 */
                  BEGIN
                    SELECT flv.profile_option_value
                    INTO lv_term_name
                    FROM fnd_profile_options_vl fpov,
                      applsys.fnd_profile_option_values flv
                    WHERE fpov.profile_option_name='XXCU_DEFAULT_PAYMET_TERM'
                    AND flv.profile_option_id     =fpov.profile_option_id;
                  EXCEPTION
                  WHEN OTHERS THEN
                    xxcu_common_log_rt.msglog ('ERR', 'Error in profile option PB Default Payment Term for Private Customers'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  END;
                  BEGIN
                    SELECT term_id INTO ln_term FROM ra_terms WHERE name=lv_term_name;
                  EXCEPTION
                  WHEN OTHERS THEN
                    xxcu_common_log_rt.msglog ('ERR', 'Error while deriving paymet term for private customer'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
                  END;
                  /* end defect 4783 */
                  UPDATE oe_lines_iface_all
                  SET payment_term_id        =ln_term,--'10 days',--defect 4783
                    sold_to_org_id           =ln_sold_to_org
                  WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference
                  AND org_id                 =p_batch_order.v_order_head (hi).org_id;
                  COMMIT;
                END LOOP;
              END IF;
              IF (                                                                                                                                                                                     --p_batch_order.v_order_head (hi).lv_private_cust.count=0  --defect 4640
                p_batch_order.v_order_head (hi).lv_private_cust.count =0 OR (p_batch_order.v_order_head (hi).lv_private_cust.count =1 AND p_batch_order.v_order_head (hi).customer_number IS NOT NULL )--defect 4640
                OR ln_sold_to_org                                    IS NULL                                                                                                                           -- CR 5204
                AND p_batch_order.v_order_head (hi).order_source     <>'NO002_RB' AND upper(p_batch_order.v_order_head (hi).order_type)<>'RETURN' ) THEN
                BEGIN
                  lv_wrong_cust:='N';
                  /* start CR 5204 */
                  IF(ln_sold_to_org IS NULL) THEN
                    lv_wrong_cust   :='Y';
                  END IF;
                  /* end CR 5204 */
                  SELECT account_number
                  INTO lv_customer_num
                  FROM hz_cust_accounts
                  WHERE account_number=p_batch_order.v_order_head (hi).customer_number;
                EXCEPTION
                WHEN OTHERS THEN
                  lv_wrong_cust:='Y';
                  UPDATE oe_headers_iface_all
                  SET error_flag             ='Y'
                  WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;
                  COMMIT;
                  SELECT oe_msg_id_s.nextval INTO l_transaction_id FROM dual;
                  /* SELECT message_text
                  INTO lv_msg_text
                  FROM fnd_new_messages
                  WHERE message_name='XXCU_CUSTOMER_NUMBER_NULL'
                  AND language_code =USERENV('LANG');*/
                  INSERT
                  INTO oe_processing_msgs
                    (
                      transaction_id ,
                      request_id
                      --     ,message_text
                      ,
                      entity_code ,
                      entity_ref ,
                      entity_id ,
                      header_id ,
                      line_id ,
                      order_source_id ,
                      original_sys_document_ref ,
                      original_sys_document_line_ref ,
                      orig_sys_shipment_ref ,
                      change_sequence ,
                      source_document_type_id ,
                      source_document_id ,
                      source_document_line_id ,
                      attribute_code ,
                      creation_date ,
                      created_by ,
                      last_update_date ,
                      last_updated_by ,
                      last_update_login ,
                      program_application_id ,
                      program_id ,
                      program_update_date ,
                      process_activity ,
                      notification_flag ,
                      type ,
                      message_source_code ,
                      message_status_code ,
                      org_id
                    )
                    VALUES
                    (
                      l_transaction_id ,
                      NULL
                      --     ,l_msg_data
                      ,
                      'LINE' ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      g_order_source_id ,
                      p_batch_order.v_order_head (hi).order_reference ,
                      p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      sysdate ,
                      g_user_id ,
                      sysdate ,
                      g_user_id ,
                      fnd_global.login_id ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      'ERROR' ,
                      'C' ,
                      'OPEN' ,
                      p_batch_order.v_order_head (hi).org_id
                    );
                  BEGIN
                    INSERT
                    INTO oe_processing_msgs_tl
                      (
                        transaction_id ,
                        language ,
                        source_lang ,
                        message_text ,
                        created_by ,
                        creation_date ,
                        last_updated_by ,
                        last_update_date ,
                        last_update_login
                      )
                    SELECT l_transaction_id ,
                      l.language_code ,
                      'US' ,
                      (SELECT message_text
                      FROM fnd_new_messages
                      WHERE message_name='XXCU_CUSTOMER_NUMBER_NULL'
                      AND language_code ='US'
                      )--,'Tax Code Can not be null'
                      ,
                      g_user_id ,
                      sysdate ,
                      g_user_id ,
                      sysdate ,
                      fnd_global.login_id
                    FROM fnd_languages l
                    WHERE l.installed_flag IN ('I','B')
                    AND language_code       = 'US'
                    AND NOT EXISTS
                      (SELECT NULL
                      FROM oe_processing_msgs_tl t
                      WHERE t.transaction_id = l_transaction_id
                      AND t.language         = l.language_code
                      );
                    --start defect 2891
                    INSERT
                    INTO oe_processing_msgs_tl
                      (
                        transaction_id ,
                        language ,
                        source_lang ,
                        message_text ,
                        created_by ,
                        creation_date ,
                        last_updated_by ,
                        last_update_date ,
                        last_update_login
                      )
                    SELECT l_transaction_id ,
                      l.language_code ,
                      'N' ,
                      (SELECT message_text
                      FROM fnd_new_messages
                      WHERE message_name='XXCU_CUSTOMER_NUMBER_NULL'
                      AND language_code ='N'
                      )--,'Tax Code Can not be null'
                      ,
                      g_user_id ,
                      sysdate ,
                      g_user_id ,
                      sysdate ,
                      fnd_global.login_id
                    FROM fnd_languages l
                    WHERE l.installed_flag IN ('I','B')
                    AND language_code       = 'N'
                    AND NOT EXISTS
                      (SELECT NULL
                      FROM oe_processing_msgs_tl t
                      WHERE t.transaction_id = l_transaction_id
                      AND t.language         = l.language_code
                      );
                  END;
                  --end
                  COMMIT;
                END;
              END IF;
              -- END LOOP;
              /* version 1.23 CR# 1229 */
              BEGIN
                lv_wrong_tax     :='N';
                ln_order_type_id := NULL;
                IF(lv_tax        IS NULL) THEN
                  /**********************/
                  ---Start changes CR#2449
                  BEGIN
                    BEGIN
                      ln_order_type_id := get_transaction_type_id(p_batch_order.v_order_head (hi).order_source, p_batch_order.v_order_head (hi).order_type, p_batch_order.v_order_head (hi).org_id, p_status_code, p_error_message);
                    EXCEPTION
                    WHEN OTHERS THEN
                      xxcu_common_log_rt.msglog ('ERR', 'Failed to derive transaction type id 1 '||sqlerrm||dbms_utility.format_error_backtrace, 1117, '1', 'get_transaction_type_id', '-1' );
                    END;
                    BEGIN
                      SELECT tax_calculation_event_code
                      INTO lv_tax_calc_event_code
                      FROM oe_transaction_types_all
                      WHERE transaction_type_id =ln_order_type_id;
                    EXCEPTION
                    WHEN OTHERS THEN
                      ln_order_type_id := NULL;
                    END;
                    --
                    IF lv_tax_calc_event_code ='INVOICING' THEN -----End changes CR#2449
                      lv_wrong_tax           :='Y';
                      UPDATE oe_headers_iface_all
                      SET error_flag             ='Y'
                      WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;
                      UPDATE oe_lines_iface_all
                      SET error_flag         ='Y'
                      WHERE orig_sys_line_ref=v_upd_orig_sys_line_ref;
                      UPDATE oe_price_adjs_iface_all
                      SET error_flag           ='Y'
                      WHERE orig_sys_line_ref  =v_upd_orig_sys_line_ref
                      AND orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;
                      COMMIT;
                      -------------------------------------------------------------------
                      --  OE_MSG_PUB               BEGIN
                      SELECT oe_msg_id_s.nextval
                      INTO l_transaction_id
                      FROM dual;
                      /* SELECT message_text
                      INTO lv_msg_text
                      FROM fnd_new_messages
                      WHERE message_name='OE_VAL_TAX_CODE_REQD'
                      AND language_code =USERENV('LANG');*/
                      --
                      INSERT
                      INTO oe_processing_msgs
                        (
                          transaction_id ,
                          request_id
                          --     ,message_text
                          ,
                          entity_code ,
                          entity_ref ,
                          entity_id ,
                          header_id ,
                          line_id ,
                          order_source_id ,
                          original_sys_document_ref ,
                          original_sys_document_line_ref ,
                          orig_sys_shipment_ref ,
                          change_sequence ,
                          source_document_type_id ,
                          source_document_id ,
                          source_document_line_id ,
                          attribute_code ,
                          creation_date ,
                          created_by ,
                          last_update_date ,
                          last_updated_by ,
                          last_update_login ,
                          program_application_id ,
                          program_id ,
                          program_update_date ,
                          process_activity ,
                          notification_flag ,
                          type ,
                          message_source_code ,
                          message_status_code ,
                          org_id
                        )
                        VALUES
                        (
                          l_transaction_id ,
                          NULL
                          --     ,l_msg_data
                          ,
                          'LINE' ,
                          NULL ,
                          NULL ,
                          NULL ,
                          NULL ,
                          g_order_source_id ,
                          p_batch_order.v_order_head (hi).order_reference ,
                          p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource ,
                          NULL ,
                          NULL ,
                          NULL ,
                          NULL ,
                          NULL ,
                          NULL ,
                          sysdate ,
                          g_user_id ,
                          sysdate ,
                          g_user_id ,
                          fnd_global.login_id ,
                          NULL ,
                          NULL ,
                          NULL ,
                          NULL ,
                          NULL ,
                          'ERROR' ,
                          'C' ,
                          'OPEN' ,
                          p_batch_order.v_order_head (hi).org_id
                        );
                      --
                      BEGIN
                        INSERT
                        INTO oe_processing_msgs_tl
                          (
                            transaction_id ,
                            language ,
                            source_lang ,
                            message_text ,
                            created_by ,
                            creation_date ,
                            last_updated_by ,
                            last_update_date ,
                            last_update_login
                          )
                        SELECT l_transaction_id ,
                          l.language_code ,
                          'US' ,
                          (SELECT message_text
                          FROM fnd_new_messages
                          WHERE message_name='OE_VAL_TAX_CODE_REQD'
                          AND language_code ='US'
                          ) ,
                          g_user_id ,
                          sysdate ,
                          g_user_id ,
                          sysdate ,
                          fnd_global.login_id
                        FROM fnd_languages l
                        WHERE l.installed_flag IN ('I','B')
                        AND language_code       = 'US'
                        AND NOT EXISTS
                          (SELECT NULL
                          FROM oe_processing_msgs_tl t
                          WHERE t.transaction_id = l_transaction_id
                          AND t.language         = l.language_code
                          );
                        --start defect 2891
                        INSERT
                        INTO oe_processing_msgs_tl
                          (
                            transaction_id ,
                            language ,
                            source_lang ,
                            message_text ,
                            created_by ,
                            creation_date ,
                            last_updated_by ,
                            last_update_date ,
                            last_update_login
                          )
                        SELECT l_transaction_id ,
                          l.language_code ,
                          'N' ,
                          (SELECT message_text
                          FROM fnd_new_messages
                          WHERE message_name='OE_VAL_TAX_CODE_REQD'
                          AND language_code ='N'
                          ) ,
                          g_user_id ,
                          sysdate ,
                          g_user_id ,
                          sysdate ,
                          fnd_global.login_id
                        FROM fnd_languages l
                        WHERE l.installed_flag IN ('I','B')
                        AND language_code       = 'N'
                        AND NOT EXISTS
                          (SELECT NULL
                          FROM oe_processing_msgs_tl t
                          WHERE t.transaction_id = l_transaction_id
                          AND t.language         = l.language_code
                          );
                        --end
                      END;
                      COMMIT;
                    END IF;
                  END;
                END IF;
              EXCEPTION
              WHEN OTHERS THEN
                p_status_code := g_code_error;
                xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Tax code should not be null' || g_program_loc || '> ::Contact your system administrator:: ' || v_batch_seq_no || sqlerrm );
                dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
              END;
              /* version 1.28 CR# 2499 */
              /* wave 2 modification */
              BEGIN
                SELECT NVL(ffvv.attribute7,'N')
                INTO lv_sales_yes_no
                FROM fnd_flex_value_sets ffvs,
                  fnd_flex_values ffvv
                WHERE ffvs.flex_value_set_name='XXCU_OM_SOURCE_ORDER_TYPE'
                AND ffvs.flex_value_set_id    =ffvv.flex_value_set_id
                AND upper(ffvv.flex_value)    =upper(p_batch_order.v_order_head (hi).order_source);
              EXCEPTION
              WHEN OTHERS THEN
                lv_sales_yes_no:='N';
              END;
              IF(lv_sales_yes_no='N') THEN
                BEGIN
                  lv_wrong_salesper                                              :='N';
                  IF(p_batch_order.v_order_head (hi).orderlines (li).salesperson IS NULL) THEN
                    lv_wrong_salesper                                            :='Y';
                    UPDATE oe_headers_iface_all
                    SET error_flag             ='Y'
                    WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;
                    UPDATE oe_lines_iface_all
                    SET error_flag         ='Y'
                    WHERE orig_sys_line_ref=v_upd_orig_sys_line_ref;
                    UPDATE oe_price_adjs_iface_all
                    SET error_flag           ='Y'
                    WHERE orig_sys_line_ref  =v_upd_orig_sys_line_ref
                    AND orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;
                    COMMIT;
                    -------------------------------------------------------------------
                    --  OE_MSG_PUB               BEGIN
                    SELECT oe_msg_id_s.nextval
                    INTO l_transaction_id
                    FROM dual;
                    /*  SELECT message_text
                    INTO lv_msg_text
                    FROM fnd_new_messages
                    WHERE message_name='XXCU_INVALID_SALESPERSON'
                    AND language_code =USERENV('LANG');*/
                    INSERT
                    INTO oe_processing_msgs
                      (
                        transaction_id ,
                        request_id
                        --     ,message_text
                        ,
                        entity_code ,
                        entity_ref ,
                        entity_id ,
                        header_id ,
                        line_id ,
                        order_source_id ,
                        original_sys_document_ref ,
                        original_sys_document_line_ref ,
                        orig_sys_shipment_ref ,
                        change_sequence ,
                        source_document_type_id ,
                        source_document_id ,
                        source_document_line_id ,
                        attribute_code ,
                        creation_date ,
                        created_by ,
                        last_update_date ,
                        last_updated_by ,
                        last_update_login ,
                        program_application_id ,
                        program_id ,
                        program_update_date ,
                        process_activity ,
                        notification_flag ,
                        type ,
                        message_source_code ,
                        message_status_code ,
                        org_id
                      )
                      VALUES
                      (
                        l_transaction_id ,
                        NULL
                        --     ,l_msg_data
                        ,
                        'LINE' ,
                        NULL ,
                        NULL ,
                        NULL ,
                        NULL ,
                        g_order_source_id ,
                        p_batch_order.v_order_head (hi).order_reference ,
                        v_upd_orig_sys_line_ref,--p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource ,
                        NULL ,
                        NULL ,
                        NULL ,
                        NULL ,
                        NULL ,
                        NULL ,
                        sysdate ,
                        g_user_id ,
                        sysdate ,
                        g_user_id ,
                        fnd_global.login_id ,
                        NULL ,
                        NULL ,
                        NULL ,
                        NULL ,
                        NULL ,
                        'ERROR' ,
                        'C' ,
                        'OPEN' ,
                        p_batch_order.v_order_head (hi).org_id
                      );
                    BEGIN
                      INSERT
                      INTO oe_processing_msgs_tl
                        (
                          transaction_id ,
                          language ,
                          source_lang ,
                          message_text ,
                          created_by ,
                          creation_date ,
                          last_updated_by ,
                          last_update_date ,
                          last_update_login
                        )
                      SELECT l_transaction_id ,
                        l.language_code ,
                        'US' ,
                        (SELECT message_text
                        FROM fnd_new_messages
                        WHERE message_name='XXCU_INVALID_SALESPERSON'
                        AND language_code ='US'
                        ) ,
                        g_user_id ,
                        sysdate ,
                        g_user_id ,
                        sysdate ,
                        fnd_global.login_id
                      FROM fnd_languages l
                      WHERE l.installed_flag IN ('I','B')
                      AND language_code       = 'US'
                      AND NOT EXISTS
                        (SELECT NULL
                        FROM oe_processing_msgs_tl t
                        WHERE t.transaction_id = l_transaction_id
                        AND t.language         = l.language_code
                        );
                      --start defect 2891
                      INSERT
                      INTO oe_processing_msgs_tl
                        (
                          transaction_id ,
                          language ,
                          source_lang ,
                          message_text ,
                          created_by ,
                          creation_date ,
                          last_updated_by ,
                          last_update_date ,
                          last_update_login
                        )
                      SELECT l_transaction_id ,
                        l.language_code ,
                        'N' ,
                        (SELECT message_text
                        FROM fnd_new_messages
                        WHERE message_name='XXCU_INVALID_SALESPERSON'
                        AND language_code ='N'
                        ) ,
                        g_user_id ,
                        sysdate ,
                        g_user_id ,
                        sysdate ,
                        fnd_global.login_id
                      FROM fnd_languages l
                      WHERE l.installed_flag IN ('I','B')
                      AND language_code       = 'N'
                      AND NOT EXISTS
                        (SELECT NULL
                        FROM oe_processing_msgs_tl t
                        WHERE t.transaction_id = l_transaction_id
                        AND t.language         = l.language_code
                        );
                      --end
                    END;
                    COMMIT;
                  END IF;
                EXCEPTION
                WHEN OTHERS THEN
                  p_status_code := g_code_error;
                  xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Tax code should not be null' || g_program_loc || '> ::Contact your system administrator:: ' || v_batch_seq_no || sqlerrm );
                  dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
                END;
              END IF;
              /* end version 1.28 CR 2499 */
              /* version 1.27 CR# 2375 */
              BEGIN
                -- FOR rec_c IN 1 .. p_batch_order.v_order_head (hi).orderlines.COUNT
                --LOOP
                lv_wrong_price :='N';
                -- IF(NVL(p_batch_order.v_order_head (hi).orderlines(li).unit_selling_price,0)<>(NVL(p_batch_order.v_order_head (hi).orderlines(li).unit_list_price,0)-ABS(NVL(p_batch_order.v_order_head (hi).orderlines(li).price_adj_per_unit,0)))) THEN
                /* start defect 4676 */
                -- IF(ABS(NVL(p_batch_order.v_order_head (hi).orderlines(li).unit_selling_price,0)-NVL(p_batch_order.v_order_head (hi).orderlines(li).unit_list_price,0))<>ABS(NVL(p_batch_order.v_order_head (hi).orderlines(li).price_adj_per_unit,0))) THEN
                IF(ABS(ROUND(NVL(p_batch_order.v_order_head (hi).orderlines(li).unit_selling_price,0)-NVL(p_batch_order.v_order_head (hi).orderlines(li).unit_list_price,0),2))<>ABS(NVL(ROUND(p_batch_order.v_order_head (hi).orderlines(li).price_adj_per_unit,2),0))) THEN
                  /* end defect 4676 */
                  lv_wrong_price :='Y';
                END IF;
                --  end loop;
                IF(lv_wrong_price='Y') THEN
                  UPDATE oe_headers_iface_all
                  SET error_flag             ='Y'
                  WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;
                  UPDATE oe_lines_iface_all
                  SET error_flag         ='Y'
                  WHERE orig_sys_line_ref=v_upd_orig_sys_line_ref;
                  UPDATE oe_price_adjs_iface_all
                  SET error_flag           ='Y'
                  WHERE orig_sys_line_ref  =v_upd_orig_sys_line_ref
                  AND orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;
                  COMMIT;
                  -------------------------------------------------------------------
                  --  OE_MSG_PUB               BEGIN
                  SELECT oe_msg_id_s.nextval
                  INTO l_transaction_id
                  FROM dual;
                  /* SELECT message_text
                  INTO lv_msg_text
                  FROM fnd_new_messages
                  WHERE message_name='XXCU_PRICE_ADJUSTMENTS'
                  AND language_code =USERENV('LANG');*/
                  INSERT
                  INTO oe_processing_msgs
                    (
                      transaction_id ,
                      request_id
                      --     ,message_text
                      ,
                      entity_code ,
                      entity_ref ,
                      entity_id ,
                      header_id ,
                      line_id ,
                      order_source_id ,
                      original_sys_document_ref ,
                      original_sys_document_line_ref ,
                      orig_sys_shipment_ref ,
                      change_sequence ,
                      source_document_type_id ,
                      source_document_id ,
                      source_document_line_id ,
                      attribute_code ,
                      creation_date ,
                      created_by ,
                      last_update_date ,
                      last_updated_by ,
                      last_update_login ,
                      program_application_id ,
                      program_id ,
                      program_update_date ,
                      process_activity ,
                      notification_flag ,
                      type ,
                      message_source_code ,
                      message_status_code ,
                      org_id
                    )
                    VALUES
                    (
                      l_transaction_id ,
                      NULL
                      --     ,l_msg_data
                      ,
                      'LINE' ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      g_order_source_id ,
                      p_batch_order.v_order_head (hi).order_reference ,
                      p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      sysdate ,
                      g_user_id ,
                      sysdate ,
                      g_user_id ,
                      fnd_global.login_id ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      'ERROR' ,
                      'C' ,
                      'OPEN' ,
                      p_batch_order.v_order_head (hi).org_id
                    );
                  BEGIN
                    INSERT
                    INTO oe_processing_msgs_tl
                      (
                        transaction_id ,
                        language ,
                        source_lang ,
                        message_text ,
                        created_by ,
                        creation_date ,
                        last_updated_by ,
                        last_update_date ,
                        last_update_login
                      )
                    SELECT l_transaction_id ,
                      l.language_code ,
                      'US' ,
                      (SELECT message_text
                      FROM fnd_new_messages
                      WHERE message_name='XXCU_PRICE_ADJUSTMENTS'
                      AND language_code ='US'
                      ) ,
                      g_user_id ,
                      sysdate ,
                      g_user_id ,
                      sysdate ,
                      fnd_global.login_id
                    FROM fnd_languages l
                    WHERE l.installed_flag IN ('I','B')
                    AND language_code       = 'US'
                    AND NOT EXISTS
                      (SELECT NULL
                      FROM oe_processing_msgs_tl t
                      WHERE t.transaction_id = l_transaction_id
                      AND t.language         = l.language_code
                      );
                    --start defect 2891
                    INSERT
                    INTO oe_processing_msgs_tl
                      (
                        transaction_id ,
                        language ,
                        source_lang ,
                        message_text ,
                        created_by ,
                        creation_date ,
                        last_updated_by ,
                        last_update_date ,
                        last_update_login
                      )
                    SELECT l_transaction_id ,
                      l.language_code ,
                      'N' ,
                      (SELECT message_text
                      FROM fnd_new_messages
                      WHERE message_name='XXCU_PRICE_ADJUSTMENTS'
                      AND language_code ='N'
                      ) ,
                      g_user_id ,
                      sysdate ,
                      g_user_id ,
                      sysdate ,
                      fnd_global.login_id
                    FROM fnd_languages l
                    WHERE l.installed_flag IN ('I','B')
                    AND language_code       = 'N'
                    AND NOT EXISTS
                      (SELECT NULL
                      FROM oe_processing_msgs_tl t
                      WHERE t.transaction_id = l_transaction_id
                      AND t.language         = l.language_code
                      );
                    --end
                  END;
                  COMMIT;
                  --  end if;
                END IF;
              EXCEPTION
              WHEN OTHERS THEN
                p_status_code := g_code_error;
                xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Tax code should not be null' || g_program_loc || '> ::Contact your system administrator:: ' || v_batch_seq_no || sqlerrm );
                dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
              END;
              /* version 1.9 modified for defect # 167 */
              BEGIN
                lv_wrong_ret_data                           :='N';
                IF(p_batch_order.v_order_head (hi).order_type='Regular' AND (p_batch_order.v_order_head (hi).return_order_reference IS NOT NULL OR p_batch_order.v_order_head (hi).orderlines (li).ret_orderlineidsource IS NOT NULL)) THEN
                  lv_wrong_ret_data                         :='Y';
                  UPDATE oe_headers_iface_all
                  SET error_flag             ='Y'
                  WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;
                  UPDATE oe_lines_iface_all
                  SET error_flag         ='Y'
                  WHERE orig_sys_line_ref=p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource;
                  UPDATE oe_price_adjs_iface_all
                  SET error_flag           ='Y'
                  WHERE orig_sys_line_ref  =p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource
                  AND orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;
                  COMMIT;
                  SELECT oe_msg_id_s.nextval INTO l_transaction_id FROM dual;
                  /* SELECT message_text
                  INTO lv_msg_text
                  FROM fnd_new_messages
                  WHERE message_name='XXCU_ORDER_REFERENCE_REGULAR'
                  AND language_code =USERENV('LANG');*/
                  INSERT
                  INTO oe_processing_msgs
                    (
                      transaction_id ,
                      request_id
                      --     ,message_text
                      ,
                      entity_code ,
                      entity_ref ,
                      entity_id ,
                      header_id ,
                      line_id ,
                      order_source_id ,
                      original_sys_document_ref ,
                      original_sys_document_line_ref ,
                      orig_sys_shipment_ref ,
                      change_sequence ,
                      source_document_type_id ,
                      source_document_id ,
                      source_document_line_id ,
                      attribute_code ,
                      creation_date ,
                      created_by ,
                      last_update_date ,
                      last_updated_by ,
                      last_update_login ,
                      program_application_id ,
                      program_id ,
                      program_update_date ,
                      process_activity ,
                      notification_flag ,
                      type ,
                      message_source_code ,
                      message_status_code ,
                      org_id
                    )
                    VALUES
                    (
                      l_transaction_id ,
                      NULL
                      --     ,l_msg_data
                      ,
                      'LINE' ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      g_order_source_id ,
                      p_batch_order.v_order_head (hi).order_reference ,
                      p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      sysdate ,
                      g_user_id ,
                      sysdate ,
                      g_user_id ,
                      fnd_global.login_id ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      'ERROR' ,
                      'C' ,
                      'OPEN' ,
                      p_batch_order.v_order_head (hi).org_id
                    );
                  BEGIN
                    INSERT
                    INTO oe_processing_msgs_tl
                      (
                        transaction_id ,
                        language ,
                        source_lang ,
                        message_text ,
                        created_by ,
                        creation_date ,
                        last_updated_by ,
                        last_update_date ,
                        last_update_login
                      )
                    SELECT l_transaction_id ,
                      l.language_code ,
                      'US' ,
                      (SELECT message_text
                      FROM fnd_new_messages
                      WHERE message_name='XXCU_ORDER_REFERENCE_REGULAR'
                      AND language_code ='US'
                      ) ,
                      g_user_id ,
                      sysdate ,
                      g_user_id ,
                      sysdate ,
                      fnd_global.login_id
                    FROM fnd_languages l
                    WHERE l.installed_flag IN ('I','B')
                    AND language_code       = 'US'
                    AND NOT EXISTS
                      (SELECT NULL
                      FROM oe_processing_msgs_tl t
                      WHERE t.transaction_id = l_transaction_id
                      AND t.language         = l.language_code
                      );
                    --start defect 2891
                    INSERT
                    INTO oe_processing_msgs_tl
                      (
                        transaction_id ,
                        language ,
                        source_lang ,
                        message_text ,
                        created_by ,
                        creation_date ,
                        last_updated_by ,
                        last_update_date ,
                        last_update_login
                      )
                    SELECT l_transaction_id ,
                      l.language_code ,
                      'N' ,
                      (SELECT message_text
                      FROM fnd_new_messages
                      WHERE message_name='XXCU_ORDER_REFERENCE_REGULAR'
                      AND language_code ='N'
                      ) ,
                      g_user_id ,
                      sysdate ,
                      g_user_id ,
                      sysdate ,
                      fnd_global.login_id
                    FROM fnd_languages l
                    WHERE l.installed_flag IN ('I','B')
                    AND language_code       = 'N'
                    AND NOT EXISTS
                      (SELECT NULL
                      FROM oe_processing_msgs_tl t
                      WHERE t.transaction_id = l_transaction_id
                      AND t.language         = l.language_code
                      );
                  END;
                  COMMIT;
                END IF;
              EXCEPTION
              WHEN OTHERS THEN
                p_status_code := g_code_error;
                xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled error in updating error flag: <' || g_program_loc || '> ::Contact your system administrator:: ' || v_batch_seq_no || sqlerrm );
                dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
              END;
              BEGIN
                xxcu_common_log_rt.msglog ( msgtype => xxcu_intf_sys.gc_rlevel_info, msgtext => 'Order Entry' || sqlerrm, msgcode => 1117, usermsg => '1', -- not sure what this is, maps to user_id in log table
                msgsrc => 'Test' , msgjobid => 10054);
                lv_wrong_ref                                :='N';
                IF(p_batch_order.v_order_head (hi).order_type='Return' AND (p_batch_order.v_order_head (hi).return_order_reference IS NULL OR p_batch_order.v_order_head (hi).orderlines (li).ret_orderlineidsource IS NULL) AND p_batch_order.v_order_head (hi).order_source NOT IN ('NO002_RB','RETTBETALT')) THEN
                  lv_wrong_ref                              :='Y';
                  UPDATE oe_headers_iface_all
                  SET error_flag             ='Y'
                  WHERE orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;
                  UPDATE oe_lines_iface_all
                  SET error_flag         ='Y'
                  WHERE orig_sys_line_ref=p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource;
                  UPDATE oe_price_adjs_iface_all
                  SET error_flag           ='Y'
                  WHERE orig_sys_line_ref  =p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource
                  AND orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;
                  COMMIT;
                  SELECT oe_msg_id_s.nextval INTO l_transaction_id FROM dual;
                  /* SELECT message_text
                  INTO lv_msg_text
                  FROM fnd_new_messages
                  WHERE message_name='XXCU_ORDER_REFERENCE_RETURN'
                  AND language_code =USERENV('LANG');*/
                  INSERT
                  INTO oe_processing_msgs
                    (
                      transaction_id ,
                      request_id
                      --     ,message_text
                      ,
                      entity_code ,
                      entity_ref ,
                      entity_id ,
                      header_id ,
                      line_id ,
                      order_source_id ,
                      original_sys_document_ref ,
                      original_sys_document_line_ref ,
                      orig_sys_shipment_ref ,
                      change_sequence ,
                      source_document_type_id ,
                      source_document_id ,
                      source_document_line_id ,
                      attribute_code ,
                      creation_date ,
                      created_by ,
                      last_update_date ,
                      last_updated_by ,
                      last_update_login ,
                      program_application_id ,
                      program_id ,
                      program_update_date ,
                      process_activity ,
                      notification_flag ,
                      type ,
                      message_source_code ,
                      message_status_code ,
                      org_id
                    )
                    VALUES
                    (
                      l_transaction_id ,
                      NULL
                      --     ,l_msg_data
                      ,
                      'LINE' ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      g_order_source_id ,
                      p_batch_order.v_order_head (hi).order_reference ,
                      p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      sysdate ,
                      g_user_id ,
                      sysdate ,
                      g_user_id ,
                      fnd_global.login_id ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      NULL ,
                      'ERROR' ,
                      'C' ,
                      'OPEN' ,
                      p_batch_order.v_order_head (hi).org_id
                    );
                  BEGIN
                    INSERT
                    INTO oe_processing_msgs_tl
                      (
                        transaction_id ,
                        language ,
                        source_lang ,
                        message_text ,
                        created_by ,
                        creation_date ,
                        last_updated_by ,
                        last_update_date ,
                        last_update_login
                      )
                    SELECT l_transaction_id ,
                      l.language_code ,
                      'US' ,
                      (SELECT message_text
                      FROM fnd_new_messages
                      WHERE message_name='XXCU_ORDER_REFERENCE_RETURN'
                      AND language_code ='US'
                      ) ,
                      g_user_id ,
                      sysdate ,
                      g_user_id ,
                      sysdate ,
                      fnd_global.login_id
                    FROM fnd_languages l
                    WHERE l.installed_flag IN ('I','B')
                    AND language_code       = 'US'
                    AND NOT EXISTS
                      (SELECT NULL
                      FROM oe_processing_msgs_tl t
                      WHERE t.transaction_id = l_transaction_id
                      AND t.language         = l.language_code
                      );
                    --start defect 2891
                    INSERT
                    INTO oe_processing_msgs_tl
                      (
                        transaction_id ,
                        language ,
                        source_lang ,
                        message_text ,
                        created_by ,
                        creation_date ,
                        last_updated_by ,
                        last_update_date ,
                        last_update_login
                      )
                    SELECT l_transaction_id ,
                      l.language_code ,
                      'N' ,
                      (SELECT message_text
                      FROM fnd_new_messages
                      WHERE message_name='XXCU_ORDER_REFERENCE_RETURN'
                      AND language_code ='N'
                      ) ,
                      g_user_id ,
                      sysdate ,
                      g_user_id ,
                      sysdate ,
                      fnd_global.login_id
                    FROM fnd_languages l
                    WHERE l.installed_flag IN ('I','B')
                    AND language_code       = 'N'
                    AND NOT EXISTS
                      (SELECT NULL
                      FROM oe_processing_msgs_tl t
                      WHERE t.transaction_id = l_transaction_id
                      AND t.language         = l.language_code
                      );
                  END;
                  COMMIT;
                END IF;
              EXCEPTION
              WHEN OTHERS THEN
                p_status_code := g_code_error;
                xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled error in updating error flag: <' || g_program_loc || '> ::Contact your system administrator:: ' || v_batch_seq_no || sqlerrm );
                dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
              END;
              --reconciliation (p_batch_order.batchid, p_batch_order.messagesequenceno, p_batch_order.Batchnototal, v_orderline_count, p_batch_order.batchdate, p_batch_order.batchdetailcount,v_max_date, v_min_date, p_batch_order.messagedetailcount,v_num_orderheads, v_num_orderlines, v_finish_status, v_status_function );
              -- END IF;
            EXCEPTION
            WHEN OTHERS THEN
              p_status_code := g_code_error;
              xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled error in creation of order line: <' || g_program_loc || '> ::Contact your system administrator:: ' || v_batch_seq_no || sqlerrm );
              ROLLBACK;
              dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
            END;
            ----Changes started by Divyansh for incident #E2-IM014174700 Defect #8447
            BEGIN
              l_item_id := xxcu_ont_create_order_pkg.getinventory_item_id( p_batch_order.v_order_head (hi).orderlines(li).itemno, p_batch_order.v_order_head (hi).order_source, p_batch_order.v_order_head (hi).order_type, p_batch_order.v_order_head (hi).org_id );
              BEGIN
                SELECT 1
                INTO l_item_type
                FROM mtl_system_items_b
                WHERE inventory_item_id = l_item_id
                AND organization_id     = p_batch_order.v_order_head (hi).org_id
                AND item_type          IN
                  (SELECT ffvv.flex_value
                  FROM fnd_flex_value_sets ffvs,
                    fnd_flex_values_vl ffvv
                  WHERE ffvs.flex_value_set_name = 'XXCU_OM_TAX_ITEM_TYPE'
                  AND ffvs.flex_value_set_id     =ffvv.flex_value_set_id
                  );
              EXCEPTION
              WHEN OTHERS THEN
                l_item_type:=2;
              END;
              IF l_item_type = 1 AND (p_batch_order.v_order_head (hi).orderlines(li).postal_code_from IS NULL OR p_batch_order.v_order_head (hi).orderlines(li).postal_code_to IS NULL OR p_batch_order.v_order_head (hi).orderlines(li).country_code_from IS NULL OR p_batch_order.v_order_head (hi).orderlines(li).country_code_to IS NULL) THEN
                UPDATE oe_lines_iface_all
                SET error_flag         ='Y'
                WHERE orig_sys_line_ref=v_upd_orig_sys_line_ref;
                UPDATE oe_price_adjs_iface_all
                SET error_flag           ='Y'
                WHERE orig_sys_line_ref  =v_upd_orig_sys_line_ref
                AND orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;-- v_orig_sys_document_ref , --changed for incident E2-IM013472372
                COMMIT;
                -------------------------------------------------------------------
                SELECT oe_msg_id_s.nextval
                INTO l_transaction_id
                FROM dual;
                INSERT
                INTO oe_processing_msgs
                  (
                    transaction_id ,
                    request_id,
                    entity_code ,
                    entity_ref ,
                    entity_id ,
                    header_id ,
                    line_id ,
                    order_source_id ,
                    original_sys_document_ref ,
                    original_sys_document_line_ref ,
                    orig_sys_shipment_ref ,
                    change_sequence ,
                    source_document_type_id ,
                    source_document_id ,
                    source_document_line_id ,
                    attribute_code ,
                    creation_date ,
                    created_by ,
                    last_update_date ,
                    last_updated_by ,
                    last_update_login ,
                    program_application_id ,
                    program_id ,
                    program_update_date ,
                    process_activity ,
                    notification_flag ,
                    type ,
                    message_source_code ,
                    message_status_code ,
                    org_id
                  )
                  VALUES
                  (
                    l_transaction_id ,
                    NULL
                    --     ,l_msg_data
                    ,
                    'LINE' ,
                    NULL ,
                    NULL ,
                    NULL ,
                    NULL ,
                    g_order_source_id ,
                    p_batch_order.v_order_head (hi).order_reference,-- v_orig_sys_document_ref , --changed for incident E2-IM013472372
                    p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource ,
                    NULL ,
                    NULL ,
                    NULL ,
                    NULL ,
                    NULL ,
                    NULL ,
                    sysdate ,
                    g_user_id ,
                    sysdate ,
                    g_user_id ,
                    fnd_global.login_id ,
                    NULL ,
                    NULL ,
                    NULL ,
                    NULL ,
                    NULL ,
                    'ERROR' ,
                    'C' ,
                    'OPEN' ,
                    p_batch_order.v_order_head (hi).org_id
                  );
                BEGIN
                  INSERT
                  INTO oe_processing_msgs_tl
                    (
                      transaction_id ,
                      language ,
                      source_lang ,
                      message_text ,
                      created_by ,
                      creation_date ,
                      last_updated_by ,
                      last_update_date ,
                      last_update_login
                    )
                  SELECT l_transaction_id ,
                    l.language_code ,
                    'US' ,
                    (SELECT message_text
                    FROM fnd_new_messages
                    WHERE message_name='XXCU_TRANSPORT_ITEM'
                    AND language_code ='US'
                    ) ,
                    g_user_id ,
                    sysdate ,
                    g_user_id ,
                    sysdate ,
                    fnd_global.login_id
                  FROM fnd_languages l
                  WHERE l.installed_flag IN ('I','B')
                  AND language_code       = 'US'
                  AND NOT EXISTS
                    (SELECT NULL
                    FROM oe_processing_msgs_tl t
                    WHERE t.transaction_id = l_transaction_id
                    AND t.language         = l.language_code
                    );
                  --start defect 2891
                  INSERT
                  INTO oe_processing_msgs_tl
                    (
                      transaction_id ,
                      language ,
                      source_lang ,
                      message_text ,
                      created_by ,
                      creation_date ,
                      last_updated_by ,
                      last_update_date ,
                      last_update_login
                    )
                  SELECT l_transaction_id ,
                    l.language_code ,
                    'N' ,
                    (SELECT message_text
                    FROM fnd_new_messages
                    WHERE message_name='XXCU_TRANSPORT_ITEM'
                    AND language_code ='N'
                    ) ,
                    g_user_id ,
                    sysdate ,
                    g_user_id ,
                    sysdate ,
                    fnd_global.login_id
                  FROM fnd_languages l
                  WHERE l.installed_flag IN ('I','B')
                  AND language_code       = 'N'
                  AND NOT EXISTS
                    (SELECT NULL
                    FROM oe_processing_msgs_tl t
                    WHERE t.transaction_id = l_transaction_id
                    AND t.language         = l.language_code
                    );
                END;
                COMMIT;
              END IF;
            EXCEPTION
            WHEN OTHERS THEN
              p_status_code := g_code_error;
              xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Incorrect values for Transport Item' || g_program_loc || '> ::Contact your system administrator:: ' || v_batch_seq_no || sqlerrm );
              dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
            END;
            ----Changes End by Divyansh for incident #E2-IM014174700 Defect #8447
            ----Code changes added by Divyansh for incident #E2-IM014178902 Defect #8447
            BEGIN
              BEGIN
                SELECT COUNT(1)
                INTO l_order_count
                FROM oe_order_headers_all
                WHERE orig_sys_document_ref = p_batch_order.v_order_head (hi).order_reference
                AND org_id                  = p_batch_order.v_order_head (hi).org_id
                AND order_source_id         = g_order_source_id;
              EXCEPTION
              WHEN OTHERS THEN
                l_order_count:=2;
              END;
              IF l_order_count > 0 AND upper(p_batch_order.v_order_head (hi).order_type) = 'REGULAR' THEN
                UPDATE oe_lines_iface_all
                SET error_flag         ='Y'
                WHERE orig_sys_line_ref=v_upd_orig_sys_line_ref;
                UPDATE oe_price_adjs_iface_all
                SET error_flag           ='Y'
                WHERE orig_sys_line_ref  =v_upd_orig_sys_line_ref
                AND orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;-- v_orig_sys_document_ref , --changed for incident E2-IM013472372
                COMMIT;
                -------------------------------------------------------------------
                SELECT oe_msg_id_s.nextval
                INTO l_transaction_id
                FROM dual;
                INSERT
                INTO oe_processing_msgs
                  (
                    transaction_id ,
                    request_id,
                    entity_code ,
                    entity_ref ,
                    entity_id ,
                    header_id ,
                    line_id ,
                    order_source_id ,
                    original_sys_document_ref ,
                    original_sys_document_line_ref ,
                    orig_sys_shipment_ref ,
                    change_sequence ,
                    source_document_type_id ,
                    source_document_id ,
                    source_document_line_id ,
                    attribute_code ,
                    creation_date ,
                    created_by ,
                    last_update_date ,
                    last_updated_by ,
                    last_update_login ,
                    program_application_id ,
                    program_id ,
                    program_update_date ,
                    process_activity ,
                    notification_flag ,
                    type ,
                    message_source_code ,
                    message_status_code ,
                    org_id
                  )
                  VALUES
                  (
                    l_transaction_id ,
                    NULL
                    --     ,l_msg_data
                    ,
                    'LINE' ,
                    NULL ,
                    NULL ,
                    NULL ,
                    NULL ,
                    g_order_source_id ,
                    p_batch_order.v_order_head (hi).order_reference,-- v_orig_sys_document_ref , --changed for incident E2-IM013472372
                    p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource ,
                    NULL ,
                    NULL ,
                    NULL ,
                    NULL ,
                    NULL ,
                    NULL ,
                    sysdate ,
                    g_user_id ,
                    sysdate ,
                    g_user_id ,
                    fnd_global.login_id ,
                    NULL ,
                    NULL ,
                    NULL ,
                    NULL ,
                    NULL ,
                    'ERROR' ,
                    'C' ,
                    'OPEN' ,
                    p_batch_order.v_order_head (hi).org_id
                  );
                BEGIN
                  INSERT
                  INTO oe_processing_msgs_tl
                    (
                      transaction_id ,
                      language ,
                      source_lang ,
                      message_text ,
                      created_by ,
                      creation_date ,
                      last_updated_by ,
                      last_update_date ,
                      last_update_login
                    )
                  SELECT l_transaction_id ,
                    l.language_code ,
                    'US' ,
                    (SELECT message_text
                    FROM fnd_new_messages
                    WHERE message_name='XXCU_DUPLICATE_ORDER'
                    AND language_code ='US'
                    ) ,
                    g_user_id ,
                    sysdate ,
                    g_user_id ,
                    sysdate ,
                    fnd_global.login_id
                  FROM fnd_languages l
                  WHERE l.installed_flag IN ('I','B')
                  AND language_code       = 'US'
                  AND NOT EXISTS
                    (SELECT NULL
                    FROM oe_processing_msgs_tl t
                    WHERE t.transaction_id = l_transaction_id
                    AND t.language         = l.language_code
                    );
                  --start defect 2891
                  INSERT
                  INTO oe_processing_msgs_tl
                    (
                      transaction_id ,
                      language ,
                      source_lang ,
                      message_text ,
                      created_by ,
                      creation_date ,
                      last_updated_by ,
                      last_update_date ,
                      last_update_login
                    )
                  SELECT l_transaction_id ,
                    l.language_code ,
                    'N' ,
                    (SELECT message_text
                    FROM fnd_new_messages
                    WHERE message_name='XXCU_DUPLICATE_ORDER'
                    AND language_code ='N'
                    ) ,
                    g_user_id ,
                    sysdate ,
                    g_user_id ,
                    sysdate ,
                    fnd_global.login_id
                  FROM fnd_languages l
                  WHERE l.installed_flag IN ('I','B')
                  AND language_code       = 'N'
                  AND NOT EXISTS
                    (SELECT NULL
                    FROM oe_processing_msgs_tl t
                    WHERE t.transaction_id = l_transaction_id
                    AND t.language         = l.language_code
                    );
                END;
                COMMIT;
              END IF;
            EXCEPTION
            WHEN OTHERS THEN
              p_status_code := g_code_error;
              xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Duplicate Order received' || g_program_loc || '> ::Contact your system administrator:: ' || v_batch_seq_no || sqlerrm );
              dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
            END;
            ----Code changes added by Divyansh for incident #E2-IM014178902 Defect #8447
            --------------------Changes done by Divyansh for Defect #8629
            BEGIN
              SELECT COUNT(0)
              INTO l_country_codes
              FROM fnd_territories
              WHERE territory_code = p_batch_order.v_order_head (hi).orderlines(li).country_code_from
              AND obsolete_flag    = 'Y';
              IF l_country_codes   =0 THEN
                SELECT COUNT(0)
                INTO l_country_codes
                FROM fnd_territories
                WHERE territory_code = p_batch_order.v_order_head (hi).orderlines(li).country_code_to
                AND obsolete_flag    = 'Y';
              END IF;
            EXCEPTION
            WHEN OTHERS THEN
              l_country_codes:=1;
            END;
            IF l_country_codes > 0 THEN
              UPDATE oe_lines_iface_all
              SET error_flag         ='Y'
              WHERE orig_sys_line_ref=v_upd_orig_sys_line_ref;
              UPDATE oe_price_adjs_iface_all
              SET error_flag           ='Y'
              WHERE orig_sys_line_ref  =v_upd_orig_sys_line_ref
              AND orig_sys_document_ref=p_batch_order.v_order_head (hi).order_reference;-- v_orig_sys_document_ref , --changed for incident E2-IM013472372
              COMMIT;
              -------------------------------------------------------------------
              SELECT oe_msg_id_s.nextval
              INTO l_transaction_id
              FROM dual;
              INSERT
              INTO oe_processing_msgs
                (
                  transaction_id ,
                  request_id,
                  entity_code ,
                  entity_ref ,
                  entity_id ,
                  header_id ,
                  line_id ,
                  order_source_id ,
                  original_sys_document_ref ,
                  original_sys_document_line_ref ,
                  orig_sys_shipment_ref ,
                  change_sequence ,
                  source_document_type_id ,
                  source_document_id ,
                  source_document_line_id ,
                  attribute_code ,
                  creation_date ,
                  created_by ,
                  last_update_date ,
                  last_updated_by ,
                  last_update_login ,
                  program_application_id ,
                  program_id ,
                  program_update_date ,
                  process_activity ,
                  notification_flag ,
                  type ,
                  message_source_code ,
                  message_status_code ,
                  org_id
                )
                VALUES
                (
                  l_transaction_id ,
                  NULL
                  --     ,l_msg_data
                  ,
                  'LINE' ,
                  NULL ,
                  NULL ,
                  NULL ,
                  NULL ,
                  g_order_source_id ,
                  p_batch_order.v_order_head (hi).order_reference,-- v_orig_sys_document_ref , --changed for incident E2-IM013472372
                  p_batch_order.v_order_head (hi).orderlines (li).orderlineidsource ,
                  NULL ,
                  NULL ,
                  NULL ,
                  NULL ,
                  NULL ,
                  NULL ,
                  sysdate ,
                  g_user_id ,
                  sysdate ,
                  g_user_id ,
                  fnd_global.login_id ,
                  NULL ,
                  NULL ,
                  NULL ,
                  NULL ,
                  NULL ,
                  'ERROR' ,
                  'C' ,
                  'OPEN' ,
                  p_batch_order.v_order_head (hi).org_id
                );
              BEGIN
                INSERT
                INTO oe_processing_msgs_tl
                  (
                    transaction_id ,
                    language ,
                    source_lang ,
                    message_text ,
                    created_by ,
                    creation_date ,
                    last_updated_by ,
                    last_update_date ,
                    last_update_login
                  )
                SELECT l_transaction_id ,
                  l.language_code ,
                  'US' ,
                  (SELECT message_text
                  FROM fnd_new_messages
                  WHERE message_name='XXCU_INVALID_COUNTRY_CODE'
                  AND language_code ='US'
                  ) ,
                  g_user_id ,
                  sysdate ,
                  g_user_id ,
                  sysdate ,
                  fnd_global.login_id
                FROM fnd_languages l
                WHERE l.installed_flag IN ('I','B')
                AND language_code       = 'US'
                AND NOT EXISTS
                  (SELECT NULL
                  FROM oe_processing_msgs_tl t
                  WHERE t.transaction_id = l_transaction_id
                  AND t.language         = l.language_code
                  );
                --start defect 2891
                INSERT
                INTO oe_processing_msgs_tl
                  (
                    transaction_id ,
                    language ,
                    source_lang ,
                    message_text ,
                    created_by ,
                    creation_date ,
                    last_updated_by ,
                    last_update_date ,
                    last_update_login
                  )
                SELECT l_transaction_id ,
                  l.language_code ,
                  'N' ,
                  (SELECT message_text
                  FROM fnd_new_messages
                  WHERE message_name='XXCU_INVALID_COUNTRY_CODE'
                  AND language_code ='N'
                  ) ,
                  g_user_id ,
                  sysdate ,
                  g_user_id ,
                  sysdate ,
                  fnd_global.login_id
                FROM fnd_languages l
                WHERE l.installed_flag IN ('I','B')
                AND language_code       = 'N'
                AND NOT EXISTS
                  (SELECT NULL
                  FROM oe_processing_msgs_tl t
                  WHERE t.transaction_id = l_transaction_id
                  AND t.language         = l.language_code
                  );
              END;
              COMMIT;
            END IF;
            --------------------Changes complete by Divyansh for Defect #8629
          END LOOP;
          /* start defect 3310 */
          --v_orig_sys_document_ref := createorderhead_interface (p_batch_order.v_order_head (hi), p_batch_order.batchid, p_status_code, v_num_orderheads,ln_total_amount,p_error_message); --added for E2-IM013089363 (defect 8035)
          COMMIT; --added for E2-IM013089363 (defect 8035)
          /* start CR 4721 */
          BEGIN
            FOR rec_addr_print IN 1.. p_batch_order.v_order_head (hi).invaddr.count
            LOOP
              BEGIN
                IF(p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_addressee            IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_address_1 IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_address_2 IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_address_3 IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_postal_code IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_city IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_country_code IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_country_name IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_contact_person IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_contact_email IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_addressee IS
                  NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_address_1 IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_address_2 IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_address_3 IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_postal_code IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_city IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_country_code IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_country_name IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_contact_person IS NOT NULL OR p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_contact_email IS NOT NULL )THEN
                  BEGIN
                    SELECT name
                    INTO lv_order_source_cust
                    FROM oe_order_sources
                    WHERE order_source_id=g_order_source_id;
                  EXCEPTION
                  WHEN OTHERS THEN
                    lv_order_source_cust:=NULL;
                  END;
                  INSERT
                  INTO xxcu_customer_addresses VALUES
                    (
                      xxcu_customer_address_id_s.nextval,
                      g_order_number,
                      p_batch_order.v_order_head (hi).order_reference,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_addressee ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_address_1 ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_address_2 ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_address_3 ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_postal_code ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_city ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_country_code ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_country_name ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_contact_person ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).bill_to_contact_email ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_addressee ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_address_1 ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_address_2 ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_address_3 ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_postal_code ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_city ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_country_code ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_country_name ,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_contact_person,
                      p_batch_order.v_order_head (hi).invaddr(rec_addr_print).ship_to_contact_email ,
                      lv_order_source_cust,--p_batch_order.v_order_head (hi).ordeR_source        ,
                      g_user_id,
                      sysdate,
                      g_user_id,
                      sysdate,
                      NULL,
                      NULL
                    );
                  COMMIT;
                END IF;
              EXCEPTION
              WHEN OTHERS THEN
                p_status_code := 2;
                xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error while inserting records into xxcu_customer_addresses <' || g_program_loc || '> ::Contact your system administrator:: ' || sqlerrm );
                p_error_message:='Error while inserting records into xxcu_customer_addresses '||sqlerrm||dbms_utility.format_error_backtrace;
                xxcu_common_log_rt.msglog ( msgtype => xxcu_intf_sys.gc_rlevel_info, msgtext => 'In Error ' || sqlerrm, msgcode => 1117, usermsg => '1', -- not sure what this is, maps to user_id in log table
                msgsrc => 'XXCU_CUSTOMER_ADDRESSES' , msgjobid => 10054);
                ROLLBACK;
              END;
            END LOOP;
          END;
          /* end CR 4721 */
          /* start wave 2 modification */
          IF(v_orig_sys_document_ref IS NOT NULL AND p_batch_order.v_order_head (hi).order_source='NO002_BUTTERFLY') THEN
            xxcu_common_log_rt.msglog ('INFO', 'Inserted in xxcu_print_criteria', 1117, 1, 'xxcu_ont_create_order_pkg BODY', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
            IF(p_batch_order.v_order_head (hi).invprint.count=0) THEN
              /**ln_spec_count                                                             := p_batch_order.v_order_head (hi).orderlines.COUNT;**/
              ln_print_count :=0;
              --  insert_invoice_spec_p(p_batch_order.v_order_head (rec_head),p_batch_order.v_order_head (rec_head).orderlines (rec_line),NULL,p_batch_order.v_order_head (rec_head).Order_Reference,p_batch_order.v_order_head (rec_head).orderlines (rec_line).orderlineidsource,g_order_number,p_status_code,p_error_message);
            ELSE
              ln_print_count:=p_batch_order.v_order_head (hi).invprint.count;
            END IF;
            IF NVL( ln_print_count ,0) >0 THEN
              BEGIN
                FOR rec_print IN 1.. ln_print_count
                LOOP
                  BEGIN
                    ln_customer_id:= getcustomer_id (p_batch_order.v_order_head (hi).customer_number);
                    SELECT DECODE(hp.party_type,'ORGANIZATION','O','P')
                    INTO lv_party_type
                    FROM hz_cust_accounts hca,
                      hz_parties hp
                    WHERE hca.cust_account_id=ln_customer_id
                    AND hca.party_id         =hp.party_id;
                  EXCEPTION
                  WHEN OTHERS THEN
                    lv_party_type:=NULL;
                  END;
                  xxcu_common_log_rt.msglog ( 'INFO', 'Inside print loop for printlines.count>0', 1117, 1, 'xxcu_ont_create_order_pkg BODY', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ) ) ;
                  INSERT
                  INTO xxcu_custom_printcriteria VALUES
                    (
                      p_batch_order.v_order_head (hi).invprint(rec_print).messageid ,
                      p_batch_order.v_order_head (hi).order_source,
                      p_batch_order.v_order_head (hi).invprint(rec_print).receipt_reference ,
                      NULL,
                      NULL ,
                      p_batch_order.v_order_head (hi).order_reference,
                      NULL,
                      NULL,
                      sysdate,
                      g_user_id ,
                      sysdate ,
                      g_user_id ,
                      p_batch_order.v_order_head (hi).invprint(rec_print).preferred_language ,
                      p_batch_order.v_order_head (hi).invprint(rec_print).invoice_type,
                      p_batch_order.v_order_head (hi).consignment_num,
                      NULL ,
                      p_batch_order.v_order_head (hi).invprint(rec_print).invoice_settlement ,
                      p_batch_order.v_order_head (hi).master_consign_id ,
                      p_batch_order.v_order_head (hi).customs_id ,
                      p_batch_order.v_order_head (hi).invprint(rec_print).shipment_type ,
                      p_batch_order.v_order_head (hi).invprint(rec_print).customer_enclosure,
                      p_batch_order.v_order_head (hi).invprint(rec_print).inv_customer_group ,
                      p_batch_order.v_order_head (hi).invprint(rec_print).custom_clearance_status_code,
                      p_batch_order.v_order_head (hi).invprint(rec_print).adr_lev_deviation ,
                      p_batch_order.v_order_head (hi).invprint(rec_print).product ,
                      p_batch_order.v_order_head (hi).invprint(rec_print).collie ,
                      getsiteuseid (ln_customer_id, 'SHIP_TO',p_batch_order.v_order_head (hi).org_id) ,
                      p_batch_order.v_order_head (hi).invprint(rec_print).inv_split ,
                      p_batch_order.v_order_head (hi).invprint(rec_print).inv_mail ,
                      p_batch_order.v_order_head (hi).consign_item_num ,
                      NULL ,
                      p_batch_order.v_order_head (hi).customer_number,
                      lv_party_type ,
                      NULL ,
                      NULL,
                      NULL ,
                      NULL,
                      xxcu_oe_message_id_s.nextval,
                      p_batch_order.v_order_head (hi).invprint(rec_print).shipper_goods_value,
                      NULL,
                      p_batch_order.v_order_head (hi).invprint(rec_print).commodity_classification,-- CR 5310
                      p_batch_order.v_order_head (hi).invprint(rec_print).total_num_items          -- CR 5310
                    );
                  COMMIT;
                  /** END IF;**/
                END LOOP;
              EXCEPTION
              WHEN OTHERS THEN
                p_status_code := 2;
                xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error while inserting records into XXCU_CUSTOM_PRINTCRITERIA <' || g_program_loc || '> ::Contact your system administrator:: ' || sqlerrm );
                p_error_message:='Error while inserting records into XXCU_CUSTOM_PRINTCRITERIA '||sqlerrm||dbms_utility.format_error_backtrace;
                xxcu_common_log_rt.msglog ( msgtype => xxcu_intf_sys.gc_rlevel_info, msgtext => 'In Error ' || sqlerrm, msgcode => 1117, usermsg => '1', -- not sure what this is, maps to user_id in log table
                msgsrc => 'XXCU_INTERFACE_SPEC_URL' , msgjobid => 10054);
                ROLLBACK;
              END;
            END IF;
          END IF;
          /* end wave 2 modification */
          --code added for defect 8003
          BEGIN
            FOR p IN 1 .. p_batch_order.v_order_head
            (
              hi
            )
            .orderlines.count
            LOOP
              dbms_output.put_line
              (
                SIGN(p_batch_order.v_order_head (hi).orderlines(p).quantity)
              )
              ;
              /* start defect 2413 */
              IF(p_batch_order.v_order_head (hi).orderlines(p).quantity=0) THEN
                ln_count                                              :=1;
              ELSE
                ln_count:=SIGN(p_batch_order.v_order_head (hi).orderlines(p).quantity);
              END IF;
              /* end defect 2413 */
              ln_sum :=ln_count+ln_sum;
            END LOOP;
            dbms_output.put_line('ln_sum:'||ln_sum);
          END;
          IF(ABS(ln_sum)<>p_batch_order.v_order_head (hi).orderlines.count) THEN
            BEGIN
              UPDATE oe_headers_iface_all
              SET error_flag             ='Y'
              WHERE orig_sys_document_ref=v_orig_sys_document_ref;
              /* UPDATE oe_lines_iface_all
              SET error_flag         ='Y'
              WHERE orig_sys_line_ref=v_upd_orig_sys_line_ref;
              UPDATE oe_price_adjs_iface_all
              SET error_flag           ='Y'
              WHERE orig_sys_line_ref  =v_upd_orig_sys_line_ref
              AND orig_sys_document_ref=v_orig_sys_document_ref;*/
              COMMIT;
              -------------------------------------------------------------------
              --  OE_MSG_PUB               BEGIN
              SELECT oe_msg_id_s.nextval
              INTO l_transaction_id
              FROM dual;
              /* SELECT message_text
              INTO lv_msg_text
              FROM fnd_new_messages
              WHERE message_name='OE_VAL_TAX_CODE_REQD'
              AND language_code =USERENV('LANG');*/
              --
              INSERT
              INTO oe_processing_msgs
                (
                  transaction_id ,
                  request_id
                  --     ,message_text
                  ,
                  entity_code ,
                  entity_ref ,
                  entity_id ,
                  header_id ,
                  line_id ,
                  order_source_id ,
                  original_sys_document_ref ,
                  original_sys_document_line_ref ,
                  orig_sys_shipment_ref ,
                  change_sequence ,
                  source_document_type_id ,
                  source_document_id ,
                  source_document_line_id ,
                  attribute_code ,
                  creation_date ,
                  created_by ,
                  last_update_date ,
                  last_updated_by ,
                  last_update_login ,
                  program_application_id ,
                  program_id ,
                  program_update_date ,
                  process_activity ,
                  notification_flag ,
                  type ,
                  message_source_code ,
                  message_status_code ,
                  org_id
                )
                VALUES
                (
                  l_transaction_id ,
                  NULL
                  --     ,l_msg_data
                  ,
                  'LINE' ,
                  NULL ,
                  NULL ,
                  NULL ,
                  NULL ,
                  g_order_source_id ,
                  v_orig_sys_document_ref ,
                  NULL,-- p_batch_order.v_order_head (hi).orderlines (p).orderlineidsource ,
                  NULL ,
                  NULL ,
                  NULL ,
                  NULL ,
                  NULL ,
                  NULL ,
                  sysdate ,
                  g_user_id ,
                  sysdate ,
                  g_user_id ,
                  fnd_global.login_id ,
                  NULL ,
                  NULL ,
                  NULL ,
                  NULL ,
                  NULL ,
                  'ERROR' ,
                  'C' ,
                  'OPEN' ,
                  p_batch_order.v_order_head (hi).org_id
                );
              --
              BEGIN
                INSERT
                INTO oe_processing_msgs_tl
                  (
                    transaction_id ,
                    language ,
                    source_lang ,
                    message_text ,
                    created_by ,
                    creation_date ,
                    last_updated_by ,
                    last_update_date ,
                    last_update_login
                  )
                SELECT l_transaction_id ,
                  l.language_code ,
                  'US' ,
                  'Mixed Order Import not allowed' ,
                  g_user_id ,
                  sysdate ,
                  g_user_id ,
                  sysdate ,
                  fnd_global.login_id
                FROM fnd_languages l
                WHERE l.installed_flag IN ('I','B')
                AND language_code       = 'US'
                AND NOT EXISTS
                  (SELECT NULL
                  FROM oe_processing_msgs_tl t
                  WHERE t.transaction_id = l_transaction_id
                  AND t.language         = l.language_code
                  );
                --start defect 2891
                INSERT
                INTO oe_processing_msgs_tl
                  (
                    transaction_id ,
                    language ,
                    source_lang ,
                    message_text ,
                    created_by ,
                    creation_date ,
                    last_updated_by ,
                    last_update_date ,
                    last_update_login
                  )
                SELECT l_transaction_id ,
                  l.language_code ,
                  'N' ,
                  'Mixed Order Import ikke tillatt',
                  g_user_id ,
                  sysdate ,
                  g_user_id ,
                  sysdate ,
                  fnd_global.login_id
                FROM fnd_languages l
                WHERE l.installed_flag IN ('I','B')
                AND language_code       = 'N'
                AND NOT EXISTS
                  (SELECT NULL
                  FROM oe_processing_msgs_tl t
                  WHERE t.transaction_id = l_transaction_id
                  AND t.language         = l.language_code
                  );
                --end
              END;
              COMMIT;
            EXCEPTION
            WHEN OTHERS THEN
              p_status_code := g_code_error;
              xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Tax code should not be null' || g_program_loc || '> ::Contact your system administrator:: ' || v_batch_seq_no || sqlerrm );
              dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
            END;
          END IF;
          --end of code for defect 8003
          /* end defect 3310 */
        EXCEPTION
        WHEN OTHERS THEN
          p_status_code := g_code_error;
          xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled error in creation of order header: <' || g_program_loc || '> ::Contact your system administrator:: ' || v_batch_seq_no || sqlerrm );
          dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
          ROLLBACK;
        END;
        /* exception
        WHEN e_mixed_order THEN
        xxcu_log_pkg.log(p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Mixed Order Import not allowed ' || g_program_loc || ' ' || v_batch_seq_no || SQLERRM );
        p_status_code  := 2;
        p_error_message:='Mixed Order Import Not allowed';*/
      END;
      /* start CR 5027 */
      BEGIN
        SELECT COUNT(1)
        INTO ln_source_cnt
        FROM applsys.fnd_profile_options fpot,
          applsys.fnd_profile_option_values fpov
        WHERE profile_option_name    ='XXCU_KFS_ORDER_SOURCE'
        AND fpot.profile_option_id   =fpov.profile_option_id
        AND fpov.profile_option_value=p_batch_order.v_order_head (hi).order_source;
      EXCEPTION
      WHEN OTHERS THEN
        ln_source_cnt:=0;
      END;
      /* end CR 5027 */
      IF((upper(p_batch_order.v_order_head (hi).prepayment_flag)='Y' AND upper(p_batch_order.v_order_head(hi).order_type)='REGULAR') OR ln_source_cnt>0) THEN-- CR 5027
        /* start defect 3921 */
        mo_global.set_policy_context('S',p_batch_order.v_order_head (hi).org_id);
        SELECT user_id INTO g_user_id FROM fnd_user WHERE user_name='OPERATIONS';
        SELECT responsibility_id,
          application_id
        INTO ln_resp_id,
          ln_app_id
        FROM fnd_responsibility_vl
        WHERE responsibility_name = 'PB OM Super User';
        fnd_global.apps_initialize(g_user_id, ln_resp_id, ln_app_id);
        ln_req_id := fnd_request.submit_request ( application => 'XXCU' , program => 'XXCU_OE_PREPROCESSOR' , argument1 => p_batch_order.v_order_head (hi).org_id--FND_PROFILE.VALUE('ORG_ID')
        ,argument2 => p_batch_order.v_order_head (hi).order_source                                                                                               -- Order Source
        ,argument3 => p_batch_order.v_order_head (hi).order_reference                                                                                            --CR 4296                                                                                               -- Order Reference
        );
        COMMIT;
        WHILE (lv_status<>'C' AND lv_phase<>'C')
        LOOP
          BEGIN
            SELECT phase_code,
              status_code
            INTO lv_phase,
              lv_status
            FROM fnd_concurrent_requests
            WHERE request_id=ln_req_id;
          EXCEPTION
          WHEN OTHERS THEN
            lv_status:=NULL;
            lv_phase :=NULL;
          END;
        END LOOP;
        lv_status:='X';
        lv_phase :='Z';
        /* end */
        submit_order_import_request (p_batch_order.batchid,p_batch_order.v_order_head (hi).order_reference,g_org_id);
        xxcu_common_log_rt.msglog ('INFO', 'Submit Order Import ', 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
      END IF;
    END LOOP;
    g_program_loc   := 'Reconciliation';
    v_finish_status := false;
    dbms_output.put_line('before reconcile:'||v_orderline_count);
    --  reconciliation (p_batch_order.batchid, p_batch_order.messagesequenceno, p_batch_order.Batchnototal, v_orderline_count, p_batch_order.batchdate, p_batch_order.batchdetailcount,v_max_date, v_min_date, p_batch_order.messagedetailcount,v_num_orderheads, v_num_orderlines, v_finish_status, v_status_function );
    ---------version 1.15-----
    reconciliation (p_batch_order.batchid, p_batch_order.messagesequenceno, p_batch_order.batchnototal, v_orderline_count, p_batch_order.batchdate,p_batch_order.batchdetailcount,-- p_batch_order.MessageDetailCount,
    v_max_date, v_min_date, p_batch_order.messagedetailcount,v_num_orderheads, v_num_orderlines,p_batch_order.numberofmessages, v_finish_status, v_status_function );
    --reconciliate number of orders received
    -- dbms_output.put_line(v_finish_status);
    IF v_finish_status THEN
      --IF (v_finish_status AND (lv_wrong_price<>'Y' AND lv_wrong_tax<>'Y' AND lv_wrong_cust<>'Y' AND lv_wrong_ref<>'Y' AND lv_wrong_ret_data <>'Y')) THEN
      dbms_output.put_line('Submit request');
      update_batch_status(p_batch_order.batchid, 'ORDER IMPORT');
      g_program_loc := 'BookOrder';
      dbms_output.put_line('g_org_id:'||g_org_id);
      ln_org_id:=g_org_id;
      /*start version 1.28 Defect 2454 */
      --submit_order_import_request (p_batch_order.batchid,g_org_id);
      /* end defect 2454 */
      --how many lines did not import?
      SELECT COUNT (*)
      INTO v_errors
      FROM oe_lines_iface_all
      WHERE error_flag          = 'Y'
      AND TRUNC (creation_date) = TRUNC (sysdate)
      AND order_source_id       = g_order_source_id;
      IF v_errors               > 0 THEN
        xxcu_log_pkg.log (p_log_level => fnd_log.level_event, p_module_name => gpackagename, p_log_text => 'Info: a few lines(' || v_errors || ') the import has failed, will move the lines again feilde over head and import the remaining' );
      END IF;
      update_batch_status(p_batch_order.batchid, 'FINISHED');
    END IF;
    /* version 1.23 CR 1899 */
    BEGIN
      /* version 1.24 CR 1929 */
      FOR rec_head IN 1 .. p_batch_order.v_order_head.count
      LOOP
        /*Start version Kavita 1.30 CR 2499*/
        /* BEGIN
        SELECT header_id
        INTO ln_header_id
        FROM oe_order_headers_all
        WHERE orig_sys_document_ref=p_batch_order.v_order_head (rec_head).Order_Reference;
        EXCEPTION
        WHEN OTHERS THEN
        ln_header_id:=NULL;
        END; */
        /*End version Kavita 1.30 CR 2499*/
        --xxcu_common_log_rt.msglog ( msgtype => xxcu_intf_sys.gc_rlevel_info, msgtext => 'Going To print <' || SQLERRM, msgcode => 1117, usermsg => '1', -- not sure what this is, maps to user_id in log table
        -- msgsrc => 'XXCU_INTERFACE_SPEC_URL' , msgjobid => 10054);
        --xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Going To print <' || SQLERRM );
        --xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Excpetion occured before p_batch_order.v_order_head (rec_head).InvSpecURL.count <'|| SQLERRM );
        FOR rec_spec_url IN 1.. p_batch_order.v_order_head (rec_head).invspecurl.count
        LOOP
          -- xxcu_common_log_rt.msglog ( msgtype => xxcu_intf_sys.gc_rlevel_info, msgtext => 'Excpetion occured before inserting in SPEC_URL TBL '||p_batch_order.v_order_head (rec_head).Order_Reference || SQLERRM, msgcode => 1117, usermsg => '1', -- not sure what this is, maps to user_id in log table
          --msgsrc => 'XXCU_INTERFACE_SPEC_URL' , msgjobid => 10054);
          --xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Excpetion occured before inserting in SPEC_URL TBL <' || v_batch_seq_no || SQLERRM );
          INSERT
            /* Start version Kavita 1.30 CR 2499*/
          INTO xxcu.xxcu_interface_spec_url VALUES
            (
              /* start defect 3218 */
              --g_order_number,                                        --added by kavita version 1.30
              NVL(p_batch_order.v_order_head (rec_head).printed_order_number,g_order_number),
              /* end defect 3218 */
              p_batch_order.v_order_head (rec_head).order_reference, --ORIG_SYS_DOCUMENT_REF
              p_batch_order.v_order_head (rec_head).order_source,    --ORDER_SOURCE
              p_batch_order.v_order_head (rec_head).invspecurl (rec_spec_url).attachment_name,
              p_batch_order.v_order_head (rec_head).invspecurl (rec_spec_url).link_url,
              p_batch_order.v_order_head (rec_head).invspecurl (rec_spec_url).link_label,
              p_batch_order.v_order_head (rec_head).invspecurl (rec_spec_url).mime_type,
              'N'
            );
          -- XXCU_INVOICE_ATTACH_SEQ.nextval,
          -- ln_header_id,
          --source
          -- p_batch_order.v_order_head (rec_head).InvSpecURL (rec_spec_url).ATTACHMENT_NAME,
          --p_batch_order.v_order_head (rec_head).InvSpecURL (rec_spec_url).LINK_URL,
          -- p_batch_order.v_order_head (rec_head).InvSpecURL (rec_spec_url).LINK_LABEL,
          --p_batch_order.v_order_head (rec_head).InvSpecURL (rec_spec_url).MIME_TYPE
          -- );
          /*End version Kavita 1.30 CR 2499*/
          COMMIT;
        END LOOP;
      END LOOP;
      --------------------------------------------------------------------------------------------------------------------------------
    EXCEPTION
    WHEN OTHERS THEN
      p_status_code := 2;
      xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error while inserting records into XXCU_INTERFACE_SPEC_URL <' || g_program_loc || '> ::Contact your system administrator:: ' || sqlerrm );
      p_error_message:='Error while inserting records into XXCU_INTERFACE_SPEC_URL '||sqlerrm||dbms_utility.format_error_backtrace;
      xxcu_common_log_rt.msglog ( msgtype => xxcu_intf_sys.gc_rlevel_info, msgtext => 'In Error ' || sqlerrm, msgcode => 1117, usermsg => '1', -- not sure what this is, maps to user_id in log table
      msgsrc => 'XXCU_INTERFACE_SPEC_URL' , msgjobid => 10054);
      dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
    END;
    -----------------------------------------------------------------------------------------
    /* start version 1.28 CR 2499 */
    /*  BEGIN
    SELECT COUNT(ooh.header_id)
    INTO ln_hold
    FROM oe_order_headers_all ooh,
    hz_cust_accounts hca,
    oe_order_lines_all ool,
    hz_parties hp,
    oe_order_holds_all hld,
    oe_hold_sources_all ohs,
    oe_hold_definitions ohd
    WHERE 1           =1
    AND hp.PARTY_ID   =hca.PARTY_ID
    AND ooh.header_id =ool.header_id
    AND ooh.org_id    =ool.org_id
    /* Version 1.2 */
    /*  AND ooh.org_id           =ln_org_id
    AND ooh.global_attribute1=p_batch_order.batchid
    AND hca.cust_account_id  =ooh.sold_to_org_id
    AND hld.header_id        = ooh.header_id
    -- and ooh.attribute15 is null
    AND hld.hold_release_id IS NULL
    AND ohs.hold_source_id   = hld.hold_source_id
    AND ohd.hold_id          = ohs.hold_id
    --             and ooh.ordeR_number=704
    AND ohd.name='Credit Check Failure';
    --Version 1.16
    /* SELECT fpovv.profile_option_value
    INTO lv_email
    FROM FND_PROFILE_OPTIONS_VL fpov,
    FND_PROFILE_OPTION_VALUES fpovv
    WHERE fpov.profile_option_name='XXCU_ONT_EMAIL_CREDIT_FAIL_NOTIF'
    AND fpovv.profile_option_id   =fpov.profile_option_id;
    submit_notification_report(p_batch_order.batchid,lv_email,g_org_id);*/
    /*  IF(ln_hold>0) THEN
    submit_release_hold_report(p_batch_order.batchid,ln_org_id);
    END IF;
    EXCEPTION
    WHEN OTHERS THEN
    p_status_code := g_code_error;
    xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error in Release hold procedure<' || g_program_loc || '> ::Contact your system administrator:: ' || SQLERRM );
    dbms_output.put_line( SQLERRM||dbms_utility.format_error_backtrace);
    END;
    */
    g_program_loc := 'Finished';
    xxcu_log_pkg.log (p_log_level => fnd_log.level_procedure, p_module_name => gpackagename, p_log_text => 'Info: Processing Time; ' || v_batch_seq_no || '; ' || trim (TO_CHAR ((sysdate - v_startdate) * 1440, '999990.99')) || '; minutes on the ' || v_headers_count || '; heads and ' || v_orderline_count || '; lines.' );
    --  COMMIT;
  EXCEPTION
  WHEN e_error THEN
    xxcu_log_pkg.log(p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Untreated errors in order imports: ' || g_program_loc || ' ' || v_batch_seq_no || sqlerrm );
    p_status_code  := 2;
    p_error_message:='Duplicate Batch ID or Untreated errors in order imports';
  WHEN e_invalid_source THEN
    xxcu_log_pkg.log(p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Invalid or Null Order Source ID' || g_program_loc || ' ' || v_batch_seq_no || sqlerrm );
    p_status_code  := 2;
    p_error_message:='Invalid or Null Order Source ID';
    -- x_error_message := 'Error in XXCU_ONT_CREATE_ORDER_PKG';
    /* WHEN e_wrong_cust THEN
    xxcu_log_pkg.log(p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Invalid or null customer ' || g_program_loc || ' ' || v_batch_seq_no || SQLERRM );
    p_status_code  := 2;
    p_error_message:='Invalid or null customer';*/
  WHEN OTHERS THEN
    dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
    update_batch_status(p_batch_order.batchid, 'ERROR');
    p_status_code := g_code_warning;
    xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Untreated errors in order imports: ' || g_program_loc || ' ' || v_batch_seq_no || sqlerrm );
    p_error_message:=sqlerrm||dbms_utility.format_error_backtrace;
    ROLLBACK;
    --  dbms_output.put_line(x_error_message|| dbms_utility.format_error_backtrace);
    -- p_error_message := p_error_message || '  '|| sqlerrm;
  END;
/* start wave 2 modification */
/* ----------------------------------------------------------------------------------------
* create_lm_order
*
*   procedure     : create_lm_order
*   description   : This procedure is used to insert shipment data for LM into custom tables
*   scope         : public
*   arguments
*        in                    : p_batch_order : Batch details
: p_shipment_order : Shipment Details
*
*
*        in/out                : NA
*        out                   : p_status_code : Interface status code
*                              : p_error_message : Error Message if any
*
*  Date               Author              Description
*  -----------        -------------        -------------------------------------------------------
*  28.09.2017        Vedangi Bagwe          Created
----------------------------------------------------------------------------------------*/
  PROCEDURE create_lm_order
    (
      p_batch_order    IN xxcu_ont_create_order_parser.batch_order_rec,
      p_shipment_order IN xxcu_ont_create_order_parser.shipment_order_rec,
      p_org_id         IN NUMBER,
      p_status_code OUT NUMBER,
      p_error_message OUT VARCHAR2
    )
  AS
    lv_shipment_head xxcu_ont_create_order_parser.shipment_head :=xxcu_ont_create_order_parser.shipment_head
    (
    )
    ;
    lv_packagelines xxcu_ont_create_order_parser.package_lines:= xxcu_ont_create_order_parser.package_lines ( ) ;
    lv_pricelines xxcu_ont_create_order_parser.price_lines    := xxcu_ont_create_order_parser.price_lines();
    lv_terminal xxcu_ont_create_order_parser.terminal_lines   := xxcu_ont_create_order_parser.terminal_lines();-- CR 4419
    ln_errors          NUMBER;
    lv_finish_status   BOOLEAN;
    lv_status_function NUMBER := g_code_ok;
    ln_org_id          NUMBER;
    lv_success         VARCHAR2(200);
  BEGIN
    lv_shipment_head := xxcu_ont_create_order_parser.shipment_head();
    lv_packagelines  := xxcu_ont_create_order_parser.package_lines();
    lv_pricelines    :=xxcu_ont_create_order_parser.price_lines();
    lv_terminal      :=xxcu_ont_create_order_parser.terminal_lines();-- CR 4419
    g_org_id         :=p_org_id;
    lv_shipment_head.extend(1);
    lv_packagelines.extend;
    lv_pricelines.extend;
    lv_terminal.extend;--defect 4583
    /* start defect 4001 */
    BEGIN
      SELECT user_id INTO g_user_id FROM fnd_user WHERE user_name='OPERATIONS';
    EXCEPTION
    WHEN OTHERS THEN
      g_user_id:=NULL;
    END;
    /* end */
    FOR hi IN 1 .. p_batch_order.lv_shipment_head.count
    LOOP
      xxcu_common_log_rt.msglog ('INFO', 'Shipment Header'||p_batch_order.lv_shipment_head.count, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
      FOR ll IN 1 .. p_batch_order.lv_shipment_head ( hi ) .lv_terminal.count
      LOOP
        xxcu_common_log_rt.msglog ('INFO', 'Terminal Header'||p_batch_order.lv_shipment_head ( hi ) .lv_terminal.count, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
        BEGIN
          INSERT
          INTO xxcu_oe_shipment_spec VALUES
            (
              xxcu_oe_shipment_id_s.nextval,
              p_batch_order.lv_shipment_head(hi).customer_num,
              p_batch_order.lv_shipment_head(hi).trans_curr_code,
              NULL,
              NULL ,
              NULL ,
              NULL ,
              p_batch_order.lv_shipment_head(hi).ordered_date ,
              p_batch_order.lv_shipment_head(hi).payment_provider_trans_id ,
              p_batch_order.lv_shipment_head(hi).reserved_amount ,
              p_batch_order.lv_shipment_head(hi).source ,
              p_batch_order.lv_shipment_head(hi).sender_reference ,
              p_batch_order.lv_shipment_head(hi).shipment_id_num ,
              p_batch_order.lv_shipment_head(hi).returned ,
              p_batch_order.lv_shipment_head(hi).freight_cal_wt ,
              p_batch_order.lv_shipment_head(hi).price_zone ,
              p_batch_order.lv_shipment_head(hi).weight_group ,
              p_batch_order.lv_shipment_head(hi).num_of_pkgs ,
              -- p_batch_order.lv_shipment_head(hi).department , --defect 3702
              p_batch_order.lv_shipment_head(hi).sender_name ,
              p_batch_order.lv_shipment_head(hi).ship_from_addr1 ,
              p_batch_order.lv_shipment_head(hi).ship_from_addr2 ,
              p_batch_order.lv_shipment_head(hi).ship_from_postal_code ,
              p_batch_order.lv_shipment_head(hi).ship_from_city ,
              p_batch_order.lv_shipment_head(hi).ship_from_country ,
              p_batch_order.lv_shipment_head(hi).receiver_reference ,
              p_batch_order.lv_shipment_head(hi).receiver_name ,
              p_batch_order.lv_shipment_head(hi).ship_to_addr1 ,
              p_batch_order.lv_shipment_head(hi).ship_to_addr2 ,
              p_batch_order.lv_shipment_head(hi).ship_to_postal_code ,
              p_batch_order.lv_shipment_head(hi).ship_to_city ,
              p_batch_order.lv_shipment_head(hi).ship_to_country ,
              p_batch_order.lv_shipment_head(hi).delivery_point ,
              p_batch_order.lv_shipment_head(hi).delivery_addr1 ,
              p_batch_order.lv_shipment_head(hi).delivery_addr2 ,
              p_batch_order.lv_shipment_head(hi).delivery_postal_code ,
              p_batch_order.lv_shipment_head(hi).delivery_city ,
              p_batch_order.lv_shipment_head(hi).delivery_country ,
              p_batch_order.lv_shipment_head(hi).volume_factor ,
              p_batch_order.lv_shipment_head(hi).shipment_sum ,
              p_batch_order.lv_shipment_head(hi).message_to_cust ,
              NULL ,
              p_batch_order.lv_shipment_head(hi).postal_code_to ,
              p_batch_order.lv_shipment_head(hi).postal_code_from ,
              p_batch_order.lv_shipment_head(hi).po_reference ,
              p_batch_order.lv_shipment_head(hi).agreement_name ,
              g_user_id ,
              sysdate ,
              g_user_id ,
              sysdate,
              g_org_id,
              p_batch_order.batchid,
              NULL,
              NULL,                                                            --defect 4205
              p_batch_order.lv_shipment_head(hi).department,                   --defect 3947
              p_batch_order.lv_shipment_head(hi).lv_terminal(ll).terminal_name,-- CR 4419
              p_batch_order.lv_shipment_head(hi).lv_terminal(ll).terminal_id   -- CR 4419
              ,
              NULL, -- Defect 5130
              NULL,
              NULL--worker added for parallel processing of LM
            );
        EXCEPTION
        WHEN OTHERS THEN
          --xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the xxcu_invoice_spec_p > ::Contact your system administrator:: ' || SQLERRM );
          xxcu_common_log_rt.msglog ('ERR', 'Error Inserted in Spec Header'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
          p_status_code  := 2;
          p_error_message:='Error in create lm order procedure'||sqlerrm||dbms_utility.format_error_backtrace;
          ROLLBACK;
        END;
      END LOOP;
      FOR i IN 1 .. p_batch_order.lv_shipment_head
      (
        hi
      )
      .lv_packagelines.count
      LOOP
        BEGIN
          INSERT
          INTO xxcu_oe_package_spec VALUES
            (
              xxcu_oe_package_id_s.nextval,
              p_batch_order.lv_shipment_head(hi).lv_packagelines(i).cargo_id_num,
              p_batch_order.lv_shipment_head(hi).lv_packagelines(i).weight,
              p_batch_order.lv_shipment_head(hi).lv_packagelines(i).volume,
              xxcu_oe_shipment_id_s.currval,
              p_batch_order.lv_shipment_head(hi).lv_packagelines(i).volume_weight,
              p_batch_order.lv_shipment_head(hi).lv_packagelines(i).received_time,
              sysdate ,
              g_user_id ,
              sysdate ,
              g_user_id,
              NULL
            );
        EXCEPTION
        WHEN OTHERS THEN
          --xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the xxcu_invoice_spec_p > ::Contact your system administrator:: ' || SQLERRM );
          xxcu_common_log_rt.msglog ('ERR', 'Error Inserted in PAckage Lines'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
          p_status_code  := 1;
          p_error_message:='Error in create lm order procedure xxcu_oe_package_spec'||sqlerrm||dbms_utility.format_error_backtrace;
          ROLLBACK;
        END;
      END LOOP;
      FOR l IN 1 .. p_batch_order.lv_shipment_head
      (
        hi
      )
      .lv_pricelines.count
      LOOP
        BEGIN
          INSERT
          INTO xxcu_oe_priceline_spec VALUES
            (
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).item_number,
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).ordered_qty ,
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).unit_list_price ,
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).unit_net_price ,
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).price_adjs_per_unit ,
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).tax_code ,
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).tax ,
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).tax_value ,
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).country_from ,
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).country_to ,
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).disc_breakup_info ,
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).quantity_uom ,
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).product_code ,
              NULL,--defect 3702
              xxcu_oe_shipment_id_s.currval,
              NULL ,
              NULL ,
              NULL,
              sysdate ,
              xxcu_oe_pricelist_id_s.nextval ,
              g_user_id ,
              sysdate ,
              g_user_id ,
              NULL ,
              NULL,
              NULL,
              p_batch_order.lv_shipment_head(hi).lv_pricelines(l).department,--defect 3702
              NULL
            );
        EXCEPTION
        WHEN OTHERS THEN
          --xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the xxcu_invoice_spec_p > ::Contact your system administrator:: ' || SQLERRM );
          xxcu_common_log_rt.msglog ('ERR', 'Error Inserted in Price Lines'||sqlerrm, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
          p_status_code  := 2;
          p_error_message:='Error in create lm order procedure XXCU_OE_PRICELIST_SPEC'||sqlerrm||dbms_utility.format_error_backtrace;
        END;
        lv_success:='TRUE';
      END LOOP;
    END LOOP;
    COMMIT;
    IF(lv_success       ='TRUE') THEN
      g_program_loc    := 'Reconciliation';
      lv_finish_status := false;
      reconciliation (p_batch_order.batchid, p_batch_order.messagesequenceno, p_batch_order.batchnototal, p_batch_order.messagedetailcount, p_batch_order.batchdate,p_batch_order.batchdetailcount,-- p_batch_order.MessageDetailCount,
      NULL, NULL, p_batch_order.messagedetailcount,NULL, NULL,p_batch_order.numberofmessages, lv_finish_status, lv_status_function );
      --reconciliate number of orders received
      -- dbms_output.put_line(v_finish_status);
      IF lv_finish_status THEN
        --IF (v_finish_status AND (lv_wrong_price<>'Y' AND lv_wrong_tax<>'Y' AND lv_wrong_cust<>'Y' AND lv_wrong_ref<>'Y' AND lv_wrong_ret_data <>'Y')) THEN
        update_batch_status(p_batch_order.batchid, 'ORDER IMPORT');
        g_program_loc := 'BookOrder';
        ln_org_id     :=g_org_id;
        /*start version 1.28 Defect 2454 */
        --submit_order_import_request (p_batch_order.batchid,g_org_id);
        /* end defect 2454 */
        --how many lines did not import?
        SELECT COUNT (*)
        INTO ln_errors
        FROM oe_lines_iface_all
        WHERE error_flag          = 'Y'
        AND TRUNC (creation_date) = TRUNC (sysdate)
        AND order_source_id       = g_order_source_id;
        IF ln_errors              > 0 THEN
          xxcu_log_pkg.log (p_log_level => fnd_log.level_event, p_module_name => gpackagename, p_log_text => 'Info: a few lines(' || ln_errors || ') the import has failed, will move the lines again feilde over head and import the remaining' );
        END IF;
        update_batch_status(p_batch_order.batchid, 'FINISHED');
      END IF;
    END IF;
  END;
/* end wave 2 modification */
/* ----------------------------------------------------------------------------------------
* createorderhead_interface
*
*   Function      : createorderhead_interface
*   description   : creates the ordreheader, called from the function createorder. Uses necesary fields to create the header.
*   scope         : public
*   arguments
*        in                    : p_order_head_rec : Order Header details
*                                p_batch_id  : Batch Id
*
*        in/out                : p_status_code : Interface status code
*                                p_num_orderheaders : Number of order headers inserted
*        out                   : p_error_message : Error Message if any
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  FUNCTION createorderhead_interface(
      p_order_head_rec   IN xxcu_ont_create_order_parser.orderhead_rec,
      p_batch_id         IN VARCHAR2,
      p_status_code      IN OUT NUMBER,
      p_num_orderheaders IN OUT NUMBER,
      p_amount           IN NUMBER,
      p_error_message OUT VARCHAR2 )
    RETURN VARCHAR2
  AS
    l_operation             VARCHAR2 ( 50 ) ;
    l_header_id             NUMBER;
    l_customer_id           NUMBER;
    l_orig_sys_document_ref VARCHAR2 (50);
    l_version_number        NUMBER;
    l_num_iface_headers     NUMBER;
    l_conversion_date       DATE;
    l_log_label             VARCHAR2(200);
    l_payment_term          NUMBER;
    v_curr_code             VARCHAR2(100);
    l_message               VARCHAR2(2000);
    k_func_name             VARCHAR2(100):='createorderhead_interface';
    l_conversion_type       VARCHAR2 (50);
    v_context               NUMBER;
    v_order_type_id         NUMBER;
    v_salesrep_id           NUMBER;
    v_bsa_num               NUMBER;
    lv_new_curr_code        VARCHAR2(100);
    g_user_id               NUMBER;
    lv_org_name             VARCHAR2(100);
    lv_attribute1           VARCHAR2(150);
    lv_attribute2           VARCHAR2(150);
    lv_attribute15          VARCHAR2(150);
    lv_attribute14          VARCHAR2(150);
    lv_curr_code            VARCHAR2(100);
    lv_pricing_date         DATE;
    ln_doc_seq_id           NUMBER;
    lv_trans_type           VARCHAR2(240);
    lv_post_fix             VARCHAR2(240); -- changes for CR#C-06068
    lv_type                 VARCHAR2(80);
    --ln_order_number         NUMBER;  /*Version 1.30 Kavita CR#2499 declared globally with name g_order_number*/
    c                  NUMBER:=0;
    lv_receipt_method  VARCHAR2(60);
    lv_return_status   VARCHAR2(50);
    ln_msg_count       NUMBER;
    ln_receipt_num     VARCHAR2(2000);--:='88569443621';
    lv_msg_data        VARCHAR2(2000);
    ln_payment_set_id  NUMBER;
    ln_amount          NUMBER;
    ln_resp_id         NUMBER;
    ln_app_id          NUMBER;
    ln_cash_receipt_id NUMBER;
    lv_rec_curr_code   VARCHAR2(25);
    lv_attribute5      VARCHAR2(240);
    lv_attribute3      VARCHAR2(240);
    lv_attribute4      VARCHAR2(240);---added by vijay on 27-jun-2017 for defect 3528
    lv_attribute18     VARCHAR2(240);
    l_application_ref_type ar_receivable_applications.application_ref_type%type;
    ln_application_ref_id ar_receivable_applications.application_ref_id%type;
    ln_application_ref_num ar_receivable_applications.application_ref_num%type;
    ln_sec_application_ref_id ar_receivable_applications.secondary_application_ref_id%type;
    ln_receivable_application_id ar_receivable_applications.receivable_application_id%type;
    ln_bank_account_id             NUMBER;
    ln_remit_bank                  NUMBER;
    lv_approval_code               VARCHAR2(2000);
    lv_payment_response_error_code VARCHAR2(2000);
    ln_payment_server_order_num ar_cash_receipts.payment_server_order_num%type;
    lv_payment_type_code VARCHAR2(240);
    lv_flag              VARCHAR2(10);
    lv_attr4             VARCHAR2(240);
    ln_cnt_desc          NUMBER:=0;
    lv_proj_ref          VARCHAR2(240);
    lv_proj_flag         VARCHAR2(240);
    lv_proj_flag_party   VARCHAR2(240);
    lv_proj_flag_acc     VARCHAR2(240);
    lv_proj_flag_site    VARCHAR2(240);
    lv_proj_flag_bsa     VARCHAR2(240);
    lv_context           VARCHAR2(240);
    lv_attr2             VARCHAR2(240);
    lv_attr6             VARCHAR2(240);
    lv_attr7             VARCHAR2(240);
    lv_attr8             VARCHAR2(240);
    lv_attr13            VARCHAR2(240);
    lv_attr16            VARCHAR2(240);
    lv_attribute6        VARCHAR2(240);
    lv_attribute7        VARCHAR2(240);
    lv_attribute8        VARCHAR2(240);
    lv_attribute13       VARCHAR2(240);
    lv_attribute16       VARCHAR2(240);
  BEGIN
    c                 :=0;
    p_num_orderheaders:=0;
    lv_new_curr_code  :=NULL;
    g_order_number    :=NULL;
    xxcu_common_log_rt.msglog ('INFO', 'Inside Create Head ', 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
    /*Version 1.30 Kavita CR#2499 */
    BEGIN
      SELECT name
      INTO lv_org_name
      FROM hr_operating_units
      WHERE organization_id=p_order_head_rec.org_id;
      SELECT userid
      INTO g_user_id
      FROM xxcu_int_init_app_logons
      WHERE procedure_name   =upper('XXCU_ONT_CREATE_ORDER_PKG')
      AND operating_unit_name=lv_org_name;
    EXCEPTION
    WHEN OTHERS THEN
      g_user_id :=fnd_global.user_id;
    END;
    IF(p_order_head_rec.order_source='NO002_RB' AND upper(p_order_head_rec.order_type)='RETURN') THEN
      BEGIN
        SELECT cust_account_id
        INTO l_customer_id
        FROM hz_cust_accounts hca,
          oe_order_headers_all ooha
        WHERE ooha.orig_sys_document_ref=p_order_head_rec.return_order_reference
        AND ooha.sold_to_org_id         =hca.cust_account_id
        AND ooha.org_id                 =p_order_head_rec.org_id;
      EXCEPTION
      WHEN OTHERS THEN
        l_customer_id:=NULL;
      END;
    ELSE
      l_customer_id := getcustomer_id (p_order_head_rec.customer_number);
    END IF;
    xxcu_common_log_rt.msglog ('INFO', 'l_customer_id '||l_customer_id, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
    --creates an unique orig_sys_document_ref
    --Commenting out as we are receiving the orig_sys_doc_ref (order ref ) from source.
    --l_orig_sys_document_ref := p_order_head_rec.order_source || '-'||p_batch_id|| '-' || p_order_head_rec.customer_number || '-' || TO_CHAR (p_order_head_rec.ordereddate, 'ddmmyy') ;
    l_orig_sys_document_ref := p_order_head_rec.order_reference;
    xxcu_common_log_rt.msglog ('INFO', 'l_orig_sys_document_ref '||l_orig_sys_document_ref, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
    /* Version 1.9 artf4774289 */
    /* IF upper(p_order_head_rec.currency_code) <>'NOK' THEN
    l_conversion_date                      := p_order_head_rec.conversion_date;
    ELSE
    l_conversion_date := NULL;
    END IF;
    */
    IF p_order_head_rec.pricing_date IS NOT NULL THEN
      l_conversion_type              := 'Corporate';
    ELSE
      l_conversion_type := NULL;
    END IF;
    xxcu_common_log_rt.msglog ('INFO', 'l_conversion_type '||l_conversion_type, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
    BEGIN
      SELECT gso.currency_code
      INTO lv_curr_code
      FROM hr_operating_units hou,
        gl_sets_of_books gso
      WHERE gso.set_of_books_id=hou.set_of_books_id
      AND hou.organization_id  =p_order_head_rec.org_id;
    EXCEPTION
    WHEN OTHERS THEN
      lv_curr_code:=NULL;
    END;
    IF (upper(p_order_head_rec.order_type)='RETURN' AND lv_curr_code<>NVL(get_currencycode(getcustomer_id (p_order_head_rec.customer_number),p_order_head_rec.org_id),p_order_head_rec.currency_code) AND p_order_head_rec.payment_provider_trans_id IS NULL) THEN
      BEGIN
        SELECT pricing_date
        INTO lv_pricing_date
        FROM oe_order_headers_all
        WHERE orig_sys_document_ref=p_order_head_rec.return_order_reference
        AND org_id                 = p_order_head_rec.org_id; --added org_id defect#2848
      EXCEPTION
      WHEN OTHERS THEN
        lv_pricing_date:=NULL;
        xxcu_common_log_rt.msglog ('INFO', 'lv_pricing_date '||lv_pricing_date||sqlerrm, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
      END;
    ELSE
      /* Version 1.21 defect 1371*/
      IF(lv_curr_code  <>NVL(get_currencycode(getcustomer_id (p_order_head_rec.customer_number),p_order_head_rec.org_id),p_order_head_rec.currency_code)) THEN
        lv_pricing_date:=p_order_head_rec.pricing_date;
      ELSE
        lv_pricing_date:=NULL;
      END IF;
    END IF;
    IF(get_currencycode(getcustomer_id (p_order_head_rec.customer_number),p_order_head_rec.org_id) IS NOT NULL AND p_order_head_rec.payment_provider_trans_id IS NULL AND p_order_head_rec.currency_code=lv_curr_code) THEN
      lv_new_curr_code                                                                             :=get_currencycode(getcustomer_id (p_order_head_rec.customer_number),p_order_head_rec.org_id);
    END IF;
    -- code changes for 1.65 starts here
    IF upper(p_order_head_rec.order_type) = 'RETURN' THEN -- code changes for 1.65
      BEGIN
        SELECT transactional_curr_code
        INTO lv_new_curr_code
        FROM oe_order_headers_all
        WHERE orig_sys_document_ref=p_order_head_rec.return_order_reference
        AND org_id                 = p_order_head_rec.org_id; --added org_id defect#2848
      EXCEPTION
      WHEN OTHERS THEN
        lv_new_curr_code :=NULL;
      END;
    END IF;
    -- code changes for 1.65 emds here
    ---end------
    dbms_output.put_line('l_orig_sys_document_ref'|| l_orig_sys_document_ref);
    BEGIN
      --Check whether record already exists in interface
      SELECT COUNT (1)
      INTO l_num_iface_headers
      FROM oe_headers_iface_all
      WHERE orig_sys_document_ref = l_orig_sys_document_ref
      AND order_source_id         = g_order_source_id;
    EXCEPTION
    WHEN no_data_found THEN
      dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
      l_num_iface_headers := 0;
    END;
    -- x_status := 1;
    -- x_msg    := l_message;
    xxcu_log_pkg.log(xxcu_log_pkg.gk_exception, k_log_module_prefix || '.' || k_func_name || '.' || l_num_iface_headers , l_num_iface_headers, false);
    -- IF l_num_iface_headers = 0 THEN
    xxcu_log_pkg.log (p_log_level => fnd_log.level_statement, p_module_name => gpackagename, p_log_text => 'IN if l_num_iface_headers = 0' );
    /* Start change for Return order added org_id*/
    l_header_id := getheader_id ( p_order_head_rec.customer_number,p_order_head_rec.return_order_reference,p_order_head_rec.org_id ,l_version_number);
    /* End change for Return order added org_id*/
    xxcu_log_pkg.log (p_log_level => fnd_log.level_statement, p_module_name => gpackagename, p_log_text => 'createorderhead_interface: l_header_id:' || l_header_id );
    /*IF l_header_id       IS NULL THEN*/
    l_operation        := 'INSERT'; --oe_globals.g_opr_insert;
    p_num_orderheaders := p_num_orderheaders + 1;
    /*   --Addes pricing attributes
    ELSE
    l_operation := oe_globals.g_opr_update;
    END IF;*/
    xxcu_log_pkg.log (p_log_level => fnd_log.level_statement, p_module_name => gpackagename, p_log_text => 'Info: Inserted into oe_headers_iface_all ( ' || p_order_head_rec.customer_number || ') ' );
    -- Removed the entry of hard-coded payment_term_id - to retrieve the row customer
    -- Removed accounting_rule_id and invoicing_rule_id
    dbms_output.put_line('INSIDE INSERT HEADER HEADERID'|| l_header_id);
    dbms_output.put_line('l_customer_id'|| l_customer_id);
    ---start 10.03.2016
    -----added by vedangi-------------------
    /* BEGIN
    IF(upper(p_order_head_rec.order_type) ='REGULAR') THEN
    SELECT ott.transaction_type_id
    INTO v_order_type_id
    FROM
    --oe_order_headers_all ooha,
    oe_transaction_types_all ott,
    RA_CUST_TRX_TYPES_ALL rctt
    WHERE 1                       =1 --and ott.transaction_type_id=ooha.order_type_id
    AND ott.org_id                =p_order_head_rec.org_id
    AND ott.transaction_type_code ='ORDER'
    /* AND upper(rctt.name) LIKE '%'
    ||upper(p_order_head_rec.order_source)
    ||'%'----Added to resolve Defect # 140
    ---commented for CR 1202
    AND upper(ott.attribute1)= upper(p_order_head_rec.order_source) ---added for CR1202
    --  AND ott.transaction_type_id=1161--------need to remove just for testing used
    AND ott.order_category_code    ='ORDER'
    AND (ott.end_date_active      IS NULL
    OR TRUNC(ott.end_date_active) >=TRUNC(sysdate))
    AND RCTT.CUST_TRX_TYPE_ID      =OTT.CUST_TRX_TYPE_ID;
    ELSE
    SELECT ott.transaction_type_id
    INTO v_order_type_id
    FROM
    --oe_order_headers_all ooha,
    oe_transaction_types_all ott,
    RA_CUST_TRX_TYPES_ALL rctt
    WHERE 1                      =1 --and ott.transaction_type_id=ooha.order_type_id
    AND ott.org_id               =p_order_head_rec.org_id
    AND ott.transaction_type_code='ORDER'
    /*     AND upper(rctt.name) LIKE '%'
    ||upper(p_order_head_rec.order_source)
    ||'%'----Added to resolve Defect # 140
    -- commented for CR1202
    AND upper(ott.attribute1)      = upper(p_order_head_rec.order_source) ---added for CR1202
    AND ott.order_category_code    ='RETURN'
    AND (ott.end_date_active      IS NULL
    OR TRUNC(ott.end_date_active) >=TRUNC(sysdate))
    AND RCTT.CUST_TRX_TYPE_ID      =OTT.CUST_TRX_TYPE_ID;
    END IF;
    EXCEPTION
    WHEN OTHERS THEN
    l_log_label := 'Order Type Invalid' ;
    l_message   := 'Failed to Derive Order Type. Please check Order Type Setup.';
    xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_func_name || '.' || l_log_label , l_message, false);
    p_status_code  := 2;
    p_error_message:=l_message||SQLERRM||dbms_utility.format_error_backtrace;
    dbms_output.put_line('261'||SQLERRM);
    END;*/
    --Commented By Kavita -- Created and called a function to derive transaction_type_id
    --Start Changes CR#2449
    BEGIN
      v_order_type_id := get_transaction_type_id( p_order_head_rec.order_source, p_order_head_rec.order_type, p_order_head_rec.org_id, p_status_code, p_error_message);
    EXCEPTION
    WHEN OTHERS THEN
      xxcu_common_log_rt.msglog ('ERR', 'Failed to derive transaction type id 2 '||sqlerrm||dbms_utility.format_error_backtrace, 1117, '1', 'get_transaction_type_id', '-1' );
    END;
    --Start Changes CR#2449
    /* start wave 2 modification */
    BEGIN
      SELECT ffvv.attribute11
      INTO lv_context
      FROM fnd_flex_value_sets ffvs,
        fnd_flex_values ffvv
      WHERE ffvs.flex_value_set_name='XXCU_OM_SOURCE_ORDER_TYPE'
      AND ffvs.flex_value_set_id    =ffvv.flex_value_set_id
      AND upper(ffvv.flex_value)    =upper(p_order_head_rec.order_source);
    EXCEPTION
    WHEN OTHERS THEN
      --xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the xxcu_invoice_spec_p > ::Contact your system administrator:: ' || SQLERRM );
      -- xxcu_common_log_rt.msglog ('ERR', 'Error derving context'||SQLERRM, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => SYSDATE, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
      -- p_status_code  := 2;
      -- p_error_message:='Error deriving context'||SQLERRM||dbms_utility.format_error_backtrace;
      lv_context:=NULL;
    END;
    -- end if;
    BEGIN
      SELECT COUNT(*)
      INTO ln_cnt_desc
      FROM fnd_descr_flex_contexts_vl
      WHERE descriptive_flex_context_name=lv_context
      AND descriptive_flexfield_name     ='OE_HEADER_ATTRIBUTES';
    EXCEPTION
    WHEN OTHERS THEN
      ln_cnt_desc:=0;
    END;
    ---------------checking if context is to be set as 'TMS' or not-------------------------
    IF(lv_context=NULL OR ln_cnt_desc=0) THEN
      BEGIN
        SELECT COUNT(*)
        INTO v_context
        FROM
          --oe_order_headers_all ooha,
          oe_transaction_types_v ott,
          ra_cust_trx_types_all rctt
        WHERE 1                    =1 --and ott.transaction_type_id=ooha.order_type_id
        AND ott.org_id             =p_order_head_rec.org_id
        AND ott.transaction_type_id=v_order_type_id
        AND transaction_type_code IN ('ORDER','RETURN')
        AND order_category_code   IN ('ORDER','RETURN')
        AND (end_date_active      IS NULL
        OR TRUNC(end_date_active) >=TRUNC(sysdate))
        AND rctt.cust_trx_type_id  =ott.cust_trx_type_id
        AND rctt.name LIKE '%TMS%';
      EXCEPTION
      WHEN OTHERS THEN
        v_context:=0;
        dbms_output.put_line('v_context'||v_context);
      END;
    END IF;
    IF(p_order_head_rec.handling_date IS NOT NULL) THEN
      lv_attr2                        :=TO_CHAR(to_date(p_order_head_rec.handling_date,'DD-MON-YY HH:MI:SS'),'YYYY/MM/DD HH:MI:SS');
    ELSE
      IF (p_order_head_rec.charteque_number IS NOT NULL) THEN
        lv_attr2                            :=p_order_head_rec.charteque_number;
      ELSE
        IF (p_order_head_rec.waiting_date IS NOT NULL) THEN
          lv_attr2                        :=TO_CHAR(to_date(p_order_head_rec.waiting_date,'DD-MON-YY HH:MI:SS'),'YYYY/MM/DD HH:MI:SS');--defect 4246
        ELSE
          IF (p_order_head_rec.customs_id IS NOT NULL) THEN
            lv_attr2                      :=p_order_head_rec.customs_id;
          ELSE
            IF (p_order_head_rec.contract_modifier_num IS NOT NULL) THEN
              lv_attr2                                 :=p_order_head_rec.contract_modifier_num;
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
    IF(p_order_head_rec.settlement_flag IS NOT NULL) THEN
      lv_attr4                          :=p_order_head_rec.settlement_flag;
    ELSE
      IF (p_order_head_rec.special_handling IS NOT NULL) THEN
        lv_attr4                            :=p_order_head_rec.special_handling;
      ELSE
        IF (p_order_head_rec.sender_name IS NOT NULL) THEN
          lv_attr4                       :=p_order_head_rec.sender_name;
        ELSE
          IF (p_order_head_rec.contract_num IS NOT NULL) THEN
            lv_attr4                        :=p_order_head_rec.contract_num;
          END IF;
        END IF;
      END IF;
    END IF;
    IF(p_order_head_rec.master_consign_id IS NOT NULL) THEN
      lv_attr6                            :=p_order_head_rec.master_consign_id;
    END IF;
    IF(p_order_head_rec.consignment_num IS NOT NULL) THEN
      lv_attr7                          :=p_order_head_rec.consignment_num;
    END IF;
    IF(p_order_head_rec.consign_item_num IS NOT NULL) THEN
      lv_attr8                           :=p_order_head_rec.consign_item_num;
    END IF;
    IF(p_order_head_rec.sender_name IS NOT NULL) THEN
      lv_attr16                     :=p_order_head_rec.sender_name;
      /* start defect 3937 */
    ELSE
      IF(p_order_head_rec.credit_card_source IS NOT NULL) THEN
        lv_attr16                            :=p_order_head_rec.credit_card_source;
      END IF;
      /* end */
    END IF;
    IF(p_order_head_rec.invoice_text IS NOT NULL) THEN
      lv_attr13                      :=p_order_head_rec.invoice_text;
    ELSE
      IF (p_order_head_rec.bill_details IS NOT NULL) THEN
        lv_attr13                       :=p_order_head_rec.bill_details;
      ELSE
        IF (p_order_head_rec.payment_method IS NOT NULL) THEN
          lv_attr13                         :=p_order_head_rec.payment_method;
        ELSE
          IF (p_order_head_rec.minisite_id IS NOT NULL) THEN
            lv_attr13                      :=p_order_head_rec.minisite_id;
          END IF;
        END IF;
      END IF;
    END IF;
    /* end wave 2 modification */
    BEGIN
      /* select salesrep_id into v_salesrep_id from JTF.JTF_RS_SALESREPS where name=p_order_head_rec.Salesperson
      and org_id=p_order_head_rec.org_id;
      exception when others then
      select salesrep_id into v_salesrep_id from JTF.JTF_RS_SALESREPS where name='No Sales credit'
      and org_id=p_order_head_rec.org_id;*/
      ------------fetching salesperson name from profile option (user,responsibility,application,site)------------------------------
      BEGIN
        SELECT val
        INTO v_salesrep_id
        FROM
          (SELECT po.profile_option_name value_name,
            po.user_profile_option_name,
            DECODE (TO_CHAR (pov.level_id), '10001', 'SITE', '10002', 'APP', '10003', 'RESP', '10005', 'SERVER', '10006', 'ORG', '10004', 'USER', '???' ) value_level,
            DECODE (TO_CHAR (pov.level_id), '10001', '', '10002', app.application_short_name, '10003', rsp.responsibility_key, '10005', svr.node_name, '10006', org.name, '10004', usr.user_name, '???' ) con,
            pov.profile_option_value val
          FROM apps.fnd_profile_options_vl po,
            apps.fnd_profile_option_values pov,
            apps.fnd_user usr,
            apps.fnd_application app,
            apps.fnd_responsibility rsp,
            apps.fnd_nodes svr,
            apps.hr_operating_units org
          WHERE 1                      = 1
          AND pov.application_id       = po.application_id
          AND pov.profile_option_id    = po.profile_option_id
          AND usr.user_id(+)           = pov.level_value
          AND rsp.application_id(+)    = pov.level_value_application_id
          AND rsp.responsibility_id(+) = pov.level_value
          AND app.application_id(+)    = pov.level_value
          AND svr.node_id(+)           = pov.level_value
          AND org.organization_id(+)   = pov.level_value
          AND po.profile_option_name LIKE 'ONT_DEFAULT_PERSON_ID'
          )
        WHERE value_level='USER';
      EXCEPTION
      WHEN OTHERS THEN
        v_salesrep_id:=NULL;
        dbms_output.put_line('331'||sqlerrm);
      END;
      BEGIN
        IF (v_salesrep_id IS NULL) THEN
          SELECT val
          INTO v_salesrep_id
          FROM
            (SELECT po.profile_option_name value_name,
              po.user_profile_option_name,
              DECODE (TO_CHAR (pov.level_id), '10001', 'SITE', '10002', 'APP', '10003', 'RESP', '10005', 'SERVER', '10006', 'ORG', '10004', 'USER', '???' ) value_level,
              DECODE (TO_CHAR (pov.level_id), '10001', '', '10002', app.application_short_name, '10003', rsp.responsibility_key, '10005', svr.node_name, '10006', org.name, '10004', usr.user_name, '???' ) con,
              pov.profile_option_value val
            FROM apps.fnd_profile_options_vl po,
              apps.fnd_profile_option_values pov,
              apps.fnd_user usr,
              apps.fnd_application app,
              apps.fnd_responsibility rsp,
              apps.fnd_nodes svr,
              apps.hr_operating_units org
            WHERE 1                      = 1
            AND pov.application_id       = po.application_id
            AND pov.profile_option_id    = po.profile_option_id
            AND usr.user_id(+)           = pov.level_value
            AND rsp.application_id(+)    = pov.level_value_application_id
            AND rsp.responsibility_id(+) = pov.level_value
            AND app.application_id(+)    = pov.level_value
            AND svr.node_id(+)           = pov.level_value
            AND org.organization_id(+)   = pov.level_value
            AND po.profile_option_name LIKE 'ONT_DEFAULT_PERSON_ID'
            )
          WHERE value_level='RESP';
        END IF;
      EXCEPTION
      WHEN OTHERS THEN
        v_salesrep_id:=NULL;
        dbms_output.put_line('376'||sqlerrm);
      END;
      BEGIN
        IF (v_salesrep_id IS NULL) THEN
          SELECT val
          INTO v_salesrep_id
          FROM
            (SELECT po.profile_option_name value_name,
              po.user_profile_option_name,
              DECODE (TO_CHAR (pov.level_id), '10001', 'SITE', '10002', 'APP', '10003', 'RESP', '10005', 'SERVER', '10006', 'ORG', '10004', 'USER', '???' ) value_level,
              DECODE (TO_CHAR (pov.level_id), '10001', '', '10002', app.application_short_name, '10003', rsp.responsibility_key, '10005', svr.node_name, '10006', org.name, '10004', usr.user_name, '???' ) con,
              pov.profile_option_value val
            FROM apps.fnd_profile_options_vl po,
              apps.fnd_profile_option_values pov,
              apps.fnd_user usr,
              apps.fnd_application app,
              apps.fnd_responsibility rsp,
              apps.fnd_nodes svr,
              apps.hr_operating_units org
            WHERE 1                      = 1
            AND pov.application_id       = po.application_id
            AND pov.profile_option_id    = po.profile_option_id
            AND usr.user_id(+)           = pov.level_value
            AND rsp.application_id(+)    = pov.level_value_application_id
            AND rsp.responsibility_id(+) = pov.level_value
            AND app.application_id(+)    = pov.level_value
            AND svr.node_id(+)           = pov.level_value
            AND org.organization_id(+)   = pov.level_value
            AND po.profile_option_name LIKE 'ONT_DEFAULT_PERSON_ID'
            )
          WHERE value_level='APP';
        END IF;
      EXCEPTION
      WHEN OTHERS THEN
        v_salesrep_id:=NULL;
        dbms_output.put_line('422'||sqlerrm);
      END;
      BEGIN
        IF (v_salesrep_id IS NULL) THEN
          SELECT val
          INTO v_salesrep_id
          FROM
            (SELECT po.profile_option_name value_name,
              po.user_profile_option_name,
              DECODE (TO_CHAR (pov.level_id), '10001', 'SITE', '10002', 'APP', '10003', 'RESP', '10005', 'SERVER', '10006', 'ORG', '10004', 'USER', '???' ) value_level,
              DECODE (TO_CHAR (pov.level_id), '10001', '', '10002', app.application_short_name, '10003', rsp.responsibility_key, '10005', svr.node_name, '10006', org.name, '10004', usr.user_name, '???' ) con,
              pov.profile_option_value val
            FROM apps.fnd_profile_options_vl po,
              apps.fnd_profile_option_values pov,
              apps.fnd_user usr,
              apps.fnd_application app,
              apps.fnd_responsibility rsp,
              apps.fnd_nodes svr,
              apps.hr_operating_units org
            WHERE 1                      = 1
            AND pov.application_id       = po.application_id
            AND pov.profile_option_id    = po.profile_option_id
            AND usr.user_id(+)           = pov.level_value
            AND rsp.application_id(+)    = pov.level_value_application_id
            AND rsp.responsibility_id(+) = pov.level_value
            AND app.application_id(+)    = pov.level_value
            AND svr.node_id(+)           = pov.level_value
            AND org.organization_id(+)   = pov.level_value
            AND po.profile_option_name LIKE 'ONT_DEFAULT_PERSON_ID'
            )
          WHERE value_level='SITE';
        END IF;
      EXCEPTION
      WHEN OTHERS THEN
        l_log_label := 'Sales Person Invalid' ;
        l_message   := 'Sales Person not found';
        xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_func_name || '.' || l_log_label , l_message, false);
        dbms_output.put_line('469'||sqlerrm);
      END;
    END;
    BEGIN
      --  if(p_order_head_rec.currency_code is not null) then
      SELECT currency_code
      INTO v_curr_code
      FROM fnd_currencies
      WHERE currency_code        =upper(p_order_head_rec.currency_code)
      AND (end_date_active      IS NULL
      OR TRUNC(end_date_active) >=TRUNC(p_order_head_rec.ordereddate));
      --end if;
    EXCEPTION
    WHEN OTHERS THEN
      l_log_label := 'Invalid Currency';
      l_message   := 'Currency Not Found';
      xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_func_name || '.' || l_log_label , l_message, false);
      --raise error;
    END;
    BEGIN
      IF(p_order_head_rec.sales_agmnt_no IS NOT NULL) THEN
        SELECT order_number
        INTO v_bsa_num
        FROM oe_blanket_headers_all
        WHERE org_id               =p_order_head_rec.org_id
        AND transactional_curr_code=upper(p_order_head_rec.currency_code)
        AND order_number           =p_order_head_rec.sales_agmnt_no
        AND sold_to_org_id         =l_customer_id;
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      l_log_label := 'Sales Agreement Number Not found';
      l_message   := 'Sales Agreement Number Not found';
      xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_func_name || '.' || l_log_label , l_message, false);
      --raise error;
    END;
    BEGIN
      SELECT getpayment_term(p_order_head_rec.org_id,p_order_head_rec.currency_code,p_order_head_rec.sales_agmnt_no,l_customer_id, p_order_head_rec.payment_term--CR 4813
        ,p_order_head_rec.order_source                                                                                                                          --CR 4790
        )
      INTO l_payment_term
      FROM dual;
    EXCEPTION
    WHEN OTHERS THEN
      l_log_label := 'Payment Term Invalid';
      l_message   := 'Payment Term Not Found';
      xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_func_name || '.' || l_log_label , l_message, false);
    END;
    /*start 19.04.2016 Artifact artf4721802*/
    BEGIN
      SELECT attribute1,
        attribute2,
        attribute15,
        /* start CR 2811 */
        attribute5,
        attribute3,
        attribute4,---added by vijay on 27-jun-2017 for defect 3528
        attribute18,
        /* end CR 2811 */
        /* start wave 2 modification */
        attribute6,
        attribute7,
        attribute8,
        attribute13,
        attribute16,
        attribute14
        /* end wave 2 modification */
      INTO lv_attribute1,
        lv_attribute2,
        lv_attribute15,
        /* start CR 2811 */
        lv_attribute5,
        lv_attribute3,
        lv_attribute4,---added by vijay on 27-jun-2017 for defect 3528
        lv_attribute18,
        /* end CR 2811 */
        /* start wave 2 modification */
        lv_attribute6,
        lv_attribute7,
        lv_attribute8,
        lv_attribute13,
        lv_attribute16,
        lv_attribute14
        /* end wave 2 modification */
      FROM oe_order_headers_all
      WHERE orig_sys_document_ref=p_order_head_rec.return_order_reference
      AND org_id                 = p_order_head_rec.org_id; --added org_id defect#2848
    EXCEPTION
    WHEN OTHERS THEN
      lv_attribute1 :=NULL;
      lv_attribute2 :=NULL;
      lv_attribute15:=NULL;
      lv_attribute6 :=NULL;
      lv_attribute7 :=NULL;
      lv_attribute8 :=NULL;
      lv_attribute13:=NULL;
      lv_attribute16:=NULL;
      lv_attribute14:=NULL;
    END;
    /*end */
    /* version 1.18 CR # 1202 */
    BEGIN
      /* SELECT name
      INTO lv_trans_type
      FROM oe_transaction_types_tl
      WHERE transaction_type_id=v_order_type_id
      AND language             ='US';
      SELECT fdsa.doc_sequence_id
      INTO ln_doc_seq_id
      FROM FND_DOC_SEQUENCE_CATEGORIES fds,
      fnd_doc_sequence_assignments fdsa
      WHERE fds.table_name   ='OE_TRANSACTION_TYPES_ALL'
      AND fds.name           =lv_trans_type
      AND fds.code           =fdsa.category_code
      AND fdsa.end_date     IS NULL
      OR TRUNC(fdsa.end_date)>TRUNC(SYSDATE);
      SELECT type
      INTO lv_type
      FROM FND_DOCUMENT_SEQUENCES
      WHERE doc_sequence_id=ln_doc_seq_id;
      */
      --Commented as per --CR#C-06068
      SELECT attribute10
      INTO lv_post_fix
      FROM oe_transaction_types_all
      WHERE transaction_type_id=v_order_type_id ;
      IF (lv_post_fix          ='Y')
        --(lv_type           ='M')
        THEN                                                                                           --CR#C-06068
        g_order_number :=p_order_head_rec.printed_order_number||xxcu.xxcu_ont_order_number_seq.nextval;--l_orig_sys_document_ref;/* version 1.27 2224 */ *Version 1.30 Kavita CR#2499 Replaced ln_order_number with g_order_number*/
      ELSE
        --  g_order_number:=NULL;  -- commented by mani CR#C-06068
        g_order_number :=p_order_head_rec.printed_order_number;
        /*Version 1.30 Kavita CR#2499 Replaced ln_order_number with g_order_number*/
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      -- g_order_number:=NULL;   -- commented by mani CR#C-06068
      g_order_number :=p_order_head_rec.printed_order_number;
      /*Version 1.30 Kavita CR#2499 Replaced ln_order_number with g_order_number*/
    END;
    lv_payment_type_code:=NULL;
    /* start defect 3363 */
    BEGIN
      BEGIN
        SELECT DECODE(DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute15,p_order_head_rec.payment_provider_trans_id), NULL,'N','','N','Y')
        INTO lv_flag
        FROM dual;
      EXCEPTION
      WHEN OTHERS THEN
        lv_flag:='N';
      END;
      IF (upper(p_order_head_rec.prepayment_flag)='Y' AND upper(p_order_head_rec.order_type) ='REGULAR') THEN
        lv_payment_type_code                    :='XXCU_PREPAYMENT';
      ELSE
        IF (lv_flag='Y')
          --AND UPPER(p_order_head_rec.order_type)='REGULAR')
          THEN
          lv_payment_type_code:='XXCU_CREDIT_CARD';
        ELSE
          lv_payment_type_code:=NULL;
        END IF;
      END IF;
    END ;
    /* end defect 3363 */
    /* start CR 3359 */
    BEGIN
      lv_proj_flag                    :=NULL;
      IF(p_order_head_rec.project_ref IS NOT NULL) THEN
        lv_proj_flag                  :=p_order_head_rec.project_ref;
      ELSE
        BEGIN
          SELECT attribute2
          INTO lv_proj_flag_bsa
          FROM oe_blanket_headers_all
          WHERE org_id               =p_order_head_rec.org_id
          AND transactional_curr_code=upper(p_order_head_rec.currency_code)
          AND order_number           =p_order_head_rec.sales_agmnt_no
          AND upper(attribute2)      ='SINGLE'
          AND sold_to_org_id         =l_customer_id;
        EXCEPTION
        WHEN OTHERS THEN
          lv_proj_flag_bsa:=NULL;
        END;
        IF(lv_proj_flag_bsa IS NOT NULL) THEN
          lv_proj_flag      :=l_orig_sys_document_ref;
        END IF;
      END IF;
      --IF(lv_proj_flag IS NULL and ) THEN
      /* site */
      IF(lv_proj_flag IS NULL) THEN
        BEGIN
          SELECT hca.attribute4
          INTO lv_proj_flag_site
          FROM hz_cust_acct_sites_all hca
          WHERE hca.cust_account_id=l_customer_id
          AND hca.org_id           =p_order_head_rec.org_id
          AND hca.status           ='A'
            -- AND upper(hca.attribute4)='SINGLE'
          AND hca.bill_to_flag ='P';
        EXCEPTION
        WHEN OTHERS THEN
          lv_proj_flag_site:=NULL;
        END;
        --  END IF;
        --  IF(lv_proj_flag IS NULL) THEN
        BEGIN
          SELECT hca.attribute4
          INTO lv_proj_flag_acc
          FROM hz_cust_accounts hca
          WHERE hca.cust_account_id =l_customer_id
            --  AND upper(hca.attribute4) IN ('WEEKLY','SINGLE')
          AND hca.status ='A';
        EXCEPTION
        WHEN OTHERS THEN
          lv_proj_flag_acc:=NULL;
        END;
        --  END IF;
        --   IF(lv_proj_flag IS NULL) THEN
        BEGIN
          SELECT hp.attribute4
          INTO lv_proj_flag_party
          FROM hz_cust_accounts hca,
            hz_parties hp
          WHERE hca.cust_account_id=l_customer_id
          AND hp.party_id          =hca.party_id
            --  AND upper(hp.attribute4) ='SINGLE'
          AND hca.status ='A';
        EXCEPTION
        WHEN OTHERS THEN
          lv_proj_flag_party:=NULL;
        END;
        --  END IF;
        IF(upper(lv_proj_flag_site)='SINGLE' AND lv_proj_flag_bsa IS NULL) THEN
          lv_proj_flag            :=l_orig_sys_document_ref;
        ELSE
          IF(upper(lv_proj_flag_acc)='SINGLE' AND( lv_proj_flag_site IS NOT NULL OR lv_proj_flag_bsa IS NOT NULL)) THEN
            lv_proj_flag           :=NULL;
          ELSE
            IF (upper(lv_proj_flag_acc)='SINGLE' AND( lv_proj_flag_site IS NULL AND lv_proj_flag_bsa IS NULL)) THEN
              lv_proj_flag            :=l_orig_sys_document_ref;
            ELSE
              IF (upper(lv_proj_flag_party) ='SINGLE' AND (lv_proj_flag_acc IS NOT NULL OR lv_proj_flag_bsa IS NOT NULL OR lv_proj_flag_site IS NOT NULL)) THEN
                lv_proj_flag               :=NULL;
              ELSE
                IF (upper(lv_proj_flag_party) ='SINGLE' AND (lv_proj_flag_acc IS NULL AND lv_proj_flag_bsa IS NULL AND lv_proj_flag_site IS NULL)) THEN
                  lv_proj_flag               :=l_orig_sys_document_ref;
                END IF;
              END IF;
            END IF;
          END IF;
        END IF;
        --end if;
        --  END IF;
      END IF;
    END;
    /* end CR 3359 */
    BEGIN
      IF(v_context>0) THEN
        dbms_output.put_line('v_context>0');
        INSERT
        INTO oe_headers_iface_all
          (
            operation_code,
            --header_id,commented by vedangi as header id need not be passed in interface it will be populated by standard order import
            --order_type,
            global_attribute1,--batch_id,
            pricing_date,
            conversion_type,
            deliver_to_customer_id,
            sold_to_org_id,
            --sold_to_org,
            invoice_to_org_id,
            ship_to_org_id,
            blanket_number,
            price_list_id,
            order_type_id,
            invoicing_rule_id,
            accounting_rule_id,
            orig_sys_document_ref,
            order_source_id,
            org_id,
            salesrep_id,
            transactional_curr_code,
            /* start defect 3276 */
            -- request_date,
            /* end defect 3276*/
            payment_type_code,
            last_update_date,
            ordered_date,
            creation_date,
            customer_po_number,
            attribute1,
            attribute14,
            -- attribute13,
            --attribute12,
            booked_flag,
            tax_exempt_flag,
            context,
            attribute2,
            created_by,
            last_updated_by,
            conversion_rate_date,
            payment_term_id,
            --   attribute16,
            attribute15,
            /* version 1.17 */
            attribute5,
            attribute18,
            order_number,
            attribute3,
            /* version 1.27 CR 2224,2043 */
            attribute19,
            -- attribute15,
            attribute4,
            /* start wave 2 modification */
            attribute6,
            attribute7,
            attribute8,
            attribute13,
            attribute16
            /* end wave 2 modification */
            ,
            attribute11 --defect 4086
          )
          VALUES
          (
            l_operation,
            --l_header_id,commented by vedangi as header id need not be passed in interface it will be populated by standard order import
            -- p_order_head_rec.order_type, --Order type id already provided
            p_batch_id,
            lv_pricing_date,-- p_order_head_rec.pricing_date,/* Version 1.16*/
            l_conversion_type,
            l_customer_id,
            l_customer_id,
            -- p_order_head_rec.customer_number,
            getsiteuseid (l_customer_id, 'BILL_TO',p_order_head_rec.org_id),
            getsiteuseid (l_customer_id, 'SHIP_TO',p_order_head_rec.org_id),
            p_order_head_rec.sales_agmnt_no,--getblanketnumber (l_customer_id, p_order_head_rec.ordereddate,p_order_head_rec.order_type),
            getpricelistid (DECODE(lv_new_curr_code,NULL,p_order_head_rec.currency_code,lv_new_curr_code)),
            v_order_type_id,--getordertypeid (p_order_head_rec.order_type),
            NULL,
            NULL,
            l_orig_sys_document_ref,
            g_order_source_id,
            p_order_head_rec.org_id,
            v_salesrep_id,-- -3,
            DECODE(lv_new_curr_code,NULL,p_order_head_rec.currency_code,lv_new_curr_code),
            /* start defect 3276 */
            -- p_order_head_rec.ordereddate,
            /* end defect 3276 */
            /* start defect 3310 */
            --For Prepaid transactions its is 'Cash'and for others it is null
            --DECODE(upper(p_order_head_rec.prepayment_flag),'Y','CASH',NULL),
            /* start defect 3348 */
            lv_payment_type_code,
            /* end defect 3348 */
            /* end defect 3310 */
            sysdate,
            p_order_head_rec.ordereddate,
            sysdate,
            p_order_head_rec.po_reference,
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute1,p_order_head_rec.exclude_from_dunning),
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute14, p_order_head_rec.reserved_amount),--defect 3711
            /*Artifact artf4721802*/
            -- p_order_head_rec.customer_ref,
            -- p_order_head_rec.autotwist_invoice,
            -- p_order_head_rec.charteque_number,
            'Y',
            'S',
            'TMS',
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute2,p_order_head_rec.charteque_number),
            /*Artifact artf4721802*/
            g_user_id,
            g_user_id,
            lv_pricing_date,--  p_order_head_rec.Conversion_Date,/*artf4774289 *//* Version 1.16 Defect 797 */
            l_payment_term,
            --   DECODE(upper(p_order_head_rec.Order_Type),'RETURN',lv_attribute16,p_order_head_rec.invoice_attachment_file),
            /*Artifact artf4721802*/
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute15,p_order_head_rec.payment_provider_trans_id),
            /*Artifact artf4721802*/
            /* version 1.17 */
            -- DECODE(upper(p_order_head_rec.Order_Type),'RETURN',lv_attribute5,p_order_head_rec.message_to_customer), -- code changes for 1.65
            p_order_head_rec.message_to_customer, -- code changes for 1.65
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute18,p_order_head_rec.agreement_name),
            g_order_number,
            /* version Kavita 1.30 CR 2499 Replaced ln_order_number with g_order_number*/
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute3,lv_proj_flag),--CR 3359
            /* version 1.27 CR 2224,2043 */
            p_order_head_rec.printed_order_number,
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute4,lv_attr4),
            --p_order_head_rec.settlement_flag)---added by vijay on 27-jun-2017 for defect 3528
            /* start wave 2 modification */
            lv_attr6 ,
            lv_attr7,
            lv_attr8,
            lv_attr13,
            lv_attr16
            /* end wave 2 modification */
            ,
            p_order_head_rec.invoice_kid
            -------------------------------------------
          );
      ELSE
        --   dbms_output.put_line('v_context=0');
        INSERT
        INTO oe_headers_iface_all
          (
            operation_code,
            -- header_id,commented by vedangi as header id need not be passed in interface it will be populated by standard order import
            --order_type,
            global_attribute1,--batch_id,
            pricing_date,
            conversion_type,
            deliver_to_customer_id,
            sold_to_org_id,
            --sold_to_org,
            invoice_to_org_id,
            ship_to_org_id,
            blanket_number,
            price_list_id,
            order_type_id,
            invoicing_rule_id,
            accounting_rule_id,
            orig_sys_document_ref,
            order_source_id,
            org_id,
            salesrep_id,
            transactional_curr_code,
            /* start defect 3276 */
            -- request_date,
            /* end defect 3276 */
            payment_type_code,
            last_update_date,
            ordered_date,
            creation_date,
            customer_po_number,
            --  attribute15,
            attribute14,
            --  attribute13,
            --attribute12,
            booked_flag,
            tax_exempt_flag,
            context,
            attribute15,
            attribute1,
            created_by,
            last_updated_by,
            conversion_rate_date,
            payment_term_id,
            -- attribute16,
            attribute2,
            /* version 1.17 */
            attribute5,
            attribute18,
            order_number,
            attribute3,
            /* version 1.27 CR 2224, 2043 */
            attribute19,
            attribute4,---added by vijay on 27-jun-2017 for defect 3528
            /* start wave 2 modification */
            attribute6,
            attribute7,
            attribute8,
            attribute13,
            attribute16
            /* end wave 2 modification */
            ,
            attribute11 --defect 4086
          )
          VALUES
          (
            l_operation,
            --l_header_id,commented by vedangi as header id need not be passed in interface it will be populated by standard order import
            -- p_order_head_rec.order_type, --Order type id already provided
            p_batch_id,
            lv_pricing_date,--p_order_head_rec.pricing_date,/* version 1.16 defect 797 */
            l_conversion_type,
            l_customer_id,
            l_customer_id,
            -- p_order_head_rec.customer_number,
            getsiteuseid (l_customer_id, 'BILL_TO',p_order_head_rec.org_id),
            getsiteuseid (l_customer_id, 'SHIP_TO',p_order_head_rec.org_id),
            p_order_head_rec.sales_agmnt_no,--getblanketnumber (l_customer_id, p_order_head_rec.ordereddate,p_order_head_rec.order_type),
            getpricelistid (DECODE(lv_new_curr_code,NULL,p_order_head_rec.currency_code,lv_new_curr_code)),
            v_order_type_id,--getordertypeid (p_order_head_rec.order_type),
            NULL,
            NULL,
            l_orig_sys_document_ref,
            g_order_source_id,
            p_order_head_rec.org_id,
            v_salesrep_id,-- -3,
            DECODE(lv_new_curr_code,NULL,p_order_head_rec.currency_code,lv_new_curr_code),
            /* start defect 3276 */
            -- p_order_head_rec.ordereddate,
            /* end defect 3276 */
            /* start defect 3310 */
            --For Prepaid transactions its is 'Cash'and for others it is null
            -- DECODE(upper(p_order_head_rec.prepayment_flag),'Y','CASH',NULL),
            /* start defect 3348 */
            lv_payment_type_code,
            /* end defect 3310 */
            /* end defect 348 */
            sysdate,
            p_order_head_rec.ordereddate,
            sysdate,
            p_order_head_rec.po_reference,
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute14, p_order_head_rec.reserved_amount),--defect 3711
            --  p_order_head_rec.cc_ref_id,
            --     p_order_head_rec.customer_ref,
            --  p_order_head_rec.autotwist_invoice,
            -- p_order_head_rec.charteque_number,
            'Y',
            'S',
            lv_context,
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute15,p_order_head_rec.payment_provider_trans_id),
            /*Artifact artf4721802*/
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute1,p_order_head_rec.exclude_from_dunning),
            /*Artifact artf4721802*/
            g_user_id,
            g_user_id,
            lv_pricing_date,-- p_order_head_rec.Conversion_Date,,/*artf4774289 */
            l_payment_term,
            -- DECODE(upper(p_order_head_rec.Order_Type),'RETURN',lv_attribute16,p_order_head_rec.invoice_attachment_file),
            /*Artifact artf4721802*/
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute2,lv_attr2),--p_order_head_rec.charteque_number),
            /*Artifact artf4721802*/
            /* version 1.17 */
            -- DECODE(upper(p_order_head_rec.Order_Type),'RETURN',lv_attribute5,p_order_head_rec.message_to_customer), -- code changes for 1.65
            p_order_head_rec.message_to_customer, -- code changes for 1.65,
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute18,p_order_head_rec.agreement_name),
            g_order_number,
            /* version Kavita 1.30 CR 2499 Replaced ln_order_number with g_order_number*/
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute3,lv_proj_flag),
            /* version 1.27 CR 2224, 2043 */
            p_order_head_rec.printed_order_number,
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute4,lv_attr4),--p_order_head_rec.settlement_flag)---added by vijay on 27-jun-2017 for defect 3528
            /* start wave 2 modification */
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute6,lv_attr6),
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute7,lv_attr7),
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute8,lv_attr8),
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute13,lv_attr13),
            DECODE(upper(p_order_head_rec.order_type),'RETURN',lv_attribute16,lv_attr16)
            /* end wave 2 modification */
            ,
            p_order_head_rec.invoice_kid --defect 4086
          );
        -- COMMIT; --commented for E2-IM013089363 (defect 8035)
      END IF;
      l_log_label := 'Insert into header interface failed';
      l_message   := 'Insert into header interface failed';
      xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_func_name || '.' || l_log_label , l_message || sqlerrm, false);
      xxcu_common_log_rt.msglog ('INFO', 'Error in insert of lines'||sqlerrm||dbms_utility.format_error_backtrace, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
    END;
    ---end
    -- END IF;
    /* version 1.25 CR 1851 prepaid order */
    IF(p_order_head_rec.prepayment_flag='Y' AND p_order_head_rec.payment_provider_trans_id IS NULL AND upper(p_order_head_rec.order_type)='REGULAR') THEN
      c                               :=c+1;
      ln_amount                       :=p_amount;
      BEGIN
        BEGIN
          SELECT fpovv.profile_option_value
          INTO lv_receipt_method
          FROM fnd_profile_options_vl fpov,
            fnd_profile_option_values fpovv
          WHERE user_profile_option_name='XXCU: Payment methods for payment from PREPAYMENT'
          AND fpov.profile_option_id    =fpovv.profile_option_id ;
        EXCEPTION
        WHEN OTHERS THEN
          lv_receipt_method:=NULL;
        END;
        mo_global.init('AR');
        mo_global.set_policy_context('S',p_order_head_rec.org_id);
        SELECT responsibility_id,
          application_id
        INTO ln_resp_id,
          ln_app_id
        FROM fnd_responsibility_vl
        WHERE responsibility_name = 'PB AR Super User';
        fnd_global.apps_initialize(g_user_id, ln_resp_id, ln_app_id);
        SELECT DECODE(lv_new_curr_code,NULL,p_order_head_rec.currency_code,lv_new_curr_code)
        INTO lv_rec_curr_code
        FROM dual;
        /* start defect 3494 */
        BEGIN
          SELECT gso.currency_code
          INTO lv_curr_code
          FROM hr_operating_units hou,
            gl_sets_of_books gso
          WHERE gso.set_of_books_id=hou.set_of_books_id
          AND hou.organization_id  =p_order_head_rec.org_id;
        EXCEPTION
        WHEN OTHERS THEN
          lv_curr_code:=NULL;
        END;
        IF(lv_curr_code    <>p_order_head_rec.currency_code) THEN
          l_conversion_type:='Corporate';
        ELSE
          l_conversion_type:=NULL;
        END IF;
        /* end defect 3494 */
        BEGIN
          SELECT arm.remit_bank_acct_use_id
          INTO ln_remit_bank
          FROM ar_receipt_method_accounts_all arm,
            ar_receipt_methods armm,
            /* start defect 3494 */
            ce.ce_bank_accounts cba,
            ce.ce_bank_acct_uses_all cbau
            /* end defect 3494 */
          WHERE armm.receipt_method_id=arm.receipt_method_id
            /*start defect 3494 */
          AND cbau.bank_acct_use_id=arm.remit_bank_acct_use_id
          AND cbau.bank_account_id =cba.bank_account_id
          AND arm.org_id           =p_order_head_rec.org_id
          AND cba.currency_code    =p_order_head_rec.currency_code
            /* end defect 3494 */
          AND armm.receipt_method_id =lv_receipt_method;
        EXCEPTION
        WHEN OTHERS THEN
          ln_remit_bank:=NULL;
        END;
        /* start CR 3540 */
        IF(ln_remit_bank IS NULL) THEN
          BEGIN
            SELECT cbau.bank_acct_use_id
            INTO ln_remit_bank
            FROM ce.ce_bank_accounts cba,
              ce.ce_bank_acct_uses_all cbau
            WHERE bank_account_name LIKE '%AR%'
            AND cbau.bank_account_id           =cba.bank_account_id
            AND cbau.org_id                    =p_order_head_rec.org_id
            AND cba.multi_currency_allowed_flag='Y';
          EXCEPTION
          WHEN OTHERS THEN
            ln_remit_bank:=NULL;
            xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error while deriving bank account for prepayment ' || sqlerrm );
            p_status_code  := 2;
            p_error_message:='Error while deriving bank account for prepyment'||sqlerrm||dbms_utility.format_error_backtrace;
          END;
        END IF;
        /* end CR 3540 */
        ar_prepayments_pub.create_prepayment( p_api_version =>1.0, p_init_msg_list => fnd_api.g_false, p_commit =>fnd_api.g_false, p_validation_level => fnd_api.g_valid_level_full, x_return_status =>lv_return_status, x_msg_count =>ln_msg_count, x_msg_data =>lv_msg_data,
        -- Receipt info. parameters
        p_usr_currency_code =>
        /* start defect 3494 */
        p_order_head_rec.currency_code
        /*end defect 3494 */
        , --the translated currency code
        p_currency_code =>
        /* start defect 3494 */
        p_order_head_rec.currency_code
        /*end defect 3494 */
        , p_usr_exchange_rate_type => l_conversion_type, p_exchange_rate_type => NULL, p_exchange_rate => NULL, p_exchange_rate_date => NULL, p_amount => ln_amount, p_factor_discount_amount => NULL,
        -------Multiple Prepay project: Receipt Number should be IN OUT
        p_receipt_number =>ln_receipt_num , p_receipt_date =>sysdate, p_gl_date =>sysdate, p_maturity_date =>NULL, p_postmark_date => NULL, p_customer_id =>l_customer_id, p_customer_name => NULL, p_customer_number =>NULL, p_customer_bank_account_id =>NULL, p_customer_bank_account_num =>NULL, p_customer_bank_account_name=> NULL, p_location => NULL, p_customer_site_use_id =>getsiteuseid (l_customer_id, 'BILL_TO',p_order_head_rec.org_id), p_customer_receipt_reference =>NULL, p_override_remit_account_flag =>NULL, p_remittance_bank_account_id =>ln_remit_bank, p_remittance_bank_account_num => NULL, p_remittance_bank_account_name => NULL, p_deposit_date => NULL, p_receipt_method_id =>lv_receipt_method, p_receipt_method_name => NULL, p_doc_sequence_value => NULL, p_ussgl_transaction_code => NULL, p_anticipated_clearing_date => NULL, p_called_from => NULL, p_attribute_rec => ar_receipt_api_pub.attribute_rec_const,
        -- ******* Global Flexfield parameters *******
        p_global_attribute_rec => ar_receipt_api_pub.global_attribute_rec_const, p_receipt_comments => NULL,
        -- ***  Notes Receivable Additional Information  ***
        p_issuer_name => NULL, p_issue_date => NULL, p_issuer_bank_branch_id => NULL,
        -- ** OUT NOCOPY variables for Creating receipt
        p_cr_id =>ln_cash_receipt_id,
        -- Receipt application parameters
        p_applied_payment_schedule_id =>-7, p_amount_applied => NULL, p_application_ref_type =>'OM', p_application_ref_id =>ln_application_ref_id , p_application_ref_num =>l_orig_sys_document_ref, p_secondary_application_ref_id => ln_sec_application_ref_id, p_receivable_trx_id =>NULL, p_amount_applied_from =>NULL, p_apply_date => NULL, p_apply_gl_date =>NULL, app_ussgl_transaction_code => NULL, p_show_closed_invoices => 'FALSE', p_move_deferred_tax =>'Y', app_attribute_rec => ar_receipt_api_pub.attribute_rec_const,
        -- ******* Global Flexfield parameters *******
        app_global_attribute_rec => ar_receipt_api_pub.global_attribute_rec_const, app_comments => NULL,
        -- processor such as iPayments
        p_payment_server_order_num =>ln_payment_server_order_num, p_approval_code =>lv_approval_code,
        ---Bug 3220078 Change the parameter to TRUE
        p_call_payment_processor => fnd_api.g_true, p_payment_response_error_code =>lv_payment_response_error_code,
        -- OUT NOCOPY parameter for the Application
        p_receivable_application_id =>ln_receivable_application_id, p_payment_set_id => ln_payment_set_id, p_org_id =>p_order_head_rec.org_id, p_payment_trxn_extension_id =>NULL );
        --    COMMIT;  --commented for E2-IM013089363 (defect 8035)
        /*AR_RECEIPT_API_PUB.CREATE_CASH
        ( p_api_version => 1.0,
        p_init_msg_list => FND_API.G_TRUE,
        p_commit => FND_API.G_TRUE,
        p_validation_level => FND_API.G_VALID_LEVEL_FULL,
        x_return_status => lv_return_status,
        x_msg_count => ln_msg_count,
        x_msg_data => lv_msg_data,
        p_currency_code => lv_rec_curr_code,
        p_amount => ln_amount,
        p_receipt_number => 'rct-api4',
        p_receipt_date => sysdate,
        p_gl_date => sysdate,
        p_customer_number => p_order_head_rec.Customer_Number,
        p_receipt_method_id => lv_receipt_method,
        p_cr_id => ln_cash_receipt_id );
        commit;
        AR_RECEIPT_API_PUB.ACTIVITY_APPLICATION
        ( p_api_version => 1.0,
        p_init_msg_list => FND_API.G_TRUE,
        p_commit => FND_API.G_TRUE,
        p_validation_level => FND_API.G_VALID_LEVEL_FULL,
        x_return_status => lv_return_status,
        x_msg_count => ln_msg_count,
        x_msg_data => lv_msg_data,
        p_cash_receipt_id => ln_cash_receipt_id,
        p_applied_payment_schedule_id => -7,
        p_receivables_trx_id => 1008,
        p_receivable_application_id => l_receivable_application_id,
        p_application_ref_type => l_application_ref_type,
        p_application_ref_id => l_application_ref_id,
        p_application_ref_num => l_orig_sys_document_ref,
        p_secondary_application_ref_id => l_secondary_application_ref_id);
        commit;
        */
        SELECT DISTINCT payment_set_id
        INTO ln_payment_set_id
        FROM ar_receivable_applications_all
        WHERE cash_receipt_id =ln_cash_receipt_id
        AND payment_set_id   IS NOT NULL;
        initialize_variables(p_order_head_rec.org_id);
        INSERT
        INTO ont.oe_payments_iface_all
          (
            order_source_id ,
            orig_sys_document_ref,
            orig_sys_payment_ref,
            org_id ,
            receipt_method_id,
            payment_collection_event ,
            payment_set_id ,
            prepaid_amount ,
            payment_amount ,
            --- PAYMENT_PERCENTAGE   ,
            creation_date,
            created_by ,
            last_update_date ,
            last_updated_by ,
            payment_number ,
            --  HEADER_ID      ,
            defer_payment_processing_flag,
            payment_type_code,
            --start defect #2192
            sold_to_org_id
            --end
            -- PAYMENT_SET_
          )
          VALUES
          (
            g_order_source_id,
            l_orig_sys_document_ref,
            l_orig_sys_document_ref,
            p_order_head_rec.org_id,
            lv_receipt_method,
            'PREPAY',
            ln_payment_set_id,
            p_amount,
            p_amount,
            -- 100,
            sysdate,
            g_user_id,
            sysdate,
            g_user_id,
            c,
            'N',
            'CASH',
            --start defect #2192
            l_customer_id
            --end
            -- 11000
          );
        -- COMMIT;     --commented for E2-IM013089363 (defect 8035)
      EXCEPTION
      WHEN OTHERS THEN
        xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the insertion of o_payments_iface_all  ::Contact your system administrator:: ' || sqlerrm );
        dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
        p_status_code  := 2;
        p_error_message:=sqlerrm||dbms_utility.format_error_backtrace;
      END;
    END IF;
    RETURN l_orig_sys_document_ref;
  EXCEPTION
  WHEN OTHERS THEN
    xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the inauguration of the oe_headers_iface_all ( ' || p_order_head_rec.customer_number || ') ::Contact your system administrator:: ' || sqlerrm );
    dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
    p_status_code  := 2;
    p_error_message:=sqlerrm||dbms_utility.format_error_backtrace;
  END;
/* start wave 2 modification */
/* ----------------------------------------------------------------------------------------
* create_rettbetalt_lines
*
*   Function      : create_rettbetalt_lines
*   description   : Create lines for rettbetalt return orders
*   scope         : public
*   arguments
*        in                    : p_order_head_rec : Order header details
*                                p_order_line_rec : Order Line details
*                                p_pricing_date   : Pricing Date of Order
*        in/out                : p_status_code : Interface status code
*
*        out                   : p_error_message : Error Message if any
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  07.11.2017        Vedangi Bagwe        Created
----------------------------------------------------------------------------------------*/
  PROCEDURE create_rettbetalt_lines
    (
      p_order_head_rec IN xxcu_ont_create_order_parser.orderhead_rec,
      p_order_line_rec IN xxcu_ont_create_order_parser.orderline_rec,
      p_pricing_date   IN DATE,
      p_status_code    IN OUT NUMBER,
      p_error_message OUT VARCHAR2
    )
  AS
    l_return_reason VARCHAR2
    (
      2000
    )
    ;
    ln_count NUMBER:=0;
    CURSOR c_original_line(p_orig_sys_doc_ref VARCHAR2)
    IS
      SELECT *
      FROM oe_order_lines_all
      WHERE orig_sys_document_ref=p_orig_sys_doc_ref;
    CURSOR c_inv_spec_data(p_orig_sys_doc_ref VARCHAR2)
    IS
      SELECT *
      FROM xxcu_interface_specifications
      WHERE orig_sys_document_ref=p_orig_sys_doc_ref;
  BEGIN
    FOR rec_orginal_line IN c_original_line(p_order_head_rec.return_order_reference)
    LOOP
      BEGIN
        SELECT lookup_code
        INTO l_return_reason
        FROM apps.fnd_lookup_values lv
        WHERE lv.language         = userenv('LANG')
        AND upper(lv.lookup_code) = 'RB-'
          || upper(p_order_line_rec.reason_code)
        AND lookup_type ='CREDIT_MEMO_REASON';
      EXCEPTION
      WHEN OTHERS THEN
        l_return_reason:='NO REASON';
        /* Version 1.11 Defect 349 */
        dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
      END;
      INSERT
      INTO oe_lines_iface_all
        (
          order_source_id,
          org_id,
          sold_to_org_id,
          line_id,
          orig_sys_document_ref,
          orig_sys_line_ref,
          --link_to_line_ref,
          --top_model_line_ref,
          order_quantity_uom,
          unit_list_price,
          unit_selling_price,
          tax,
          customer_item_net_price,
          tax_value,
          calculate_price_flag,
          created_by,
          last_updated_by,
          inventory_item_id,
          ordered_quantity,
          context,
          attribute10,
          return_reason_code,
          --  attribute2,
          attribute4,
          attribute5,
          attribute6,
          attribute7,
          operation_code,
          creation_date,
          last_update_date,
          --inventory_item,
          --salesrep,
          salesrep_id,
          return_context,
          return_attribute1,
          return_attribute2,
          reference_header_id,
          reference_line_id,
          payment_term_id,
          pricing_date,
          attribute3,
          tax_code,
          return_attribute3,
          return_attribute4 ,
          global_attribute1
        )
        VALUES
        (
          rec_orginal_line.order_source_id,
          rec_orginal_line.org_id,
          rec_orginal_line.sold_to_org_id,
          oe_order_lines_s.nextval,
          p_order_head_rec.order_reference,
          'RB'
          ||g_order_number
          ||oe_order_lines_s.currval,
          rec_orginal_line.order_quantity_uom,
          rec_orginal_line.unit_list_price,
          rec_orginal_line.unit_selling_price,
          rec_orginal_line.tax_code,
          rec_orginal_line.customer_item_net_price,
          rec_orginal_line.tax_value,            -- ((TO_CHAR(p_order_line_rec.quantity)*p_order_line_rec.unit_list_price)*TO_CHAR(p_order_line_rec.quantity))*p_order_line_rec.tax/100,
          rec_orginal_line.calculate_price_flag, --'Y',   /*version 1.18 */                                                                                                                                   --l_calcualte_price,
          g_user_id,
          g_user_id,
          rec_orginal_line.inventory_item_id,
          rec_orginal_line.ordered_quantity,
          rec_orginal_line.context,
          rec_orginal_line.attribute10,
          NVL(l_return_reason,rec_orginal_line.return_reason_code),
          rec_orginal_line.attribute4,
          rec_orginal_line.attribute5,
          rec_orginal_line.attribute6,
          rec_orginal_line.attribute7,
          'INSERT',
          sysdate,
          sysdate,
          -- rec_orginal_line.inventory_item,
          -- rec_orginal_line.salesrep,
          rec_orginal_line.salesrep_id,
          'ORDER',
          rec_orginal_line.header_id,
          rec_orginal_line.line_id,
          rec_orginal_line.header_id,
          rec_orginal_line.line_id,
          rec_orginal_line.payment_term_id,
          p_pricing_date,
          rec_orginal_line.attribute3,
          rec_orginal_line.tax_code,
          p_order_head_rec.return_order_reference,
          rec_orginal_line.orig_sys_line_ref,
          g_intf_inv_spec_seq
        );
      COMMIT;
    END LOOP;
    BEGIN
      SELECT COUNT(*)
      INTO ln_count
      FROM xxcu_interface_specifications
      WHERE orig_sys_document_ref=p_order_head_rec.order_reference;
    EXCEPTION
    WHEN OTHERS THEN
      ln_count:=0;
    END;
    IF(ln_count=0) THEN
      FOR rec_inv_spec IN c_inv_spec_data(p_order_head_rec.return_order_reference)
      LOOP
        INSERT
        INTO xxcu_interface_specifications VALUES
          (
            'N',
            rec_inv_spec.order_source,
            p_order_head_rec.order_reference,
            'RB'
            ||g_order_number
            ||oe_order_lines_s.currval,
            rec_inv_spec.date_from,
            rec_inv_spec.date_to,
            rec_inv_spec.description,
            rec_inv_spec.order_date,
            rec_inv_spec.uom,
            rec_inv_spec.waybill_number,
            rec_inv_spec.sender_name,
            rec_inv_spec.receiver_name,
            rec_inv_spec.ship_from_city,
            rec_inv_spec.ship_to_city,
            rec_inv_spec.number_of_packages,
            rec_inv_spec.pallet,
            rec_inv_spec.volume,
            rec_inv_spec.weight,
            rec_inv_spec.freight_calc_weight,
            rec_inv_spec.responsible_person,
            rec_inv_spec.pp_price,
            rec_inv_spec.cargo_type,
            rec_inv_spec.creation_date,
            rec_inv_spec.created_by,
            rec_inv_spec.last_updated_by,
            rec_inv_spec.last_updated_date,
            rec_inv_spec.container_reference,
            rec_inv_spec.pick_up_point,
            rec_inv_spec.awb,
            rec_inv_spec.mawb,
            rec_inv_spec.hawb,
            rec_inv_spec.vessel,
            rec_inv_spec.incoterm,
            rec_inv_spec.sender_reference,
            rec_inv_spec.receiver_reference,
            rec_inv_spec.agent_reference,
            rec_inv_spec.load_carrier,
            rec_inv_spec.transport_method,
            rec_inv_spec.delivery_point,
            rec_inv_spec.our_reference,
            rec_inv_spec.cargo_id_number,
            rec_inv_spec.position_number,
            rec_inv_spec.load_meter,
            rec_inv_spec.cargo_label,
            rec_inv_spec.charteque_number,
            rec_inv_spec.delivered_time,
            rec_inv_spec.received_time,
            rec_inv_spec.ship_from_address1,
            rec_inv_spec.ship_from_address2,
            rec_inv_spec.ship_from_address3,
            rec_inv_spec.ship_from_country,
            rec_inv_spec.ship_from_postal_code,
            rec_inv_spec.ship_to_address1,
            rec_inv_spec.ship_to_address2,
            rec_inv_spec.ship_to_address3,
            rec_inv_spec.ship_to_postal_code,
            rec_inv_spec.ship_to_country,
            rec_inv_spec.volume_uom,
            rec_inv_spec.weight_uom,
            rec_inv_spec.freight_calc_weight_uom,
            rec_inv_spec.order_number,
            rec_inv_spec.currency,
            rec_inv_spec.currency_amount,
            rec_inv_spec.exchange_rate,
            rec_inv_spec.exchange_date,
            rec_inv_spec.pick_up_address1,
            rec_inv_spec.pick_up_address2,
            rec_inv_spec.pick_up_address3,
            rec_inv_spec.pick_up_postal_code,
            rec_inv_spec.pick_up_city,
            rec_inv_spec.pick_up_country,
            rec_inv_spec.delivery_address1,
            rec_inv_spec.delivery_address2,
            rec_inv_spec.delivery_address3,
            rec_inv_spec.delivery_postal_code,
            rec_inv_spec.delivery_city,
            rec_inv_spec.delivery_country,
            rec_inv_spec.consignment_type_code,
            rec_inv_spec.consignment_type_text,
            rec_inv_spec.transport_method_text,
            rec_inv_spec.incoterm_text,
            rec_inv_spec.ship_to_fiscal_code,
            rec_inv_spec.ship_from_fiscal_code,
            rec_inv_spec.note,
            rec_inv_spec.loading_point,
            rec_inv_spec.unloading_point,
            rec_inv_spec.spec_intf_ref,
            rec_inv_spec.ordered_by,
            rec_inv_spec.ordered_by_address1,
            rec_inv_spec.ordered_by_address2,
            rec_inv_spec.ordered_by_address3,
            rec_inv_spec.ordered_by_postal_code,
            rec_inv_spec.ordered_by_city,
            rec_inv_spec.ordered_by_country,
            rec_inv_spec.ordered_by_contact_person,
            rec_inv_spec.ordered_by_contact_email,
            rec_inv_spec.bill_to_contact_person,
            rec_inv_spec.bill_to_contact_email,
            rec_inv_spec.deviation,
            rec_inv_spec.franking_type,
            rec_inv_spec.price_table,
            rec_inv_spec.speed,
            rec_inv_spec.destination,
            rec_inv_spec.weight_spec,
            rec_inv_spec.unit_price_incl_vat,
            rec_inv_spec.total_incl_vat,
            rec_inv_spec.paid_amount,
            rec_inv_spec.agreement_sum,
            rec_inv_spec.shipment_id_number,
            rec_inv_spec.unit_price_excl_vat,
            rec_inv_spec.freight_payer -- CR 4475
          );
        COMMIT;
      END LOOP;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    p_status_code := 2;
    xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error while updating error code for invalid return order' || g_program_loc || '> ::Contact your system administrator:: ' || sqlerrm );
    p_error_message:=sqlerrm||dbms_utility.format_error_backtrace;
  END;
/* end wave 2 modification */
/* ----------------------------------------------------------------------------------------
* createorderline_interface
*
*   Function      : createorderline_interface
*   description   : Will  create an orderline if the item exists on the spesific header_id wich is inparameter.
*   scope         : public
*   arguments
*        in                    : p_order_line_rec : Order Line details
*                                p_header_id  : Header Id
*                                p_orig_sys_document_ref : Order Reference
*                                p_curr_code : Currency Code
*                                p_agreement_num : Sales Agreement Number
*                                p_cust_id : Customer Account ID
*                                p_org_id : Operating Unit ID
*                                p_pricing_date : Pricing Date of Order
*                                p_order_type : Order type
*        in/out                : p_status_code : Interface status code
*                                p_num_orderlines : Number of order lines inserted
*                                p_orig_sys_line_ref : Order Line Reference
*        out                   : p_error_message : Error Message if any
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  PROCEDURE createorderline_interface
    (
      p_order_head_rec        IN xxcu_ont_create_order_parser.orderhead_rec, --/*Version added Kavita 1.30 CR#2499*/
      p_order_line_rec        IN xxcu_ont_create_order_parser.orderline_rec,
      p_header_id             IN NUMBER,
      p_orig_sys_document_ref IN VARCHAR2,
      p_curr_code             IN VARCHAR2,
      p_agreement_num         IN VARCHAR2,
      p_cust_id               IN NUMBER,
      p_status_code           IN OUT NUMBER,
      p_num_orderlines        IN OUT NUMBER,
      p_orig_sys_line_ref     IN OUT VARCHAR2,
      p_org_id                IN NUMBER,
      p_pricing_date          IN DATE,
      p_order_type            IN VARCHAR2,
      p_error_message OUT VARCHAR2
    )
  AS
    l_line_id         NUMBER;
    ln_customer_id    NUMBER; --/*Version added New variable Kavita 1.30 CR#2499*/
    lv_list_header_id NUMBER;
    lv_list_line_id   NUMBER;
    lv_change_code    VARCHAR2(100);
    lv_change_reason  VARCHAR2(200);
    --l_quantityOM            NUMBER;
    --l_quantityLM            NUMBER;
    l_operation             VARCHAR2 ( 50 ) ;
    l_payment_term          NUMBER;
    l_upd_orig_sys_line_ref VARCHAR2 (50);
    v_country_from          VARCHAR2(20);
    v_country_to            VARCHAR2(20);
    l_price_id              NUMBER;
    l_inventory_item_id     NUMBER;
    l_intf_count            NUMBER := 0;
    lv_tax_code             VARCHAR2(100);
    --  PRAGMA AUTONOMOUS_TRANSACTION;
    l_prog_loc          VARCHAR2 (100) := 'init';
    l_inventory_number  VARCHAR2 (100);
    l_calcualte_price   VARCHAR2 (50);
    lv_price_flag       VARCHAR2(50);
    l_accounting_string VARCHAR2 (50);
    l_return_reason     VARCHAR2 (100);
    k_proc_name         VARCHAR2(100):='createorderline_interface';
    l_log_label         VARCHAR2(2000);
    l_message           VARCHAR2(2000);
    v_uom               VARCHAR2(80);
    v_salesrep          VARCHAR2(200);
    ---start 10.03.2016
    v1_salesrep_id        NUMBER:=NULL;
    lv_org_name           VARCHAR2(100);
    ln_user_id            NUMBER;
    v_context             VARCHAR2(100);
    v_return_attribute1   VARCHAR2(80);
    g_user_id             NUMBER;
    lv_attribute10        VARCHAR2(240);
    lv_attribute4         VARCHAR2(240);
    lv_attribute5         VARCHAR2(240);
    lv_attribute6         VARCHAR2(240);
    lv_attribute7         VARCHAR2(240);
    lv_attribute2         VARCHAR2(240);
    lv_attribute8         VARCHAR2(240);
    lv_attribute3         VARCHAR2(240);
    lv_attribute12        VARCHAR2(240);
    lv_attribute17        VARCHAR2(240);--defect 5398
    lv_curr_code          VARCHAR2(100);
    ln_curr_rate          NUMBER;
    ln_unit_selling_price NUMBER;
    lv_credit_card        VARCHAR2(150);
    lv_header_curr        VARCHAR2(40);
    lv_new_curr_code      VARCHAR2(100);
    ln_unit_list_price    NUMBER;
    ln_tax_value          NUMBER;
    e_no_salesper         EXCEPTION ;
    lv_receipt_method     VARCHAR2(60);
    lv_context_value      VARCHAR2(200);
    lv_attr3              VARCHAR2(240);
    lv_attr6              VARCHAR2(240);
    lv_attr8              VARCHAR2(240);
    lv_attr12             VARCHAR2(240);
    lv_attr14             VARCHAR2(240);
    lv_attr2              VARCHAR2(240);
    ln_cnt_desc           NUMBER:=0;
    ln_salesrep_return    NUMBER;
    lv_item               VARCHAR2(100);
    ln_inventory_item_id  NUMBER;
    lv_uom                VARCHAR2(80);
    ln_unit_price_ret     NUMBER;
    ln_tax                NUMBER;
    ln_selling_price_ret  NUMBER;
    ln_cust_count         NUMBER;
    lv_modifier           VARCHAR2(200);
    lv_return_flag_found  VARCHAR2(10):='TRUE';
    l_transaction_id      NUMBER;
    ln_adjust_amt_ret     NUMBER;
    ln_list_header_id_ret NUMBER;
    ln_list_line_id_ret   NUMBER;
    lv_uom_flag           VARCHAR2(10):='TRUE';
    ln_warehouse_id       NUMBER;
    ln_trans_type         NUMBER;
    lv_sales_yes_no       VARCHAR2(20);
    ln_order_source_id    NUMBER;
    lv_attr16             VARCHAR2(240);
    lv_attribute16        VARCHAR2(240);
    -- p_error_message       VARCHAR2(2000);
    --end
  BEGIN
    ln_unit_list_price    :=NULL;
    ln_tax_value          :=NULL;
    ln_unit_selling_price :=NULL;
    lv_new_curr_code      :=NULL;
    l_prog_loc            := 'getline_id';
    /* start wave 2 modification */
    BEGIN
      ln_trans_type:= get_transaction_type_id(p_order_head_rec.order_source, p_order_head_rec.order_type, p_order_head_rec.org_id, p_status_code, p_error_message);
      xxcu_common_log_rt.msglog ('INFO', 'transaction type id '||ln_trans_type, 1117, '1', 'get_transaction_type_id', '-1' );
    EXCEPTION
    WHEN OTHERS THEN
      xxcu_common_log_rt.msglog ('ERR', 'Failed to derive transaction type id 3 '||sqlerrm||dbms_utility.format_error_backtrace, 1117, '1', 'get_transaction_type_id', '-1' );
      ln_trans_type :=NULL;
    END;
    BEGIN
      SELECT warehouse_id
      INTO ln_warehouse_id
      FROM oe_transaction_types_all
      WHERE transaction_type_id= ln_trans_type;
      xxcu_common_log_rt.msglog ('INFO', 'warehouse id '||ln_warehouse_id, 1117, '1', 'get_transaction_type_id', '-1' );
    EXCEPTION
    WHEN OTHERS THEN
      ln_warehouse_id:=NULL;
    END;
    /* end wave 2 modification */
    /* start defect 3243 */
    BEGIN
      -- g_order_source_id:=getordersourceid(p_order_head_rec.order_source);
      xxcu_common_log_rt.msglog ('INFO', 'g_order_source_id'||g_order_source_id, 1117, '1', 'getinventory_item_id', '-1' );
      l_inventory_item_id := getinventory_item_id (p_order_line_rec.itemno,p_order_head_rec.order_source,p_order_head_rec.order_type,ln_warehouse_id);
      xxcu_common_log_rt.msglog ('INFO', 'inventory item id '||l_inventory_item_id, 1117, '1', 'getinventory_item_id', '-1' );
    EXCEPTION
    WHEN OTHERS THEN
      l_inventory_item_id:=NULL;
    END;
    /* end defect 3243 */
    IF p_order_line_rec.ret_orderlineidsource IS NOT NULL THEN
      l_line_id                               := getline_id (p_header_id,p_order_line_rec.ret_orderlineidsource,p_org_id);
    ELSE
      l_line_id := NULL;
    END IF;
    /* Start Version added Kavita 1.30 CR#2499*/
    BEGIN
      ln_customer_id := getcustomer_id (p_order_head_rec.customer_number);
    EXCEPTION
    WHEN OTHERS THEN
      ln_customer_id:=NULL;
    END;
    /*End Version added Kavita 1.30 CR#2499*/
    l_prog_loc := 'select count';
    --if inventory_item_id is not found
    /* IF l_inventory_item_id IS NULL THEN
    l_inventory_number   := p_order_line_rec.itemno;
    ELSE
    l_inventory_number := getinventory_number (l_inventory_item_id,p_org_id);
    END IF;*/
    --  commented by snehal for CR1320
    /* start defect 3399 */
    BEGIN
      l_inventory_number    := getinventory_number (p_order_head_rec.order_source,p_order_head_rec.order_type,l_inventory_item_id,p_org_id); --Added by snehal for CR1320
      IF(l_inventory_number IS NULL) THEN
        l_inventory_number  :=p_order_line_rec.itemno;
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      l_inventory_number:=p_order_line_rec.itemno;
    END;
    /* end defect 3399 */
    /* start wave 2 modification */
    /* start defect 3703 */
    BEGIN
      SELECT NVL(upper(ffvv.attribute12),'N')
      INTO lv_price_flag
      FROM fnd_flex_value_sets ffvs,
        fnd_flex_values ffvv
      WHERE ffvs.flex_value_set_name='XXCU_OM_SOURCE_ORDER_TYPE'
      AND ffvs.flex_value_set_id    =ffvv.flex_value_set_id
      AND upper(ffvv.flex_value)    =upper(p_order_head_rec.order_source);
    EXCEPTION
    WHEN OTHERS THEN
      lv_price_flag:='N';
    END;
    IF (lv_price_flag='Y' AND p_order_line_rec.unit_list_price IS NULL OR p_order_line_rec.unit_selling_price IS NULL) THEN
      /* end defect 3703*/
      l_calcualte_price := 'Y';
    ELSE
      l_calcualte_price := 'N';
    END IF;
    /* end wave 2 modification */
    dbms_output.put_line('l_line_id'|| l_line_id);
    BEGIN
      SELECT name
      INTO lv_org_name
      FROM hr_operating_units
      WHERE organization_id=p_org_id;
      SELECT userid
      INTO g_user_id
      FROM xxcu_int_init_app_logons
      WHERE procedure_name   =upper('XXCU_ONT_CREATE_ORDER_PKG')
      AND operating_unit_name=lv_org_name;
    EXCEPTION
    WHEN OTHERS THEN
      g_user_id :=fnd_global.user_id;
    END;
    BEGIN
      SELECT lookup_code
      INTO l_return_reason
      FROM apps.fnd_lookup_values lv
      WHERE lv.language     = userenv('LANG')
      AND upper(lv.meaning) = upper(p_order_line_rec.reason_code)
      AND lookup_type       ='CREDIT_MEMO_REASON';
    EXCEPTION
    WHEN OTHERS THEN
      l_return_reason:='NO REASON';
      /* Version 1.11 Defect 349 */
      dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
    END;
    BEGIN
      SELECT DISTINCT ooha.header_id
      INTO v_return_attribute1
      FROM oe_order_headers_all ooha,
        oe_order_lines_all oola
      WHERE ooha.header_id      =oola.header_id
      AND oola.orig_sys_line_ref=p_order_line_rec.ret_orderlineidsource
        /* start defect 3149 */
      AND oola.header_id=p_header_id
        /*end */
      AND ooha.org_id = p_org_id;
    EXCEPTION
    WHEN OTHERS THEN
      v_return_attribute1:=NULL;
    END;
    /* BEGIN
    SELECT ccid
    INTO l_accounting_string
    FROM
    (SELECT cost_of_sales_account ccid
    FROM mtl_system_items_b
    WHERE segment1      = p_order_line_rec.itemno
    AND organization_id =p_org_id
    UNION
    SELECT expense_Account ccid
    FROM mtl_system_items_b
    WHERE segment1      = p_order_line_rec.itemno
    AND organization_id =p_org_id
    UNION
    SELECT encumbrance_account ccid
    FROM mtl_system_items_b
    WHERE segment1      = p_order_line_rec.itemno
    AND organization_id =p_org_id
    UNION
    SELECT sales_Account ccid
    FROM mtl_system_items_b
    WHERE segment1      = p_order_line_rec.itemno
    AND organization_id =p_org_id
    ) WHERE ROWNUM=1;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    l_accounting_string:=NULL;
    dbms_output.put_line( SQLERRM||dbms_utility.format_error_backtrace);
    END;
    dbms_output.put_line('l_accounting_string'|| l_accounting_string);*/
    dbms_output.put_line('l_return_reason'|| l_return_reason);
    BEGIN
      -- IF l_line_id  IS NULL OR (NOT p_order_line_rec.aggregateline) THEN
      l_operation := 'INSERT'; --oe_globals.g_opr_insert;
      --END IF;
      l_prog_loc          := 'insert into';
      p_num_orderlines    := p_num_orderlines + 1;
      p_orig_sys_line_ref := p_order_line_rec.orderlineidsource; --  New line, new ref.
      /* start wave 2 modification */
      BEGIN
        ln_trans_type:= get_transaction_type_id(p_order_head_rec.order_source, p_order_head_rec.order_type, p_order_head_rec.org_id, p_status_code, p_error_message);
      EXCEPTION
      WHEN OTHERS THEN
        xxcu_common_log_rt.msglog ('ERR', 'Failed to derive transaction type id 4 '||sqlerrm||dbms_utility.format_error_backtrace, 1117, '1', 'get_transaction_type_id', '-1' );
        ln_trans_type:=NULL;
      END;
      BEGIN
        SELECT warehouse_id
        INTO ln_warehouse_id
        FROM oe_transaction_types_all
        WHERE transaction_type_id= ln_trans_type;
      EXCEPTION
      WHEN OTHERS THEN
        ln_warehouse_id:=NULL;
      END;
      /* end wave 2 modification */
      ---start 10.03.2016
      BEGIN
        dbms_output.put_line(l_inventory_item_id || p_org_id);
        /* start wave 2 modification artf5860509 */
        BEGIN
          SELECT COUNT(tax_rate_code)
          INTO ln_tax
          FROM zx_rates_b
          WHERE tax_rate_code=p_order_line_rec.tax_code
          AND effective_to  IS NULL
          AND active_flag    ='Y';
        EXCEPTION
        WHEN OTHERS THEN
          ln_tax:=0;
        END;
        IF(ln_tax=0) THEN
          BEGIN
            SELECT tag
            INTO lv_tax_code
            FROM fnd_lookup_values_vl
            WHERE lookup_type    ='PB_TAX_CODE_MAPPING'
            AND lookup_code      =p_order_line_rec.tax_code
            AND end_date_active IS NULL
            AND enabled_flag     ='Y';
          EXCEPTION
          WHEN OTHERS THEN
            lv_tax_code :=NULL;
          END;
        ELSE
          lv_tax_code:=p_order_line_rec.tax_code;
        END IF;
      END;
      /* end wave 2 modification */
      BEGIN
        SELECT warehouse_id
        INTO ln_warehouse_id
        FROM oe_transaction_types_all
        WHERE transaction_type_id= ln_trans_type;
      EXCEPTION
      WHEN OTHERS THEN
        ln_warehouse_id:=NULL;
      END;
      /* start wave 2 modification */
      BEGIN
        SELECT ffvv.attribute11
        INTO lv_context_value
        FROM fnd_flex_value_sets ffvs,
          fnd_flex_values ffvv
        WHERE ffvs.flex_value_set_name='XXCU_OM_SOURCE_ORDER_TYPE'
        AND ffvs.flex_value_set_id    =ffvv.flex_value_set_id
        AND upper(ffvv.flex_value)    =upper(p_order_head_rec.order_source);
      EXCEPTION
      WHEN OTHERS THEN
        --xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the xxcu_invoice_spec_p > ::Contact your system administrator:: ' || SQLERRM );
        lv_context_value:=NULL;
      END;
      BEGIN
        SELECT COUNT(*)
        INTO ln_cnt_desc
        FROM fnd_descr_flex_contexts_vl
        WHERE descriptive_flex_context_name=lv_context_value
        AND descriptive_flexfield_name     ='OE_LINE_ATTRIBUTES';
      EXCEPTION
      WHEN OTHERS THEN
        ln_cnt_desc:=0;
      END;
      --xxcu_common_log_rt.msglog ('INFO', 'lv context value  '||lv_context_value, 1117, '1', 'lv context value', '-1' );
      IF(lv_context_value IS NULL OR ln_cnt_desc=0) THEN
        BEGIN
          SELECT DECODE(item_type,NULL,NULL,'TMS')
          INTO lv_context_value
          FROM mtl_system_items
          WHERE inventory_item_id=l_inventory_item_id
          AND item_type         IN
            (SELECT ffvv.flex_value
            FROM fnd_flex_value_sets ffvs,
              fnd_flex_values_vl ffvv
            WHERE ffvs.flex_value_set_name = 'XXCU_OM_TAX_ITEM_TYPE'
            AND ffvs.flex_value_set_id     =ffvv.flex_value_set_id
            )
          AND organization_id =ln_warehouse_id;
        EXCEPTION
        WHEN OTHERS THEN
          lv_context_value:=NULL;
        END;
      END IF;
      IF(p_order_line_rec.unit_weight IS NOT NULL) THEN
        lv_attr3                      :=p_order_line_rec.unit_weight;
      ELSE
        lv_attr3:=p_order_line_rec.ship_to;
      END IF;
      IF(p_order_line_rec.price_zone IS NOT NULL) THEN
        lv_attr8                     :=p_order_line_rec.price_zone;
      END IF;
      IF(p_order_line_rec.gift_recipient IS NOT NULL) THEN
        lv_attr12                        :=p_order_line_rec.gift_recipient;
      ELSE
        lv_attr12 :=p_order_line_rec.assignment_number;
      END IF;
      IF(p_order_line_rec.gift_ship_to IS NOT NULL) THEN
        lv_attr14                      :=p_order_line_rec.gift_ship_to;
      END IF;
      IF(p_order_line_rec.weight_group IS NOT NULL) THEN
        lv_attr2                       :=p_order_line_rec.weight_group;
      END IF;
      /* start defect 4746 */
      IF(p_order_line_rec.combination_id IS NOT NULL) THEN
        lv_attr16                        :=p_order_line_rec.combination_id;
      END IF;
      /* end defect 4746 */
      /* end wave 2 modification */
      /* start version 1.28 CR 2499 */
      /*  BEGIN
      /* Version 1.14 Defect 649 */
      /* SELECT jrs.salesrep_id
      INTO v_salesrep_id
      FROM JTF_RS_DEFRESOURCES_V jtfr,
      JTF_RS_SALESREPS jrs
      WHERE upper(jrs.salesrep_number)=upper(p_order_line_rec.Salesperson)
      /* Version 1.18 */
      /* AND jrs.resource_id =jtfr.resource_id
      AND jrs.org_id      =p_org_id;*/
      /* end */
      /* wave 2 modification */
      BEGIN
        SELECT NVL(ffvv.attribute7,'N')
        INTO lv_sales_yes_no
        FROM fnd_flex_value_sets ffvs,
          fnd_flex_values ffvv
        WHERE ffvs.flex_value_set_name='XXCU_OM_SOURCE_ORDER_TYPE'
        AND ffvs.flex_value_set_id    =ffvv.flex_value_set_id
        AND upper(ffvv.flex_value)    =upper(p_order_head_rec.order_source);
      EXCEPTION
      WHEN OTHERS THEN
        lv_sales_yes_no := 'N';
      END;
      IF(lv_sales_yes_no='N') THEN
        /* Start CR# 2811 */
        BEGIN
          SELECT salesrep_id
          INTO ln_salesrep_return
          FROM oe_order_lines_all
          WHERE 1              =1
          AND orig_sys_line_ref=p_order_line_rec.ret_orderlineidsource
            /* start defect 3149 */
          AND header_id=p_header_id
            /*end */
          AND org_id = p_org_id;
        EXCEPTION
        WHEN no_data_found THEN
          v_salesrep := upper(p_order_line_rec.salesperson);--RAISE e_no_salesper; ---RAISE ERROR IF SALESPERSON IS INVALID DEFECT 1387
        END ;
        BEGIN
          SELECT salesrep_id
          INTO v1_salesrep_id
          FROM jtf.jtf_rs_salesreps
            -- WHERE upper(name)=upper(p_order_line_rec.Salesperson) --commented by snehal
          WHERE upper(salesrep_number)=upper(p_order_line_rec.salesperson) --changd name by number by snehal
          AND org_id                  =p_org_id;                          ---Uncomment this code as We need to check Incming Accounting Unit tag for line
        EXCEPTION
        WHEN no_data_found THEN
          v_salesrep := upper(p_order_line_rec.salesperson);--RAISE e_no_salesper; ---RAISE ERROR IF SALESPERSON IS INVALID DEFECT 1387
        END;
      END IF;
      /*  WHEN e_no_salesper THEN
      xxcu_log_pkg.log(p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Mixed Order Import not allowed ' || g_program_loc || ' ' || v_batch_seq_no || SQLERRM );
      p_status_code  := 2;
      p_error_message:='INvalid Sales person in order lines.';  */
      /* WHEN OTHERS THEN
      l_l
      excepiog_label := 'Invalid Sales Person';
      l_message   := 'Sales Person Not Found';
      xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_proc_name || '.' || l_log_label , l_message, false);
      END;*/
      BEGIN
        ln_trans_type:= get_transaction_type_id(p_order_head_rec.order_source, p_order_head_rec.order_type, p_order_head_rec.org_id, p_status_code, p_error_message);
      EXCEPTION
      WHEN OTHERS THEN
        xxcu_common_log_rt.msglog ('ERR', 'Failed to derive transaction type id 5 '||sqlerrm||dbms_utility.format_error_backtrace, 1117, '1', 'get_transaction_type_id', '-1' );
        ln_trans_type:=NULL;
      END;
      BEGIN
        SELECT warehouse_id
        INTO ln_warehouse_id
        FROM oe_transaction_types_all
        WHERE transaction_type_id=ln_trans_type;
      EXCEPTION
      WHEN OTHERS THEN
        ln_warehouse_id:=NULL;
      END;
      BEGIN
        /* start CR 3268 */
        --IF(p_order_line_rec.Quantity_UOM IS NULL) THEN
        --   v_uom                          :='Stk';
        -- ELSE
        -- begin
        --    lv_uom_flag                      :='TRUE';
        --    IF(p_order_line_rec.Quantity_UOM IS NOT NULL) THEN
        SELECT primary_uom_code
        INTO v_uom
        FROM mtl_system_items_b
        WHERE inventory_item_id    =l_inventory_item_id
        AND enabled_flag           ='Y'
        AND organization_id        =ln_warehouse_id
        AND (end_date_active      IS NULL
        OR TRUNC(end_date_active) >=TRUNC(sysdate));
        --    END IF;
      EXCEPTION
      WHEN OTHERS THEN
        v_uom      :=NULL;--p_order_line_rec.Quantity_UOM;--defect 3399
        lv_uom_flag:='FALSE';
      END;
      /* end CR 3268 */
      --  END;
      IF(p_order_line_rec.country_code_from IS NOT NULL) THEN
        BEGIN
          SELECT territory_code
          INTO v_country_from
          FROM fnd_territories_vl
          WHERE upper(territory_code)=upper(p_order_line_rec.country_code_from);
        EXCEPTION
        WHEN OTHERS THEN
          l_log_label := 'Invalid Country';
          l_message   := 'From Country Not Found';
          xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_proc_name || '.' || l_log_label , l_message, false);
        END;
      END IF;
      IF(p_order_line_rec.country_code_from IS NOT NULL) THEN
        BEGIN
          SELECT territory_code
          INTO v_country_to
          FROM fnd_territories_vl
          WHERE upper(territory_code)=upper(p_order_line_rec.country_code_to);
        EXCEPTION
        WHEN OTHERS THEN
          l_log_label := 'Invalid Country';
          l_message   := 'To Country Not Found';
          xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_proc_name || '.' || l_log_label , l_message, false);
        END;
      END IF;
      lv_return_flag_found:='TRUE';
      /* start 19.04.2016 Artifact artf4721802*/
      BEGIN
        SELECT attribute10,
          attribute4,
          attribute5,
          attribute6,
          attribute7,
          attribute2,
          /* start CR 2811 */
          attribute3,
          ordered_item,
          inventory_item_id,
          order_quantity_uom,
          unit_list_price,
          unit_selling_price,
          /* end */
          /* start wave 2 modificatio */
          attribute8,
          attribute12,
          attribute16,
          attribute17
          /* end wave 2 modification */
        INTO lv_attribute10,
          lv_attribute4,
          lv_attribute5,
          lv_attribute6,
          lv_attribute7,
          lv_attribute2,
          /* start CR 2811 */
          lv_attribute3,
          lv_item,
          ln_inventory_item_id,
          lv_uom,
          ln_unit_price_ret,
          ln_selling_price_ret,
          /* end */
          /* start wave 2 modification */
          lv_attribute8 ,
          lv_attribute12,
          lv_attribute16,
          lv_attribute17--defect 5398
          /* end wave 2 modification */
        FROM oe_order_lines_all
        WHERE 1              =1
        AND orig_sys_line_ref=p_order_line_rec.ret_orderlineidsource
          /* start defect 3149 */
        AND header_id=p_header_id
          /*end */
        AND org_id = p_org_id; --added org_id defect#2848
      EXCEPTION
      WHEN OTHERS THEN
        lv_return_flag_found:='FALSE';
        lv_attribute10      :=NULL;
        lv_attribute4       :=NULL;
        lv_attribute5       :=NULL;
        lv_attribute6       :=NULL;
        lv_attribute7       :=NULL;
        lv_attribute3       :=NULL;
        lv_item             :=NULL;
        ln_inventory_item_id:=NULL;
        lv_uom              :=NULL;
        ln_unit_price_ret   :=NULL;
        ln_selling_price_ret:=NULL;
        lv_attribute2       :=NULL;
        lv_attribute16      :=NULL;
        lv_attribute17      :=NULL;
      END;
      /*end*/
      /* Version 1.9 artf4774289  */
      BEGIN
        SELECT gso.currency_code
        INTO lv_curr_code
        FROM hr_operating_units hou,
          gl_sets_of_books gso
        WHERE gso.set_of_books_id=hou.set_of_books_id
        AND hou.organization_id  =p_org_id;
      EXCEPTION
      WHEN OTHERS THEN
        lv_curr_code:=NULL;
      END;
      BEGIN
        SELECT attribute15 ,
          transactional_curr_code
        INTO lv_credit_card,
          lv_header_curr
        FROM oe_headers_iface_all
        WHERE orig_sys_document_ref=p_orig_sys_document_ref;
      EXCEPTION
      WHEN OTHERS THEN
        lv_credit_card:=NULL;
        lv_header_curr:=NULL;
      END;
      IF(get_currencycode(p_cust_id,p_org_id) IS NOT NULL AND lv_credit_card IS NULL AND p_curr_code=lv_curr_code) THEN
        lv_new_curr_code                      :=get_currencycode(p_cust_id,p_org_id);
        BEGIN
          SELECT conversion_rate
          INTO ln_curr_rate
          FROM gl_daily_rates
          WHERE from_currency       =lv_curr_code
          AND to_currency           =lv_new_curr_code
          AND TRUNC(conversion_date)= TRUNC(p_pricing_date)
          AND conversion_type       ='Corporate';
        EXCEPTION
        WHEN OTHERS THEN
          ln_curr_rate :=1 ;
        END;
        ln_unit_selling_price:=ln_curr_rate* p_order_line_rec.unit_selling_price;
        ln_unit_list_price   :=ln_curr_rate* p_order_line_rec.unit_list_price;
        ln_tax_value         :=ln_curr_rate* p_order_line_rec.tax_value;
      END IF;
      BEGIN
        SELECT getpayment_term(p_org_id,DECODE(lv_new_curr_code, NULL,p_curr_code,lv_new_curr_code),p_agreement_num,p_cust_id, p_order_head_rec.payment_term, p_order_head_rec.order_source--CR 4813,4790
          )
        INTO l_payment_term
        FROM dual;
        IF(l_payment_term IS NULL) THEN
          l_log_label     := 'Payment Term Invalid';
          l_message       := 'Payment Term Not Found';
          xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_proc_name || '.' || l_log_label , l_message, false);
        END IF;
      EXCEPTION
      WHEN OTHERS THEN
        l_log_label := 'Payment Term Invalid';
        l_message   := 'Payment Term Not Found';
        xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_proc_name || '.' || l_log_label , l_message, false);
      END;
      -----------------------
      -------------------checkng if lv_context_value is not null and return order line id is null means regular order with TMS context-----------------
      IF(lv_context_value IS NOT NULL AND p_order_line_rec.ret_orderlineidsource IS NULL) THEN
        BEGIN
          INSERT
          INTO oe_lines_iface_all
            (
              order_source_id,
              org_id,
              sold_to_org_id,
              /*Version added Kavita 1.30 CR#2499*/
              line_id,-- commented by vedangi as line id need not be passed in interface it will be populated by standard order import
              orig_sys_document_ref,
              orig_sys_line_ref,
              /* start wave 2 modification */
              link_to_line_ref,
              top_model_line_ref,
              /* end wave 2 modification */
              order_quantity_uom,
              unit_list_price,
              unit_selling_price,
              tax,
              customer_item_net_price,
              tax_value,
              calculate_price_flag,
              created_by,
              last_updated_by,
              inventory_item_id,
              ordered_quantity,
              context,
              attribute10,
              -- return_reason_code,
              --  attribute2,
              attribute4,
              attribute5,
              attribute6,
              attribute7,
              --attribute5,
              operation_code,
              creation_date,
              last_update_date,
              inventory_item,
              salesrep, --Added by rahul on 21112016
              salesrep_id,
              payment_term_id,
              pricing_date,
              attribute3,
              tax_code
              /* version 1.23 */
              ,
              global_attribute1 ,---- Added by Divyansh for Incident#E2-IM013492120
              attribute8,
              attribute12,
              attribute14,
              attribute2,
              attribute16,
              attribute17,         --defect 5398
              shipping_method_code -- CR 4813
            )
            VALUES
            (
              g_order_source_id,
              p_org_id,
              ln_customer_id,          -- /*Version added Kavita 1.30 CR#2499*/
              oe_order_lines_s.nextval,--l_line_id,commented by vedangi as line id need not be passed in interface it will be populated by standard order import
              p_orig_sys_document_ref,
              p_order_line_rec.orderlineidsource,
              /* start wave 2 modification */
              p_order_line_rec.link_to_line_ref,
              p_order_line_rec.top_line_ref,
              /* end wave 2 modification */
              v_uom,
              ROUND(DECODE(ln_unit_list_price, NULL,p_order_line_rec.unit_list_price,ln_unit_list_price),5),
              /* wave 2 modification */
              --added 3 instead of 2 to ROUND digit Version 1.30 kavita CR#2499
              ROUND(DECODE(ln_unit_selling_price, NULL,p_order_line_rec.unit_selling_price,ln_unit_selling_price),5),
              /* wave 2 modification */
              --added 3 instead of 2 to ROUND digit Version 1.30 kavita CR#2499
              p_order_line_rec.tax,
              TO_CHAR(p_order_line_rec.quantity)*ROUND(DECODE(ln_unit_selling_price, NULL,p_order_line_rec.unit_selling_price,ln_unit_selling_price),2),--p_order_line_rec.customer_item_net_price,
              ROUND(DECODE(ln_tax_value, NULL,p_order_line_rec.tax_value,ln_tax_value),2),                                                              -- ((TO_CHAR(p_order_line_rec.quantity)*p_order_line_rec.unit_list_price)*TO_CHAR(p_order_line_rec.quantity))*p_order_line_rec.tax/100,
              l_calcualte_price,
              g_user_id,
              g_user_id,
              l_inventory_item_id,
              TO_CHAR(p_order_line_rec.quantity),
              lv_context_value,-- p_order_line_rec.orderlineidsource,
              p_order_line_rec.discount_breakup,
              -- l_return_reason,--p_order_line_rec.reason_code,
              p_order_line_rec.postal_code_from,
              upper(p_order_line_rec.country_code_from),
              p_order_line_rec.postal_code_to,
              upper(p_order_line_rec.country_code_to),
              -- p_order_line_rec.ship_from,
              -- p_order_line_rec.ship_to,
              -- p_order_line_rec.salesperson,
              --l_accounting_string,
              l_operation,
              sysdate,
              sysdate,
              l_inventory_number,
              DECODE(lv_sales_yes_no,'N',upper(p_order_line_rec.salesperson),''),-- v_salesrep,
              v1_salesrep_id,
              l_payment_term,
              p_pricing_date,
              lv_attr3,
              lv_tax_code--p_order_line_rec.tax_code
              /* version 1.23 */
              ,
              g_intf_inv_spec_seq ,---- Added by Divyansh for Incident#E2-IM013492120
              lv_attr8,
              lv_attr12 ,
              lv_attr14,
              lv_attr2,
              p_order_line_rec.itemno,--lv_attr16--defect 4746--defect 5360
              lv_attr16,              --defect 5398
              p_order_line_rec.shipping_method
            );
        EXCEPTION
        WHEN OTHERS THEN
          p_status_code := 2;
          xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error while updating error code for invalid return order' || g_program_loc || '> ::Contact your system administrator:: ' || sqlerrm );
          p_error_message:=sqlerrm||dbms_utility.format_error_backtrace;
          xxcu_common_log_rt.msglog ('INFO', 'Error in insert of lines'||sqlerrm||dbms_utility.format_error_backtrace, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
        END ;
        ---------------------regular order with Non TMS context-----------------------------
      ELSE
        IF(lv_context_value IS NULL AND p_order_line_rec.ret_orderlineidsource IS NULL) THEN
          BEGIN
            INSERT
            INTO oe_lines_iface_all
              (
                order_source_id,
                org_id,
                sold_to_org_id,
                /*Version added Kavita 1.30 CR#2499*/
                line_id,--commented by vedangi as line id need not be passed in interface it will be populated by standard order import
                orig_sys_document_ref,
                orig_sys_line_ref,
                /* start wave 2 modification */
                link_to_line_ref,
                top_model_line_ref,
                /* end wave 2 modification */
                order_quantity_uom,
                unit_list_price,
                unit_selling_price,
                tax,
                customer_item_net_price,
                tax_value,
                calculate_price_flag,
                created_by,
                last_updated_by,
                inventory_item_id,
                ordered_quantity,
                context,
                attribute10,
                -- return_reason_code,
                --  attribute2,
                attribute4,
                attribute5,
                attribute6,
                attribute7,
                --attribute5,
                operation_code,
                creation_date,
                last_update_date,
                inventory_item,
                payment_term_id,
                salesrep, --Added by rahul on 21112016
                salesrep_id,
                pricing_date,
                attribute3,
                tax_code
                /* version 1.23 */
                ,
                global_attribute1, ---- Added by Divyansh for Incident#E2-IM013492120
                attribute8,
                attribute12,
                attribute14,
                attribute2,
                attribute16,         --defect 5360
                attribute17,         --defect 5398
                shipping_method_code -- CR 4813
              )
              VALUES
              (
                g_order_source_id,
                p_org_id,
                ln_customer_id,
                /*Version added Kavita 1.30 CR#2499*/
                oe_order_lines_s.nextval,--  l_line_id,commented by vedangi as line id need not be passed in interface it will be populated by standard order import
                p_orig_sys_document_ref,
                p_order_line_rec.orderlineidsource,
                /* start wave 2 modification */
                p_order_line_rec.link_to_line_ref,
                p_order_line_rec.top_line_ref,
                /* end wave 2 modification */
                v_uom,
                ROUND(DECODE(ln_unit_list_price, NULL,p_order_line_rec.unit_list_price,ln_unit_list_price),3),          --added 3 instead of 2 to ROUND digit Version 1.30 kavita CR#2499
                ROUND(DECODE(ln_unit_selling_price, NULL,p_order_line_rec.unit_selling_price,ln_unit_selling_price),3), --added 3 instead of 2 to ROUND digit Version 1.30 kavita CR#2499
                p_order_line_rec.tax,
                TO_CHAR(p_order_line_rec.quantity)*ROUND(DECODE(ln_unit_selling_price, NULL,p_order_line_rec.unit_selling_price,ln_unit_selling_price),2),--p_order_line_rec.customer_item_net_price,
                ROUND(DECODE(ln_tax_value, NULL,p_order_line_rec.tax_value,ln_tax_value),2),                                                              -- ((TO_CHAR(p_order_line_rec.quantity)*p_order_line_rec.unit_list_price)*TO_CHAR(p_order_line_rec.quantity))*p_order_line_rec.tax/100,
                l_calcualte_price,
                g_user_id,
                g_user_id,
                l_inventory_item_id,
                TO_CHAR(p_order_line_rec.quantity),
                lv_context_value,-- p_order_line_rec.orderlineidsource,
                p_order_line_rec.discount_breakup,
                --l_return_reason,--p_order_line_rec.reason_code,
                p_order_line_rec.postal_code_from,
                upper(p_order_line_rec.country_code_from),
                p_order_line_rec.postal_code_to,--lv_attr6,-- p_order_line_rec.postal_code_to,--defect 5055
                upper(p_order_line_rec.country_code_to),
                -- p_order_line_rec.ship_from,
                -- p_order_line_rec.ship_to,
                -- p_order_line_rec.salesperson,
                --l_accounting_string,
                l_operation,
                sysdate,
                sysdate,
                l_inventory_number,
                l_payment_term,
                DECODE(lv_sales_yes_no,'N',upper(p_order_line_rec.salesperson),''),-- v_salesrep,--upper(p_order_line_rec.salesperson),--v_salesrep,
                v1_salesrep_id,
                p_pricing_date,
                lv_attr3,  --p_order_line_rec.ship_to,
                lv_tax_code--p_order_line_rec.tax_code
                /* version 1.23 */
                ,
                g_intf_inv_spec_seq , ---- Added by Divyansh for Incident#E2-IM013492120
                lv_attr8,
                lv_attr12 ,
                lv_attr14,
                lv_attr2,
                p_order_line_rec.itemno,         --lv_attr16--defect 4746--defect 5360
                lv_attr16,                       --defect 5398
                p_order_line_rec.shipping_method -- CR 4813
              );
          EXCEPTION
          WHEN OTHERS THEN
            p_status_code := 2;
            xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error while updating error code for invalid return order' || g_program_loc || '> ::Contact your system administrator:: ' || sqlerrm );
            p_error_message:=sqlerrm||dbms_utility.format_error_backtrace;
            xxcu_common_log_rt.msglog ('INFO', 'Error in insert of lines'||sqlerrm||dbms_utility.format_error_backtrace, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
          END;
          ----------------------------return order with TMS context---------------------------------
        ELSE
          IF(lv_context_value IS NOT NULL AND p_order_line_rec.ret_orderlineidsource IS NOT NULL) THEN
            BEGIN
              INSERT
              INTO oe_lines_iface_all
                (
                  order_source_id,
                  org_id,
                  sold_to_org_id,
                  /*Version added Kavita 1.30 CR#2499*/
                  line_id,--commented by vedangi as line id need not be passed in interface it will be populated by standard order import
                  orig_sys_document_ref,
                  orig_sys_line_ref,
                  /* start wave 2 modification */
                  link_to_line_ref,
                  top_model_line_ref,
                  /* end wave 2 modification */
                  order_quantity_uom,
                  unit_list_price,
                  unit_selling_price,
                  tax,
                  customer_item_net_price,
                  tax_value,
                  calculate_price_flag,
                  created_by,
                  last_updated_by,
                  inventory_item_id,
                  ordered_quantity,
                  context,
                  attribute10,
                  return_reason_code,
                  --  attribute2,
                  attribute4,
                  attribute5,
                  attribute6,
                  attribute7,
                  --attribute5,
                  operation_code,
                  creation_date,
                  last_update_date,
                  inventory_item,
                  salesrep, --Added by rahul on 21112016
                  salesrep_id,
                  return_context,
                  return_attribute1,
                  return_attribute2,
                  reference_header_id,
                  reference_line_id,
                  payment_term_id,
                  pricing_date,
                  attribute3,
                  attribute16,
                  attribute17,
                  tax_code,
                  /* version 1.23 */
                  /* start defect 3295 */
                  /* start defect 3047 */
                  -- reference_header,
                  -- reference_line
                  return_attribute3,
                  return_attribute4
                  /* end defect 3047 */
                  /* end defect 3295 */
                  ,
                  global_attribute1, ---- Added by Divyansh for Incident#E2-IM013492120
                  shipping_method_code -- CR 4813
                )
                VALUES
                (
                  g_order_source_id,
                  p_org_id,
                  ln_customer_id,
                  /*Version added Kavita 1.30 CR#2499*/
                  oe_order_lines_s.nextval, --  l_line_id,commented by vedangi as line id need not be passed in interface it will be populated by standard order import
                  p_orig_sys_document_ref,
                  p_order_line_rec.orderlineidsource,
                  /* start wave 2 modification */
                  p_order_line_rec.link_to_line_ref,
                  p_order_line_rec.top_line_ref,
                  /* end wave 2 modification */
                  lv_uom,
                  ln_unit_price_ret,
                  --ROUND(DECODE(ln_unit_list_price, NULL,p_order_line_rec.unit_list_price,ln_unit_list_price),3),            --added 3 instead of 2 to ROUND digit Version 1.30 kavita CR#2499
                  --ROUND(DECODE(ln_unit_selling_price, NULL,p_order_line_rec.unit_selling_price,ln_unit_selling_price),3), ----added 3 instead of 2 to ROUND digit Version 1.30 kavita CR#2499
                  ln_selling_price_ret,
                  p_order_line_rec.tax,
                  TO_CHAR(p_order_line_rec.quantity)*ROUND(DECODE(ln_unit_selling_price, NULL,p_order_line_rec.unit_selling_price,ln_unit_selling_price),2),--p_order_line_rec.customer_item_net_price,
                  ROUND(DECODE(ln_tax_value, NULL,p_order_line_rec.tax_value,ln_tax_value),2),                                                              -- ((TO_CHAR(p_order_line_rec.quantity)*p_order_line_rec.unit_list_price)*TO_CHAR(p_order_line_rec.quantity))*p_order_line_rec.tax/100,
                  l_calcualte_price,                                                                                                                        --'Y',   /*version 1.18 */                                                                                                                                   --l_calcualte_price,
                  g_user_id,
                  g_user_id,
                  ln_inventory_item_id,
                  TO_CHAR(p_order_line_rec.quantity),
                  lv_context_value,    -- p_order_line_rec.orderlineidsource,
                  lv_attribute10,      --p_order_line_rec.discount_breakup,/*Artifact artf4721802*/
                  l_return_reason,     --p_order_line_rec.reason_code,
                  lv_attribute4,       --p_order_line_rec.postal_code_from,/*Artifact artf4721802*/
                  upper(lv_attribute5),--upper(p_order_line_rec.country_code_from),/*Artifact artf4721802*/
                  lv_attribute6,       --p_order_line_rec.postal_code_to,/*Artifact artf4721802*/
                  upper(lv_attribute7),--upper(p_order_line_rec.country_code_to),/*Artifact artf4721802*/
                  -- p_order_line_rec.ship_from,
                  -- p_order_line_rec.ship_to,
                  -- p_order_line_rec.salesperson,
                  --l_accounting_string,
                  l_operation,
                  sysdate,
                  sysdate,
                  lv_item,
                  DECODE(lv_sales_yes_no,'N',v_salesrep,''),-- v_salesrep,--v_salesrep,
                  ln_salesrep_return,
                  'ORDER',
                  /* start defect 3047 */
                  DECODE(lv_return_flag_found,'TRUE',v_return_attribute1,NULL),
                  DECODE(lv_return_flag_found,'TRUE',l_line_id,NULL),
                  /* end defect 3047 */
                  v_return_attribute1,
                  l_line_id,
                  l_payment_term,
                  p_pricing_date,
                  /* start CR 2811 p_order_line_rec.ship_to,*/
                  lv_attribute3,
                  lv_attribute16,--defect 4746
                  lv_attribute17,--defect 5398
                  /* end */
                  lv_tax_code,--p_order_line_rec.tax_code,
                  /* version 1.23 */
                  /* start defect 3047 */
                  /* start defect 3295 */
                  DECODE(lv_return_flag_found,'FALSE',p_order_head_rec.return_order_reference,NULL),
                  DECODE(lv_return_flag_found,'FALSE',p_order_line_rec.ret_orderlineidsource,NULL)
                  /* end defect 3295 */
                  /* end defect 3047 */
                  ,
                  g_intf_inv_spec_seq,           ---- Added by Divyansh for Incident#E2-IM013492120
                  p_order_line_rec.shipping_method -- CR 4813
                );
              /* insert into ONT.oe_credits_iface_all
              (
              ordeR_source_id,
              orig_sys_document_ref,
              orig_sys_line_ref,
              orig_sys_credit_ref,
              org_id,
              salesrep_id,
              sales_credit_type_id,
              percent,
              sold_to_org_id,
              creation_date,
              last_update_date,
              created_by,
              last_updated_by
              )
              values
              (
              g_order_source_id,
              p_orig_sys_document_ref,
              p_order_line_rec.orderlineidsource,
              'OE_SALES_CREDITS12345',
              p_org_id,
              ln_salesrep_return,
              1,
              100,
              ln_customer_id,
              sysdate,
              sysdate,
              g_user_id,
              g_user_id
              );
              commit;
              */
            EXCEPTION
            WHEN OTHERS THEN
              p_status_code := 2;
              xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error while updating error code for invalid return order' || g_program_loc || '> ::Contact your system administrator:: ' || sqlerrm );
              p_error_message:=sqlerrm||dbms_utility.format_error_backtrace;
              xxcu_common_log_rt.msglog ('INFO', 'Error in insert of lines'||sqlerrm||dbms_utility.format_error_backtrace, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
            END;
            ------------------------------return order with non TMS context--------------------------
          ELSE
            IF(lv_context_value IS NULL AND p_order_line_rec.ret_orderlineidsource IS NOT NULL) THEN
              BEGIN
                INSERT
                INTO oe_lines_iface_all
                  (
                    order_source_id,
                    org_id,
                    sold_to_org_id,
                    /*Version added Kavita 1.30 CR#2499*/
                    line_id,--commented by vedangi as line id need not be passed in interface it will be populated by standard order import
                    orig_sys_document_ref,
                    orig_sys_line_ref,
                    /* start wave 2 modification */
                    link_to_line_ref,
                    top_model_line_ref,
                    /* end wave 2 modification */
                    order_quantity_uom,
                    unit_list_price,
                    unit_selling_price,
                    tax,
                    customer_item_net_price,
                    tax_value,
                    calculate_price_flag,
                    created_by,
                    last_updated_by,
                    inventory_item_id,
                    ordered_quantity,
                    context,
                    attribute10,
                    return_reason_code,
                    --  attribute2,
                    attribute4,
                    attribute5,
                    attribute6,
                    attribute7,
                    --attribute5,
                    operation_code,
                    creation_date,
                    last_update_date,
                    inventory_item,
                    return_context,
                    return_attribute1,
                    return_attribute2,
                    reference_header_id,
                    reference_line_id,
                    payment_term_id,
                    salesrep, --Added by rahul on 21112016
                    salesrep_id,
                    pricing_date,
                    attribute3,
                    tax_code,
                    /* version 1.23 */
                    /* start defect 3295 */
                    /* start defect 3047 */
                    return_attribute3,
                    return_attribute4
                    -- reference_header,
                    -- reference_line
                    /* end defect 3047 */
                    /* end defect 3295 */
                    ,
                    global_attribute1 , ---- Added by Divyansh for Incident#E2-IM013492120
                    attribute8,
                    attribute12,
                    attribute2,
                    attribute16,
                    attribute17,         --defect 5398
                    shipping_method_code -- CR 4813
                  )
                  VALUES
                  (
                    g_order_source_id,
                    p_org_id,
                    ln_customer_id,
                    /*Version added Kavita 1.30 CR#2499*/
                    oe_order_lines_s.nextval,--l_line_id,commented by vedangi as line id need not be passed in interface it will be populated by standard order import
                    p_orig_sys_document_ref,
                    p_order_line_rec.orderlineidsource,
                    /* start wave 2 modification */
                    p_order_line_rec.link_to_line_ref,
                    p_order_line_rec.top_line_ref,
                    /* end wave 2 modification */
                    lv_uom,
                    ln_unit_price_ret,
                    -- ROUND(DECODE(ln_unit_list_price, NULL,p_order_line_rec.unit_list_price,ln_unit_list_price),3),          --added 3 instead of 2 to ROUND digit Version 1.30 kavita CR#2499
                    -- ROUND(DECODE(ln_unit_selling_price, NULL,p_order_line_rec.unit_selling_price,ln_unit_selling_price),3), --added 3 instead of 2 to ROUND digit Version 1.30 kavita CR#2499
                    ln_selling_price_ret,
                    p_order_line_rec.tax,
                    TO_CHAR(p_order_line_rec.quantity)*ROUND(DECODE(ln_unit_selling_price, NULL,p_order_line_rec.unit_selling_price,ln_unit_selling_price),2),--p_order_line_rec.customer_item_net_price,
                    ROUND(DECODE(ln_tax_value, NULL,p_order_line_rec.tax_value,ln_tax_value),2),                                                              -- ((TO_CHAR(p_order_line_rec.quantity)*p_order_line_rec.unit_list_price)*TO_CHAR(p_order_line_rec.quantity))*p_order_line_rec.tax/100,
                    l_calcualte_price,                                                                                                                        --'Y',  /* Version 1.18 */                                                                                                                                    --l_calcualte_price,
                    g_user_id,
                    g_user_id,
                    ln_inventory_item_id,
                    TO_CHAR(p_order_line_rec.quantity),
                    lv_context_value,    -- p_order_line_rec.orderlineidsource,
                    lv_attribute10,      --p_order_line_rec.discount_breakup,/*Artifact artf4721802*/
                    l_return_reason,     --p_order_line_rec.reason_code,
                    lv_attribute4,       --p_order_line_rec.postal_code_from,/*Artifact artf4721802*/
                    upper(lv_attribute5),--upper(p_order_line_rec.country_code_from),/*Artifact artf4721802*/
                    lv_attribute6,       --p_order_line_rec.postal_code_to,/*Artifact artf4721802*/
                    upper(lv_attribute7),--upper(p_order_line_rec.country_code_to),/*Artifact artf4721802*/
                    -- p_order_line_rec.ship_from,
                    -- p_order_line_rec.ship_to,
                    -- p_order_line_rec.salesperson,
                    --l_accounting_string,
                    l_operation,
                    sysdate,
                    sysdate,
                    lv_item,
                    'ORDER',
                    /* start defect 3047 */
                    DECODE(lv_return_flag_found,'TRUE',v_return_attribute1,NULL),
                    DECODE(lv_return_flag_found,'TRUE',l_line_id,NULL),
                    /* end defect 3047 */
                    v_return_attribute1,
                    l_line_id,
                    l_payment_term,
                    DECODE(lv_sales_yes_no,'N',v_salesrep,''),-- v_salesrep,--v_salesrep,
                    ln_salesrep_return,
                    p_pricing_date,
                    /* start CR 2811 p_order_line_rec.ship_to,*/
                    lv_attribute3,
                    /* end */
                    lv_tax_code,--p_order_line_rec.tax_code,
                    /* version 1.23 */
                    /* start defect 3047 */
                    /* start defect 3295 */
                    DECODE(lv_return_flag_found,'FALSE',p_order_head_rec.return_order_reference,NULL),
                    DECODE(lv_return_flag_found,'FALSE',p_order_line_rec.ret_orderlineidsource,NULL)
                    /* end defect 3295 */
                    /* end defect 3047 */
                    ,
                    g_intf_inv_spec_seq, ---- Added by Divyansh for Incident#E2-IM013492120
                    lv_attribute8,
                    lv_attribute12,
                    lv_attribute2,
                    lv_attribute16,                  --defect 4746
                    lv_attribute17,                  --defect 5398
                    p_order_line_rec.shipping_method -- CR 4813
                  );
              EXCEPTION
              WHEN OTHERS THEN
                p_status_code := 2;
                xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error while updating error code for invalid return order' || g_program_loc || '> ::Contact your system administrator:: ' || sqlerrm );
                p_error_message:=sqlerrm||dbms_utility.format_error_backtrace;
                xxcu_common_log_rt.msglog ('INFO', 'Error in insert of lines'||sqlerrm||dbms_utility.format_error_backtrace, 1117, 1, 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_pkg BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
              END;
            END IF;
          END IF;
        END IF;
      END IF;
      --    COMMIT; --commented for E2-IM013089363 (defect 8035)
      /* start CR 3268 */
      IF(lv_uom_flag='FALSE' AND upper(p_order_type) ='REGULAR') THEN
        BEGIN
          UPDATE oe_headers_iface_all
          SET error_flag             ='Y'
          WHERE orig_sys_document_ref=p_order_head_rec.order_reference;
          --   COMMIT; --commented for E2-IM013089363 (defect 8035)
          UPDATE oe_lines_iface_all
          SET error_flag           ='Y'
          WHERE orig_sys_line_ref  = p_order_line_rec.orderlineidsource
          AND orig_sys_document_ref=p_order_head_rec.order_reference;
          --  COMMIT;--commented for E2-IM013089363 (defect 8035)
          UPDATE oe_price_adjs_iface_all
          SET error_flag           ='Y'
          WHERE orig_sys_line_ref  = p_order_line_rec.orderlineidsource
          AND orig_sys_document_ref=p_order_head_rec.order_reference;
          --  COMMIT;--commented for E2-IM013089363 (defect 8035)
          SELECT oe_msg_id_s.nextval
          INTO l_transaction_id
          FROM dual;
          /*  SELECT message_text
          INTO lv_msg_text
          FROM fnd_new_messages
          WHERE message_name='XXCU_INVALID_SALESPERSON'
          AND language_code =USERENV('LANG');*/
          INSERT
          INTO oe_processing_msgs
            (
              transaction_id ,
              request_id
              --     ,message_text
              ,
              entity_code ,
              entity_ref ,
              entity_id ,
              header_id ,
              line_id ,
              order_source_id ,
              original_sys_document_ref ,
              original_sys_document_line_ref ,
              orig_sys_shipment_ref ,
              change_sequence ,
              source_document_type_id ,
              source_document_id ,
              source_document_line_id ,
              attribute_code ,
              creation_date ,
              created_by ,
              last_update_date ,
              last_updated_by ,
              last_update_login ,
              program_application_id ,
              program_id ,
              program_update_date ,
              process_activity ,
              notification_flag ,
              type ,
              message_source_code ,
              message_status_code ,
              org_id
            )
            VALUES
            (
              l_transaction_id ,
              NULL
              --     ,l_msg_data
              ,
              'LINE' ,
              NULL ,
              NULL ,
              NULL ,
              NULL ,
              g_order_source_id ,
              p_order_head_rec.order_reference ,
              p_order_line_rec.orderlineidsource,
              NULL ,
              NULL ,
              NULL ,
              NULL ,
              NULL ,
              NULL ,
              sysdate ,
              g_user_id ,
              sysdate ,
              g_user_id ,
              fnd_global.login_id ,
              NULL ,
              NULL ,
              NULL ,
              NULL ,
              NULL ,
              'ERROR' ,
              'C' ,
              'OPEN' ,
              p_org_id
            );
          BEGIN
            INSERT
            INTO oe_processing_msgs_tl
              (
                transaction_id ,
                language ,
                source_lang ,
                message_text ,
                created_by ,
                creation_date ,
                last_updated_by ,
                last_update_date ,
                last_update_login
              )
            SELECT l_transaction_id ,
              l.language_code ,
              'US' ,
              (SELECT message_text
              FROM fnd_new_messages
              WHERE message_name='OE_INVALID_ITEM_UOM'
              AND language_code ='US'
              ) ,
              g_user_id ,
              sysdate ,
              g_user_id ,
              sysdate ,
              fnd_global.login_id
            FROM fnd_languages l
            WHERE l.installed_flag IN ('I','B')
            AND language_code       = 'US'
            AND NOT EXISTS
              (SELECT NULL
              FROM oe_processing_msgs_tl t
              WHERE t.transaction_id = l_transaction_id
              AND t.language         = l.language_code
              );
            --start defect 2891
            INSERT
            INTO oe_processing_msgs_tl
              (
                transaction_id ,
                language ,
                source_lang ,
                message_text ,
                created_by ,
                creation_date ,
                last_updated_by ,
                last_update_date ,
                last_update_login
              )
            SELECT l_transaction_id ,
              l.language_code ,
              'N' ,
              (SELECT message_text
              FROM fnd_new_messages
              WHERE message_name='OE_INVALID_ITEM_UOM'
              AND language_code ='N'
              ) ,
              g_user_id ,
              sysdate ,
              g_user_id ,
              sysdate ,
              fnd_global.login_id
            FROM fnd_languages l
            WHERE l.installed_flag IN ('I','B')
            AND language_code       = 'N'
            AND NOT EXISTS
              (SELECT NULL
              FROM oe_processing_msgs_tl t
              WHERE t.transaction_id = l_transaction_id
              AND t.language         = l.language_code
              );
            --end
          END;
          --      COMMIT;--commented for E2-IM013089363 (defect 8035)
        EXCEPTION
        WHEN OTHERS THEN
          p_status_code := g_code_error;
          xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error while updating error code for invalid return order' || g_program_loc || '> ::Contact your system administrator:: ' || sqlerrm );
          dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
        END;
      END IF;
      /* end CR 3268 */
      /* start defect 3047 */
      IF(lv_return_flag_found ='FALSE' AND upper(p_order_head_rec.order_type)='RETURN') THEN
        BEGIN
          UPDATE oe_headers_iface_all
          SET error_flag             ='Y'
          WHERE orig_sys_document_ref=p_order_head_rec.order_reference;
          --    COMMIT;--commented for E2-IM013089363 (defect 8035)
          UPDATE oe_lines_iface_all
          SET error_flag           ='Y'
          WHERE orig_sys_line_ref  = p_order_line_rec.orderlineidsource
          AND orig_sys_document_ref=p_order_head_rec.order_reference;
          --     COMMIT;----commented for E2-IM013089363 (defect 8035)
          UPDATE oe_price_adjs_iface_all
          SET error_flag           ='Y'
          WHERE orig_sys_line_ref  = p_order_line_rec.orderlineidsource
          AND orig_sys_document_ref=p_order_head_rec.order_reference;
          --     COMMIT;----commented for E2-IM013089363 (defect 8035)
          SELECT oe_msg_id_s.nextval
          INTO l_transaction_id
          FROM dual;
          /*  SELECT message_text
          INTO lv_msg_text
          FROM fnd_new_messages
          WHERE message_name='XXCU_INVALID_SALESPERSON'
          AND language_code =USERENV('LANG');*/
          INSERT
          INTO oe_processing_msgs
            (
              transaction_id ,
              request_id
              --     ,message_text
              ,
              entity_code ,
              entity_ref ,
              entity_id ,
              header_id ,
              line_id ,
              order_source_id ,
              original_sys_document_ref ,
              original_sys_document_line_ref ,
              orig_sys_shipment_ref ,
              change_sequence ,
              source_document_type_id ,
              source_document_id ,
              source_document_line_id ,
              attribute_code ,
              creation_date ,
              created_by ,
              last_update_date ,
              last_updated_by ,
              last_update_login ,
              program_application_id ,
              program_id ,
              program_update_date ,
              process_activity ,
              notification_flag ,
              type ,
              message_source_code ,
              message_status_code ,
              org_id
            )
            VALUES
            (
              l_transaction_id ,
              NULL
              --     ,l_msg_data
              ,
              'LINE' ,
              NULL ,
              NULL ,
              NULL ,
              NULL ,
              g_order_source_id ,
              p_order_head_rec.order_reference ,
              p_order_line_rec.orderlineidsource,
              NULL ,
              NULL ,
              NULL ,
              NULL ,
              NULL ,
              NULL ,
              sysdate ,
              g_user_id ,
              sysdate ,
              g_user_id ,
              fnd_global.login_id ,
              NULL ,
              NULL ,
              NULL ,
              NULL ,
              NULL ,
              'ERROR' ,
              'C' ,
              'OPEN' ,
              p_org_id
            );
          BEGIN
            INSERT
            INTO oe_processing_msgs_tl
              (
                transaction_id ,
                language ,
                source_lang ,
                message_text ,
                created_by ,
                creation_date ,
                last_updated_by ,
                last_update_date ,
                last_update_login
              )
            SELECT l_transaction_id ,
              l.language_code ,
              'US' ,
              (SELECT message_text
              FROM fnd_new_messages
              WHERE message_name='OE_RETURN_INVALID_SO_LINE'
              AND language_code ='US'
              ) ,
              g_user_id ,
              sysdate ,
              g_user_id ,
              sysdate ,
              fnd_global.login_id
            FROM fnd_languages l
            WHERE l.installed_flag IN ('I','B')
            AND language_code       = 'US'
            AND NOT EXISTS
              (SELECT NULL
              FROM oe_processing_msgs_tl t
              WHERE t.transaction_id = l_transaction_id
              AND t.language         = l.language_code
              );
            --start defect 2891
            INSERT
            INTO oe_processing_msgs_tl
              (
                transaction_id ,
                language ,
                source_lang ,
                message_text ,
                created_by ,
                creation_date ,
                last_updated_by ,
                last_update_date ,
                last_update_login
              )
            SELECT l_transaction_id ,
              l.language_code ,
              'N' ,
              (SELECT message_text
              FROM fnd_new_messages
              WHERE message_name='OE_RETURN_INVALID_SO_LINE'
              AND language_code ='N'
              ) ,
              g_user_id ,
              sysdate ,
              g_user_id ,
              sysdate ,
              fnd_global.login_id
            FROM fnd_languages l
            WHERE l.installed_flag IN ('I','B')
            AND language_code       = 'N'
            AND NOT EXISTS
              (SELECT NULL
              FROM oe_processing_msgs_tl t
              WHERE t.transaction_id = l_transaction_id
              AND t.language         = l.language_code
              );
            --end
          END;
          --  COMMIT;----commented for E2-IM013089363 (defect 8035)
        EXCEPTION
        WHEN OTHERS THEN
          p_status_code := g_code_error;
          xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error while updating error code for invalid return order' || g_program_loc || '> ::Contact your system administrator:: ' || sqlerrm );
          dbms_output.put_line( sqlerrm||dbms_utility.format_error_backtrace);
        END;
      END IF;
      /* end defect 3047 */
      BEGIN
        IF((p_order_line_rec.discount_breakup        IS NOT NULL OR p_order_line_rec.price_adj_per_unit <>0) --CR 4799
          AND p_order_line_rec.ret_orderlineidsource IS NULL) THEN                                           --added for defect 8002
          BEGIN
            SELECT sold_to_org_id
            INTO ln_customer_id
            FROM oe_headers_iface_all
            WHERE orig_sys_document_ref=p_orig_sys_document_ref
            AND org_id                 =p_org_id;
          EXCEPTION
          WHEN OTHERS THEN
            l_log_label := 'Invalid Customer';
            l_message   := 'Customer Not Found';
            xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_proc_name || '.' || l_log_label , l_message, false);
          END;
          BEGIN
            SELECT list_header_id
            INTO lv_list_header_id
            FROM qp_list_headers_all
            WHERE upper(currency_code)=upper(DECODE(lv_new_curr_code, NULL,p_curr_code,lv_new_curr_code))
            AND upper(list_type_code) ='DLT';
          EXCEPTION
          WHEN OTHERS THEN
            l_log_label := 'Invalid Price List Header';
            l_message   := 'Price List Header Not Found';
            xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_proc_name || '.' || l_log_label , l_message, false);
          END;
          BEGIN
            SELECT list_line_id
            INTO lv_list_line_id
            FROM qp_pricing_attributes
            WHERE list_header_id         =lv_list_header_id
            AND upper(product_attr_value)= 'ALL';
          EXCEPTION
          WHEN OTHERS THEN
            l_log_label := 'Invalid Price List line';
            l_message   := 'Price List line Not Found';
            xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_proc_name || '.' || l_log_label , l_message, false);
          END;
          /* start defect 3195 */
          BEGIN
            SELECT description
            INTO lv_modifier
            FROM qp_secu_list_headers_vl
            WHERE list_header_id=lv_list_header_id
            AND currency_code   =upper(DECODE(lv_new_curr_code, NULL,p_curr_code,lv_new_curr_code));
          EXCEPTION
          WHEN OTHERS THEN
            xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error while fetching modifier ' || l_prog_loc || '> ::Contact your system administrator:: ' || sqlerrm );
            p_status_code  := 2;
            p_error_message:=sqlerrm||dbms_utility.format_error_backtrace;
          END;
          /* end defect 3195 */
          /*   begin
          select opa.adjusted_amount,list_header_id,list_line_id into ln_adjust_amt_ret,
          ln_list_header_id_ret,ln_list_line_id_ret from oe_price_adjustments opa
          ,
          oe_ordeR_lines_all oola
          WHERE 1              =1
          AND oola.orig_sys_line_ref=p_order_line_rec.Ret_OrderlineIDSource
          AND oola.header_id=p_header_id
          and opa.header_id=oola.header_id
          and opa.line_id=oola.line_id
          AND org_id = p_org_id;
          exception when others then
          ln_adjust_amt_ret:= p_order_line_rec.Price_Adj_Per_Unit;
          ln_list_header_id_ret:=lv_list_header_id;
          ln_list_line_id_ret:=lv_list_line_id;
          end;
          */
          BEGIN
            SELECT lookup_code,
              meaning
            INTO lv_change_code,
              lv_change_reason
            FROM fnd_lookup_values_vl
            WHERE upper(lookup_type)='CHANGE_CODE'
            AND upper(lookup_code)  ='ORDER IMPORT';
          EXCEPTION
          WHEN OTHERS THEN
            l_log_label := 'Invalid Modified Change Code';
            l_message   := 'Modified Change Code not found';
            xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_proc_name || '.' || l_log_label , l_message, false);
          END;
          --END;
          --IF(p_order_line_rec.discount_breakup IS NOT NULL AND p_order_line_rec.Ret_OrderlineIDSource IS NULL) THEN   --commented  for defect 8002
          BEGIN
            SELECT oe_price_adjustments_s.nextval INTO l_price_id FROM dual;
          EXCEPTION
          WHEN OTHERS THEN
            l_price_id:=NULL;
          END;
          /*   if(upper(p_order_type)='REGULAR' ) then
          */
          INSERT
          INTO oe_price_adjs_iface_all
            (
              price_adjustment_id,
              orig_sys_discount_ref,
              orig_sys_document_ref,
              order_source_id,
              -- orig_sys_discount_ref,
              orig_sys_line_ref,
              --line_id,
              adjusted_amount,
              automatic_flag,
              creation_date,
              last_update_date,
              created_by,
              last_updated_by,
              operation_code,
              list_header_id,
              list_line_id,
              list_line_type_code,
              operand,
              operand_per_pqty,
              updated_flag,
              arithmetic_operator,
              adjusted_amount_per_pqty,
              applied_flag,
              change_reason_code,
              change_reason_text,
              org_id,
              /* start defect 3125 */
              sold_to_org_id,
              /* end defect 3125 */
              /* start defect 3195 */
              modifier_name
              /* start defect 3195 */
            )
            VALUES
            (
              l_price_id,--OE_PRICE_ADJUSTMENTS_S.nextval,
              'OE_PRICE_ADJUSTMENTS'
              ||(l_price_id+1),--  p_order_line_rec.orig_sys_discount_ref,
              p_orig_sys_document_ref,
              g_order_source_id,
              -- p_orig_sys_document_ref,
              p_order_line_rec.orderlineidsource,
              p_order_line_rec.price_adj_per_unit,
              'N',
              sysdate,
              sysdate,
              g_user_id,
              g_user_id,
              l_operation,
              lv_list_header_id,
              lv_list_line_id,
              'DIS',
              /* start defect 3282 */
              ABS((p_order_line_rec.price_adj_per_unit/p_order_line_rec.unit_list_price)*100),
              /* end defect 3282 */
              ABS(p_order_line_rec.price_adj_per_unit),
              'Y',
              '%',
              p_order_line_rec.price_adj_per_unit,
              'Y',
              lv_change_code,
              lv_change_reason,
              p_org_id,
              /* start defect 3125 */
              ln_customer_id,
              /* end defect 3125 */
              /* start defect 3195 */
              lv_modifier
              /* end defect 3195 */
            );
          --   COMMIT;----commented for E2-IM013089363 (defect 8035)
          /*   else
          INSERT
          INTO oe_price_adjs_iface_all
          (
          price_adjustment_id,
          orig_sys_discount_ref,
          orig_sys_document_ref,
          order_source_id,
          -- orig_sys_discount_ref,
          Orig_Sys_Line_Ref,
          --line_id,
          adjusted_amount,
          automatic_flag,
          creation_date,
          last_update_date,
          created_by,
          last_updated_by,
          operation_code,
          list_header_id,
          list_line_id,
          list_line_type_code,
          operand,
          operand_per_pqty,
          updated_flag,
          arithmetic_operator,
          adjusted_amount_per_pqty,
          applied_flag,
          change_reason_code,
          change_reason_text,
          org_id,
          sold_to_org_id
          )
          VALUES
          (
          l_price_id,--OE_PRICE_ADJUSTMENTS_S.nextval,
          'OE_PRICE_ADJUSTMENTS'
          ||(l_price_id+1),--  p_order_line_rec.orig_sys_discount_ref,
          p_orig_sys_document_ref,
          g_order_source_id,
          -- p_orig_sys_document_ref,
          p_order_line_rec.orderlineidsource,
          ln_adjust_amt_ret,
          'N',
          SYSDATE,
          SYSDATE,
          g_user_id,
          g_user_id,
          l_operation,
          ln_list_header_id_ret,
          ln_list_line_id_ret,
          'DIS',
          ABS(ln_adjust_amt_ret),
          ABS(ln_adjust_amt_ret),
          'Y',
          '%',
          ln_adjust_amt_ret,
          'Y',
          lv_change_code,
          lv_change_reason,
          p_org_id,
          ln_customer_id
          );
          COMMIT;
          end if;
          */
        END IF;
        /*  begin
        insert into oe_exposure_interface
        (
        exposure_source_code,
        operation_code,
        exposure_amount,
        currency_code,
        bill_to_site_use_id,
        bill_to_customer_id,
        org_id,
        original_system_reference,
        created_by,
        creation_date,
        last_updated_by,
        last_update_date
        )
        values
        (
        'EXTERNAL',
        'INSERT',
        0,
        lv_header_curr,
        getsiteuseid (p_cust_id, 'BILL_TO',p_org_id),
        p_cust_id,
        p_org_id,
        'ORA-'||g_ordeR_number,
        g_user_id,
        sysdate,
        g_user_id,
        sysdate
        );
        commit;
        EXCEPTION
        WHEN OTHERS THEN
        xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the insertion of the oe_lines_iface_all ( ' || p_order_line_rec.orderlineidsource || ') <' || l_prog_loc || '> ::Contact your system administrator:: ' || SQLERRM );
        p_status_code  := 2;
        p_error_message:=SQLERRM||dbms_utility.format_error_backtrace;
        end;
        */
      EXCEPTION
      WHEN OTHERS THEN
        xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the insertion of the oe_lines_iface_all ( ' || p_order_line_rec.orderlineidsource || ') <' || l_prog_loc || '> ::Contact your system administrator:: ' || sqlerrm );
        p_status_code  := 2;
        p_error_message:=sqlerrm||dbms_utility.format_error_backtrace;
      END;
    EXCEPTION
    WHEN OTHERS THEN
      xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the insertion of the oe_lines_iface_all ( ' || p_order_line_rec.orderlineidsource || ') <' || l_prog_loc || '> ::Contact your system administrator:: ' || sqlerrm );
      p_status_code  := 2;
      p_error_message:=sqlerrm||dbms_utility.format_error_backtrace;
    END;
    ---end
  EXCEPTION
  WHEN e_no_salesper THEN --defect 1387 sNEHAL
    xxcu_log_pkg.log(p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Sales person not fount in order line ' || g_program_loc || ' ' || sqlerrm );
    p_status_code  := g_code_error;
    p_error_message:='Invalid Sales person in order lines.';
  WHEN OTHERS THEN
    xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the insertion of the oe_lines_iface_all ( ' || p_order_line_rec.orderlineidsource || ') <' || l_prog_loc || '> ::Contact your system administrator:: ' || sqlerrm );
    p_status_code  := 2;
    p_error_message:=sqlerrm||dbms_utility.format_error_backtrace;
  END;
/* ----------------------------------------------------------------------------------------
* reconciliation
*
*   Procedure      : reconciliation
*   description   : This function will update the custome table with all updated information at header and line level
*   scope         : public
*   arguments
*        in                    : p_batchid : Batch ID
*                                p_batchmessagecount : Message Count
*                                p_batchnototal : number of orders in batch
*                                p_line_count : line count
*                                p_batchdate : Batch Date
*                                p_orderlinetotal : Total number of orderlines in batch
*                                p_maximumorderdate : Maximum order date in a batch
*                                p_minimumorderdate : Minimum order date in a batch
*                                p_orderlinesmessage : Number of orderlines in one message
*                                p_headers_agg : Aggregate Head
*                                p_lines_agg : Aggregate Line
*                                p_tot_msg : total number of messages in a batch
*        in/out                : p_status_code : Interface status code
*
*        out                   : p_finish_status : Finish status
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  PROCEDURE reconciliation
    (
      p_batchid           IN VARCHAR2 ,
      p_batchmessagecount IN NUMBER,
      p_batchnototal      IN NUMBER,
      p_line_count        IN NUMBER,
      p_batchdate         IN DATE,
      p_orderlinetotal    IN NUMBER,
      p_maximumorderdate  IN DATE,
      p_minimumorderdate  IN DATE ,
      p_orderlinesmessage IN NUMBER,
      p_headers_agg       IN NUMBER,
      p_lines_agg         IN NUMBER,
      p_tot_msg           IN NUMBER,---version 1.15----
      p_finish_status OUT BOOLEAN,
      p_status_code IN OUT NUMBER
    )
  AS
    v_batch_count NUMBER:=0;
    v_line_count  NUMBER:=0;
    v_orderlines  NUMBER:=0;
    v_batch_date  DATE;
    v_count       NUMBER:=0;
    v_recon_text  VARCHAR2 (2000);
    v_log_level   NUMBER := fnd_log.level_procedure;
    v_max_date    DATE   := p_maximumorderdate;
    v_min_date    DATE   := p_minimumorderdate;
    CURSOR c_order_batch
    IS
      SELECT * FROM xxcu.xxcu_ont_int_order_batch WHERE batchid = p_batchid;
    r_order_batch c_order_batch%rowtype;
  BEGIN
    OPEN c_order_batch;
    FETCH c_order_batch INTO r_order_batch;
    IF c_order_batch%found THEN
      v_batch_count                  := r_order_batch.batch_no + 1;
      v_batch_date                   := r_order_batch.batch_date;
      v_orderlines                   := r_order_batch.orderline_count +p_orderlinesmessage;-- p_orderlinetotal;
      v_line_count                   := r_order_batch.lines_imported  + p_line_count;
      IF r_order_batch.max_order_date > v_max_date THEN
        v_max_date                   := r_order_batch.max_order_date; --Not bigger than old value from database
      END IF;
      IF r_order_batch.min_order_date < v_min_date THEN
        v_min_date                   := r_order_batch.min_order_date; --Not smaller than old value from database
      END IF;
      UPDATE xxcu.xxcu_ont_int_order_batch
      SET batch_no      = v_batch_count,
        orderline_count = v_orderlines,
        lines_imported  = v_line_count,
        -- orderline_total=v_orderlines,
        headers_agg      = headers_agg + p_headers_agg,
        lines_agg        = lines_agg   + p_lines_agg,
        max_order_date   = v_max_date,
        min_order_date   = v_min_date,
        tot_no_msg       =p_tot_msg,
        last_update_date = to_date(sysdate,'DD-MON-YY HH24:MI:SS')
      WHERE batchid      = p_batchid;
    ELSE
      v_batch_count := p_batchmessagecount;
      v_batch_date  := to_date(sysdate,'DD-MON-YY HH24:MI:SS');
      v_line_count  := p_line_count;
      v_orderlines  := p_orderlinesmessage;
      INSERT
      INTO xxcu.xxcu_ont_int_order_batch
        (
          batchid,
          batch_no,
          batch_no_total,
          batch_date,
          orderline_total,
          orderline_count,
          lines_imported,
          last_update_date,
          max_order_date,
          min_order_date,
          headers_agg,
          lines_agg,
          status,
          tot_no_msg
        )
        VALUES
        (
          p_batchid,
          1,
          p_batchnototal,
          to_date(p_batchdate,'DD-MON-YY HH24:MI:SS'),
          p_orderlinetotal,-- p_orderlinesmessage,--p_orderlinetotal,
          p_orderlinesmessage,
          v_line_count,
          to_date(sysdate,'DD-MON-YY HH24:MI:SS'),
          v_max_date,
          v_min_date,
          p_headers_agg,
          p_lines_agg,
          'AQ IMPORT',
          p_tot_msg
        );
    END IF;
    COMMIT;
    p_finish_status:=true;
    CLOSE c_order_batch;
    -- p_finish_status := FALSE;
    --dbms_output.put_line('p_finish_status1'|| p_finish_status);
    --Writes log message for this messages of the batch
    dbms_output.put_line('p_batchnototal'|| p_batchnototal);
    dbms_output.put_line('v_batch_count'|| v_batch_count);
    ---commented to suppport timpex--
    /*  IF p_batchnototal = v_batch_count THEN
    dbms_output.put_line('v_batch_count'|| v_batch_count);
    IF v_line_count    = v_orderlines THEN
    v_recon_text    := 'Status message: Transfer finished, all order lines received for this batch';
    p_finish_status := TRUE;
    v_log_level     := fnd_log.level_event;
    dbms_output.put_line('v_orderlines'|| v_orderlines);
    ELSIF v_line_count < v_orderlines THEN
    v_count         := v_orderlines - v_line_count;
    v_recon_text    := 'Error: Transfer finished, but not all order lines have been received for this batch. Missing =' || v_count || ' ::Contact System Administrator';
    v_log_level     := fnd_log.level_error;
    dbms_output.put_line('v_orderlines1'|| v_orderlines);
    ELSIF v_line_count > v_orderlines THEN
    v_count         := v_line_count - v_orderlines; --Too many orderlines received
    v_recon_text    := 'Error: Transfer finished, but have received several order lines for this batch. The number of too many =' || v_count || ' ::Contact System Administrator';
    v_log_level     := fnd_log.level_error;
    dbms_output.put_line('v_orderlines2'|| v_orderlines);
    END IF;
    ELSIF p_batchnototal > v_batch_count THEN
    v_count           := p_batchnototal - v_batch_count;
    v_recon_text      := 'Expect ' || v_count || ' multiple messages';
    dbms_output.put_line('v_orderlines3'|| v_orderlines);
    p_finish_status   :=TRUE;
    ELSIF p_batchnototal < v_batch_count THEN --Have received too many messages
    v_count           := v_batch_count - p_batchnototal;
    v_recon_text      := 'Received ' || v_count || ' too many messages in relation to the expected.' || ' ::Contact System Administrator:: ';
    p_finish_status   :=TRUE;
    dbms_output.put_line('v_orderlines4'|| v_orderlines);
    END IF;
    */
    --Setting status
    /* IF v_log_level = fnd_log.level_error THEN
    UPDATE_BATCH_STATUS(p_batchid, 'ERROR');
    END IF;*/
    v_recon_text := v_recon_text || ' || In summary, for the transfer of BatchID = ' || p_batchid || ' || Batch_no' || p_batchnototal || ' - Meldinger Mottatt = ' || v_batch_count || ' - Forventet = ' || p_batchnototal || '|| Ordreliner mottatt = ' || p_orderlinetotal || ' Ordrelinjer forventet = ' || v_orderlines || ' - Behandlet = ' || v_line_count || ' || Siste melding:' || ' - Forventet = ' || p_orderlinesmessage || ' - Behandlet = ' || p_orderlinetotal;
    xxcu_log_pkg.log (p_log_level => v_log_level, p_module_name => gpackagename, p_log_text => v_recon_text);
  END;
------------------------------Help functions------------------------------
/* ----------------------------------------------------------------------------------------
* initialize_variables
*
*   Procedure      : initialize_variables
*   description   : Initialize context and variables
*   scope         : public
*   arguments
*        in                    : p_org_id : Operating Unit ID
*
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  PROCEDURE initialize_variables
    (
      p_org_id IN NUMBER
    )
  IS
    l_location      VARCHAR2(100);
    l_status_code   NUMBER;
    l_message       VARCHAR2(1000);
    ln_user_id      NUMBER;
    ln_resp_id      NUMBER;
    ln_resp_appl_id NUMBER;
    l_org_name      VARCHAR2(100);
  BEGIN
    --execute immediate 'ALTER SESSION SET NLS_NUMERIC_CHARACTERS = '', ''';
    --Commenting for testing
    /* l_location   := 'Brukerid';
    IF g_user_id IS NULL THEN
    SELECT DISTINCT user_id
    INTO g_user_id
    FROM applsys.fnd_user
    WHERE user_name LIKE get_config_value('BRUKER');
    END IF;
    l_location   := 'Area of responsibility-and application sid';
    IF g_resp_id IS NULL AND g_appl_id IS NULL THEN
    SELECT resp.responsibility_id,
    resp.application_id
    INTO g_resp_id,
    g_appl_id
    FROM applsys.fnd_responsibility_tl resp,
    fnd_application appli
    WHERE appli.application_id = resp.application_id
    AND resp.LANGUAGE LIKE 'N'
    AND resp.responsibility_name LIKE GET_CONFIG_VALUE('RESPONSIBILITY_NAME')
    AND appli.application_short_name = 'ONT';
    END IF;*/
    /*l_location       := 'Price List Id';
    IF g_pricelistid IS NULL THEN
    g_pricelistid  := getpricelistid (GET_CONFIG_VALUE('PRISLISTE'));
    END IF;
    l_location       := 'Order Type Id';
    IF g_ordertypeid IS NULL THEN
    --g_ordertypeid  := getordertypeid (GET_CONFIG_VALUE('ORDRETYPE'));
    g_ordertypeid  := getordertypeid (p_order_head_rec.order_type);
    END IF;
    l_location           := 'Order Source Id';
    IF g_order_source_id IS NULL THEN
    SELECT order_source_id
    INTO g_order_source_id
    FROM oe_order_sources
    --WHERE name = GET_CONFIG_VALUE('ORDREKILDE');
    WHERE name = p_order_head_rec.Order_Source;
    END IF;*/
    --Commenting for testing
    /* l_location           := 'The number of managers';
    g_num_conc_instances := GET_CONFIG_VALUE('NO_OF_MANAGERS'); --THIS IS SET EVERT TIME
    l_location           := 'fnd_global.apps_initialize';*/
    -- fnd_global.apps_initialize (g_user_id, g_resp_id, g_appl_id);  --Commenting for testing
    BEGIN
      SELECT name
      INTO l_org_name
      FROM hr_operating_units
      WHERE organization_id=p_org_id;
      SELECT userid,
        respid,
        respapplid
      INTO ln_user_id,
        ln_resp_id,
        ln_resp_appl_id
      FROM xxcu_int_init_app_logons
      WHERE procedure_name          =upper('XXCU_ONT_CREATE_ORDER_PKG')
      AND upper(operating_unit_name)=upper(l_org_name);
    EXCEPTION
    WHEN OTHERS THEN
      ln_user_id     :=fnd_global.user_id;
      ln_resp_id     :=fnd_global.resp_id;
      ln_resp_appl_id:=fnd_global.resp_appl_id;
    END;
    fnd_global.apps_initialize (ln_user_id, ln_resp_id, ln_resp_appl_id);--1352
    g_user_id:=ln_user_id;
    g_org_id :=p_org_id;
    --  MO_GLOBAL.INIT('ONT');
    mo_global.set_policy_context('S',g_org_id);
    oe_msg_pub.initialize;
    -- xxcu_int_util_pkg.int_apps_initialize(apps.fnd_profile.VALUE('ORG_ID'), upper('XXCU_ONT_CREATE_ORDER_PKG'), l_status_code, l_message);
    COMMIT;
    --COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
    xxcu_log_pkg.log (p_log_level => fnd_log.level_error, p_module_name => gpackagename, p_log_text => 'Error in initialization of variables by "' ||l_location||'"' || ' :: Ensure value set XXCU_ONT_LM_CONFIG_VALUES :: ' );
  END;
/* ----------------------------------------------------------------------------------------
* getheader_id
*
*   Function      : getheader_id
*   description   : Returns the order header id
*   scope         : public
*   arguments
*        in                    : p_customer_no : Customer Number
*                                p_order_ref_no :  Order Reference
p_order_number :org_id
*
*        in/out                :
*
*        out                   : p_version_number : version number
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  FUNCTION getheader_id(
      p_customer_no  IN VARCHAR2,
      p_order_ref_no IN VARCHAR2,
      p_org_id       IN NUMBER, --added org_id defect 2848
      p_version_number OUT NUMBER )
    RETURN NUMBER
  IS
    v_header_id NUMBER;
  BEGIN
    --initialize_applications;
    BEGIN
      SELECT header_id ,
        version_number
      INTO v_header_id,
        p_version_number
      FROM oe_order_headers
      WHERE
        /*TRUNC (ordered_date) = TRUNC (p_dato)
        AND*/
        sold_to_org_id = getcustomer_id (p_customer_no)
        -- AND created_by             = g_user_id
        -- AND booked_flag            = 'N'
      AND orig_sys_document_ref =p_order_ref_no
        ---start 07.04.2016 not needed as it will be unique everytime
        -- AND ROWNUM                = 1
      AND org_id = p_org_id ----added org_id defect 2848
      ORDER BY header_id DESC;
    EXCEPTION
    WHEN OTHERS THEN
      v_header_id := NULL;
    END;
    RETURN v_header_id;
  END;
/* ----------------------------------------------------------------------------------------
* get_transaction_type_id
*
*   Function      : get_transaction_type_id
*   description   : Returns the transaction_type_id for order type
*   scope         : public
*   arguments
*        in       p_order_source  IN VARCHAR2,
p_order_type       IN VARCHAR2,
p_org_id NUMBER
*
*        in/out                :
*
*        out          :x_status_code OUT   NUMBER
x_error_message OUT VARCHAR2
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  09.12.2016       Kavita Chaurasia     Created
----------------------------------------------------------------------------------------*/
  FUNCTION get_transaction_type_id(
      p_order_source IN VARCHAR2,
      p_order_type   IN VARCHAR2,
      p_org_id       IN NUMBER,
      x_status_code OUT NUMBER,
      x_error_message OUT VARCHAR2 )
    RETURN NUMBER
  IS
    lv_log_label    VARCHAR2(200);
    lv_message      VARCHAR2(2000);
    v_order_type_id NUMBER;
    lv_order_type   VARCHAR2(200);
    lv_order_source VARCHAR2(200);
  BEGIN
    lv_order_source        :=p_order_source;
    lv_order_type          :=p_order_type;
    IF(upper(lv_order_type) ='REGULAR') THEN
      /*
      start Wave 2 modification
      SELECT ott.transaction_type_id
      INTO v_order_type_id
      FROM
      --oe_order_headers_all ooha,
      oe_transaction_types_all ott,
      RA_CUST_TRX_TYPES_ALL rctt
      WHERE 1                       =1 --and ott.transaction_type_id=ooha.order_type_id
      AND ott.org_id                =p_org_id
      AND ott.transaction_type_code ='ORDER'
      /* AND upper(rctt.name) LIKE '%'
      ||upper(p_order_head_rec.order_source)
      ||'%'----Added to resolve Defect # 140*/
      ---commented for CR 1202
      /*  AND upper(ott.attribute1)= upper(p_order_source) ---added for CR1202
      --  AND ott.transaction_type_id=1161--------need to remove just for testing used
      AND ott.order_category_code    ='ORDER'
      AND (ott.end_date_active      IS NULL
      OR TRUNC(ott.end_date_active) >=TRUNC(SYSDATE))
      AND RCTT.CUST_TRX_TYPE_ID      =OTT.CUST_TRX_TYPE_ID;
      end wave 2 modification*/
      --Wave 2 modification
      SELECT ott.transaction_type_id
      INTO v_order_type_id
      FROM applsys.fnd_flex_value_sets ffvs,
        fnd_flex_values_vl ffv,
        oe_transaction_types_tl ott
      WHERE flex_value_set_name      ='XXCU_OM_SOURCE_ORDER_TYPE'
      AND ffvs.flex_value_set_id     =ffv.flex_value_set_id
      AND upper(ffv.flex_value)      =upper(lv_order_source)
      AND (ffv.end_date_active      IS NULL
      AND ott.language               ='US'
      AND upper(ott.name)            =upper(ffv.attribute2)
      OR TRUNC(ffv.end_date_active) >=TRUNC(sysdate));
    ELSE
      /*
      start Wave 2 modification
      SELECT ott.transaction_type_id
      INTO v_order_type_id
      FROM
      --oe_order_headers_all ooha,
      oe_transaction_types_all ott,
      RA_CUST_TRX_TYPES_ALL rctt
      WHERE 1                      =1 --and ott.transaction_type_id=ooha.order_type_id
      AND ott.org_id               =p_org_id
      AND ott.transaction_type_code='ORDER'
      /*     AND upper(rctt.name) LIKE '%'
      ||upper(p_order_head_rec.order_source)
      ||'%'----Added to resolve Defect # 140*/
      -- commented for CR1202
      /* AND upper(ott.attribute1)      = upper(p_order_source) ---added for CR1202
      AND ott.order_category_code    ='RETURN'
      AND (ott.end_date_active      IS NULL
      OR TRUNC(ott.end_date_active) >=TRUNC(SYSDATE))
      AND RCTT.CUST_TRX_TYPE_ID      =OTT.CUST_TRX_TYPE_ID;
      end wave 2 modification*/
      --Wave 2 Modification
      SELECT ott.transaction_type_id
      INTO v_order_type_id
      FROM applsys.fnd_flex_value_sets ffvs,
        fnd_flex_values_vl ffv,
        oe_transaction_types_tl ott
      WHERE flex_value_set_name      ='XXCU_OM_SOURCE_ORDER_TYPE'
      AND ffvs.flex_value_set_id     =ffv.flex_value_set_id
      AND upper(ffv.flex_value)      =upper(lv_order_source)
      AND (ffv.end_date_active      IS NULL
      AND ott.language               ='US'
      AND upper(ott.name)            =upper(ffv.attribute3)
      OR TRUNC(ffv.end_date_active) >=TRUNC(sysdate));
    END IF;
    RETURN v_order_type_id;
  EXCEPTION
  WHEN OTHERS THEN
    lv_log_label := 'Order Type Invalid' ;
    lv_message   := 'Failed to Derive Order Type. Please check Order Type Setup.';
    xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.get_transaction_type_id.' || lv_log_label , lv_message, false);
    x_status_code  := 2;
    x_error_message:=lv_message||sqlerrm||dbms_utility.format_error_backtrace;
    xxcu_common_log_rt.msglog ('ERR', 'Failed to derive transaction type id '||sqlerrm||dbms_utility.format_error_backtrace, 1117, '1', 'get_transaction_type_id', '-1' );
  END;
/* ----------------------------------------------------------------------------------------
* getinventory_item_id
*
*   Function      : getinventory_item_id
*   description   : Returns the inventory item id
*   scope         : public
*   arguments
*        in                    : p_inventory_number : Item Number
*                                p_order_source :  Order Source
*                                p_order_type : Order Type
*                                p_org_id : Operating Unit ID
*
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  FUNCTION getinventory_item_id(
      p_inventory_number IN VARCHAR2,
      p_order_source     IN VARCHAR2,
      p_order_type       IN VARCHAR2,
      p_org_id NUMBER )
    RETURN NUMBER
  IS
    ln_ret_val mtl_cross_references.inventory_item_id%type;
    lv_order_source VARCHAR2(240);
    lv_item_cross_ref mtl_cross_references.cross_reference%type;
    ln_warehouse_id    NUMBER;
    ln_order_source_id NUMBER;
    lv_item_no         VARCHAR2(240);
    lv_order_type      VARCHAR2(240);
    p_status_code      NUMBER;
    p_error_message    VARCHAR2(2000);
    ln_trans_type      NUMBER;
    ln_org_id          NUMBER;
  BEGIN
    lv_item_no     :=p_inventory_number;
    ln_org_id      :=p_org_id;
    lv_order_source:=p_order_source;
    lv_order_type  :=p_order_type;
    --initialize_applications;
    BEGIN
      /******Added by snehal for change request 1320***/
      /*   BEGIN
      SELECT name
      INTO lv_order_source
      FROM oe_order_sources
      WHERE order_source_id = ln_order_source_id;
      EXCEPTION
      WHEN OTHERS THEN
      lv_order_source:=NULL;
      END;
      */
      /**check if item cross reference is set for order source*/
      /* IF upper(p_order_type) ='REGULAR' THEN*/
      BEGIN
        SELECT NVL(ffvv.attribute5,'N')
        INTO lv_item_cross_ref
        FROM fnd_flex_value_sets ffvs,
          fnd_flex_values ffvv
        WHERE ffvs.flex_value_set_name='XXCU_OM_SOURCE_ORDER_TYPE'
        AND ffvs.flex_value_set_id    =ffvv.flex_value_set_id
        AND upper(ffvv.flex_value)    =upper(lv_order_source);
      EXCEPTION
      WHEN OTHERS THEN
        lv_item_cross_ref := 'N';
      END;
      /*ELSE
      --else if order tyoe is return
      BEGIN
      SELECT ott.attribute2
      INTO lv_item_cross_ref
      FROM oe_transaction_types_all ott
      WHERE ott.org_id               = p_org_id --p_order_head_rec.org_id
      AND ott.transaction_type_code  ='ORDER'
      AND upper(ott.attribute1)      = upper(lv_order_source)
      AND ott.order_category_code    ='RETURN'
      AND (ott.end_date_active      IS NULL
      OR TRUNC(ott.end_date_active) >=TRUNC(SYSDATE));
      EXCEPTION
      WHEN OTHERS THEN
      lv_item_cross_ref := 'N';
      END;
      END IF;
      END;*/
      BEGIN
        ln_trans_type:= get_transaction_type_id(lv_order_source, lv_order_type, ln_org_id, p_status_code, p_error_message);
        xxcu_common_log_rt.msglog ('INFO', 'lv_order_source '||lv_order_source, 1117, '1', 'get_transaction_type_id', '-1' );
        xxcu_common_log_rt.msglog ('INFO', 'ln_org_id '||ln_org_id, 1117, '1', 'get_transaction_type_id', '-1' );
        xxcu_common_log_rt.msglog ('INFO', 'lv_order_type '||lv_order_type, 1117, '1', 'get_transaction_type_id', '-1' );
      EXCEPTION
      WHEN OTHERS THEN
        xxcu_common_log_rt.msglog ('ERR', 'Failed to derive transaction type id 6 '||sqlerrm||dbms_utility.format_error_backtrace, 1117, '1', 'get_transaction_type_id', '-1' );
        ln_trans_type:=NULL;
      END;
      BEGIN
        SELECT warehouse_id
        INTO ln_warehouse_id
        FROM oe_transaction_types_all
        WHERE transaction_type_id= ln_trans_type;
      EXCEPTION
      WHEN OTHERS THEN
        ln_warehouse_id:=NULL;
      END;
      BEGIN
        IF lv_item_cross_ref <>'N' THEN
          SELECT mcr.inventory_item_id item_no
          INTO ln_ret_val
          FROM mtl_cross_references mcr,
            mtl_system_items_b msi
          WHERE msi.inventory_item_id =mcr.inventory_item_id
          AND msi.organization_id     =ln_warehouse_id
            /* version 1.26 Defect 2243 */
          AND upper(mcr.cross_reference_type) =upper(lv_item_cross_ref)
            /* start defect 5015 */
            --||upper(lv_order_source)
            --||'%'
            /* end defect 5015 */
            ------------------------------------------------------------------------
          AND upper(mcr.cross_reference)=upper(lv_item_no)
            /*start defect 3239 */
          AND (mcr.end_date_active      IS NULL
          OR TRUNC(mcr.end_date_active) >=TRUNC(sysdate));
          /* end defect 3239 */
        ELSE
          SELECT inventory_item_id item_no
          INTO ln_ret_val
          FROM mtl_system_items_b
          WHERE upper(segment1)      =upper(lv_item_no)
          AND enabled_flag           ='Y'
          AND (end_date_active      IS NULL
          OR TRUNC(end_date_active) >=TRUNC(sysdate))
          AND organization_id        =ln_warehouse_id;
        END IF;
        RETURN ln_ret_val;
      EXCEPTION
      WHEN OTHERS THEN
        ln_ret_val:=NULL;
        xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error: cant found item number: ' || p_inventory_number || ' ::Varenummeret m? legges inn i mappingtabell:: ' );
      END ;
      /***End of code for CR 1320***/
      ---commented by vedangi-------------
      /*SELECT inventory_item_id
      INTO l_ret_val
      FROM MTL_CROSS_REFERENCES_VL
      WHERE cross_reference = p_inventory_number
      -- AND cross_reference_type = 'Logistikkmotor'
      AND ROWNUM = 1;*/
      ----------Version 1.12 Defect # 553 added by vedangi----------------
      /*  SELECT item_no
      INTO l_ret_val
      FROM
      (SELECT mcr.inventory_item_id item_no
      --INTO l_ret_val
      FROM MTL_CROSS_REFERENCES mcr,
      mtl_system_items_b msi
      WHERE msi.inventory_item_id   =mcr.inventory_item_id
      AND msi.organization_id       =p_org_id
      AND upper(mcr.cross_reference)=upper(p_inventory_number)
      UNION
      SELECT inventory_item_id item_no
      -- INTO l_ret_val
      FROM mtl_system_items_b
      WHERE upper(segment1) =upper(p_inventory_number)
      AND organization_id   =p_org_id
      );
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
      xxcu_log_pkg.LOG (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Error: cant found item number: ' || p_inventory_number || ' ::Varenummeret m? legges inn i mappingtabell:: ' );*/
    END; --commented by snehal for chane request 1320
    RETURN ln_ret_val;
  END;
/* ----------------------------------------------------------------------------------------
* getinventory_number
*
*   Function      : getinventory_number
*   description   : Returns the inventory item number
*   scope         : public
*   arguments
*        in                    : p_inventory_item_id : Inventory Item ID
*                                p_org_id : Operating Unit ID
*
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  FUNCTION getinventory_number(
      p_source            IN VARCHAR2,
      p_order_type        IN VARCHAR2,
      p_inventory_item_id IN NUMBER,
      p_org_id NUMBER)
    RETURN VARCHAR2
  IS
    l_ret_val       VARCHAR2 (200);
    ln_warehouse_id NUMBER;
    p_status_code   NUMBER;
    p_error_message VARCHAR2(2000);
    ln_trans_type   NUMBER;
  BEGIN
    BEGIN
      ln_trans_type:= get_transaction_type_id(p_source, p_order_type, p_org_id, p_status_code, p_error_message);
    EXCEPTION
    WHEN OTHERS THEN
      xxcu_common_log_rt.msglog ('ERR', 'Failed to derive transaction type id 7 '||sqlerrm||dbms_utility.format_error_backtrace, 1117, '1', 'get_transaction_type_id', '-1' );
      ln_trans_type:=NULL;
    END;
    BEGIN
      SELECT warehouse_id
      INTO ln_warehouse_id
      FROM oe_transaction_types_all
      WHERE transaction_type_id= ln_trans_type;
    EXCEPTION
    WHEN OTHERS THEN
      ln_warehouse_id:=NULL;
    END;
    BEGIN
      SELECT DISTINCT segment1
      INTO l_ret_val
      FROM mtl_system_items_b
      WHERE inventory_item_id = p_inventory_item_id
      AND organization_id     =ln_warehouse_id;
      --AND ROWNUM              = 1;
    EXCEPTION
    WHEN no_data_found THEN
      xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'FEIL: Klarer ikke  finne artikkelnummer: ' || p_inventory_item_id || ' ::Artikkelnummeret m? legges inn i artikkelregisteret og m? samsvare med mappingtabell::  ' );
    END;
    RETURN l_ret_val;
  END;
/* ----------------------------------------------------------------------------------------
* getcustomer_id
*
*   Function      : getcustomer_id
*   description   : Returns the Customer Account ID
*   scope         : public
*   arguments
*        in                    : P_Customer_No : Customer Account Number
*
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  FUNCTION getcustomer_id(
      p_customer_no IN VARCHAR2)
    RETURN NUMBER
  AS
    v_ret_val NUMBER;
  BEGIN
    BEGIN
      SELECT cust_account_id
      INTO v_ret_val
      FROM hz_cust_accounts
      WHERE account_number = p_customer_no;
    EXCEPTION
    WHEN no_data_found THEN
      NULL;
    END;
    RETURN v_ret_val;
  END;
/* ----------------------------------------------------------------------------------------
* getline_id
*
*   Function      : getline_id
*   description   : Returns the Order Line ID
*   scope         : public
*   arguments
*        in                    : p_header_id : Order Header ID
*                                p_orig_sys_line_ref : Order Line Reference
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  FUNCTION getline_id(
      p_header_id         IN NUMBER,
      p_orig_sys_line_ref IN VARCHAR2,
      p_org_id            IN NUMBER) --added org_id defect#2848
    RETURN NUMBER
  AS
    v_line_id NUMBER;
  BEGIN
    BEGIN
      SELECT line_id
      INTO v_line_id
      FROM oe_order_lines_all
      WHERE header_id       = p_header_id
      AND orig_sys_line_ref = p_orig_sys_line_ref
      AND order_source_id   = g_order_source_id
      AND org_id            = p_org_id;
    EXCEPTION
    WHEN no_data_found THEN
      v_line_id := NULL;
    END;
    RETURN v_line_id;
  END;
/*FUNCTION getline_id_source_exists(
p_line_id_source IN VARCHAR2,
p_source         IN VARCHAR2)
RETURN BOOLEAN
AS
v_line_id_source NUMBER;
v_lineidexists   BOOLEAN := FALSE;
BEGIN
IF p_line_id_source IS NOT NULL THEN
BEGIN
SELECT line_id_source
INTO v_line_id_source
FROM xxcu.xxcu_ont_invoice_ref invref
WHERE line_id_source = p_line_id_source
AND "SOURCE"         = p_source
AND ROWNUM           = 1;
EXCEPTION
WHEN NO_DATA_FOUND THEN
v_lineidexists := FALSE;
END;
IF v_line_id_source IS NOT NULL THEN
v_lineidexists    := TRUE;
xxcu_log_pkg.LOG (p_log_level => fnd_log.level_statement, p_module_name => gpackagename, p_log_text => 'LINE_ID_SOURCE: ' || p_line_id_source || ' finnes, hopper over linje' );
END IF;
END IF;
RETURN v_lineidexists;
END;*/
-- Added Query in exception to handle expired BSA on same date.
--
--Commented it as the field is coming from source
/*FUNCTION getblanketnumber(
p_customer_id IN NUMBER,
p_dato        IN DATE,
p_order_type  IN VARCHAR2)
RETURN NUMBER
AS
v_blanketnumber NUMBER;
BEGIN
BEGIN
SELECT order_number
INTO v_blanketnumber
FROM oe_blanket_headers_v
WHERE 1        = 1
AND order_type = p_order_type--- 'Produktavtale Logistikk'
AND p_dato BETWEEN start_date_active AND NVL (end_date_active, SYSDATE)
AND sold_to_org_id   = p_customer_id
AND flow_status_code = 'ACTIVE'
AND ROWNUM           = 1;
EXCEPTION
WHEN NO_DATA_FOUND THEN
SELECT order_number
INTO v_blanketnumber
FROM oe_blanket_headers_v
WHERE 1            = 1
AND order_type     = p_order_type ---'Produktavtale Logistikk'
AND TRUNC(p_dato)  = NVL (TRUNC(end_date_active), SYSDATE)
AND sold_to_org_id = p_customer_id
AND ROWNUM         = 1;
WHEN OTHERS THEN
v_blanketnumber := NULL;
END;
IF v_blanketnumber IS NOT NULL THEN
xxcu_log_pkg.LOG (p_log_level => fnd_log.level_statement, p_module_name => gpackagename, p_log_text => 'BlanketNumber found:' || v_blanketnumber );
END IF;
RETURN v_blanketnumber;
END;*/
/* ----------------------------------------------------------------------------------------
* getsiteuseid
*
*   Function      : getsiteuseid
*   description   : Returns the Site Use Id
*   scope         : public
*   arguments
*        in                    : p_customer_id : Customer Account ID
*                                p_site_use_code : Site Use Code (BILL_TO or SHIP_TO)
*                                p_org_id : Operating Unit ID
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  FUNCTION getsiteuseid(
      p_customer_id   IN NUMBER,
      p_site_use_code IN VARCHAR2,
      p_org_id        IN NUMBER)
    RETURN NUMBER
  AS
    v_site_use_id NUMBER;
  BEGIN
    BEGIN
      SELECT site_use_id
      INTO v_site_use_id
      FROM hz_cust_acct_sites_all address,
        hz_cust_site_uses_all siteuse
      WHERE address.cust_acct_site_id = siteuse.cust_acct_site_id
      AND address.cust_account_id     = p_customer_id
      AND site_use_code               = p_site_use_code
      AND siteuse.org_id              = p_org_id
      AND address.status              = 'A'
      AND primary_flag                = 'Y'
      AND siteuse.status              = 'A';
      --start 07.04.2016
      --AND ROWNUM                      = 1;
    EXCEPTION
    WHEN no_data_found THEN
      v_site_use_id := NULL;
    END;
    RETURN v_site_use_id;
  END;
/* ----------------------------------------------------------------------------------------
* getordersourceid
*
*   Function      : getordersourceid
*   description   : Returns the Order Source Id
*   scope         : public
*   arguments
*        in                    : p_name : Order Source Name (Source System Name)
*
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  FUNCTION getordersourceid(
      p_name IN VARCHAR2)
    RETURN NUMBER
  AS
    ln_order_source_id NUMBER;
    lv_order_source    VARCHAR2(200);
  BEGIN
    BEGIN
      /* start wave 2 modification */
      /*  SELECT order_source_id
      INTO v_order_source_id
      FROM oe_order_sources
      WHERE upper(name) = upper(p_name)
      AND enabled_flag  ='Y';*/
      SELECT NVL(upper(ffv.attribute1),upper(ffv.flex_value))
      INTO lv_order_source
      FROM fnd_flex_value_sets ffvs,
        fnd_flex_values ffv
      WHERE ffvs.flex_value_set_name='XXCU_OM_SOURCE_ORDER_TYPE'
      AND ffvs.flex_value_set_id    =ffv.flex_value_set_id
      AND upper(ffv.flex_value)     =upper(p_name)
      AND ffv.enabled_flag          ='Y';
    EXCEPTION
    WHEN no_data_found THEN
      lv_order_source := NULL;
    END;
    BEGIN
      SELECT order_source_id
      INTO ln_order_source_id
      FROM oe_order_sources
      WHERE upper(name) = upper(lv_order_source)
      AND enabled_flag  ='Y';
    EXCEPTION
    WHEN no_data_found THEN
      ln_order_source_id := NULL;
    END;
    /* end wave 2 modification */
    RETURN ln_order_source_id;
  END;
-----------start 07.04.2016 not in use
/*FUNCTION getordertypeid(
p_name IN VARCHAR2)
RETURN NUMBER
AS
v_ret_val NUMBER;
BEGIN
BEGIN
SELECT order_type_id
INTO v_ret_val
FROM oe_order_types_v
WHERE NAME = p_name;
-- AND ROWNUM = 1;
EXCEPTION
WHEN NO_DATA_FOUND THEN
v_ret_val := NULL;
END;
RETURN v_ret_val;
END;
*/
/* ----------------------------------------------------------------------------------------
* getpricelistid
*
*   Function      : getpricelistid
*   description   : Returns the Price List Id
*   scope         : public
*   arguments
*        in                    : p_name : Currency Code
*
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  FUNCTION getpricelistid(
      p_name IN VARCHAR2)
    RETURN NUMBER
  AS
    v_ret_val   NUMBER;
    l_log_label VARCHAR2(2000);
    l_message   VARCHAR2(2000);
    k_func_name VARCHAR2(100):='getpricelistid';
  BEGIN
    BEGIN
      SELECT price_list_id
      INTO v_ret_val
      FROM oe_price_lists_v
      WHERE upper(currency_code)   = upper(p_name)
      AND (TRUNC(end_date_active) IS NULL
      OR TRUNC(end_date_active)   >=TRUNC(sysdate));
      /*Defect# 160*/
    EXCEPTION
    WHEN no_data_found THEN
      v_ret_val   := NULL;
      l_log_label := 'Price List';
      l_message   := 'Price List Not Found';
      xxcu_log_pkg.log(xxcu_log_pkg.gk_error, k_log_module_prefix || '.' || k_func_name || '.' || l_log_label , l_message, false);
    END;
    RETURN v_ret_val;
  END;
/* PROCEDURE update_batch_header_log(p_BatchId IN NUMBER, p_orig_sys_document_ref IN VARCHAR2)
AS
v_count   NUMBER;
BEGIN
BEGIN
SELECT COUNT (1)
INTO v_count
FROM xxcu.xxcu_ont_int_batch_header xxcuhead
WHERE batchid = p_batchid AND orig_sys_document_ref = p_orig_sys_document_ref;
EXCEPTION
WHEN NO_DATA_FOUND THEN
v_count := 0;
END;
IF v_count > 0 THEN
UPDATE xxcu.xxcu_ont_int_batch_header xxcuhead
SET last_update_date = SYSDATE
WHERE batchid = p_batchid
AND orig_sys_document_ref = p_orig_sys_document_ref;
ELSE
INSERT INTO xxcu.xxcu_ont_int_batch_header xxcuhead
(batchid, orig_sys_document_ref
)
VALUES (p_batchid, p_orig_sys_document_ref
);
END IF;
END;
*/
/* ----------------------------------------------------------------------------------------
* get_orig_sys_document_ref
*
*   Function      : get_orig_sys_document_ref
*   description   : Returns the Order Reference
*   scope         : public
*   arguments
*        in                    : p_header_id : Order Header ID
*
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  FUNCTION get_orig_sys_document_ref(
      p_header_id IN NUMBER)
    RETURN VARCHAR2
  AS
    v_ret_val NUMBER;
  BEGIN
    BEGIN
      SELECT orig_sys_document_ref
      INTO v_ret_val
      FROM oe_order_headers
        ---oe_order_headers_all
      WHERE header_id = p_header_id;
      -----start 07.04.2016
      -- AND ROWNUM      = 1;
    EXCEPTION
    WHEN no_data_found THEN
      v_ret_val := NULL;
    END;
    RETURN v_ret_val;
  END;
/* start vesrion 1.28 defect 2454 */
/* start defect 3310 */
/* ----------------------------------------------------------------------------------------
* submit_order_import_request
*
*   Procedure     : submit_order_import_request
*   description   : Submits Order Import Request
*   scope         : public
*   arguments
*        in                    : p_batch_id : Batch ID
p_orig_sys_ref : Original System Document Reference
*                                p_org_id : Operating Unit ID
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  PROCEDURE submit_order_import_request(
      p_batch_id     IN VARCHAR2,
      p_orig_sys_ref IN VARCHAR2,
      p_org_id       IN NUMBER)
  AS
    l_req_id            NUMBER;
    l_ret_val           BOOLEAN;
    l_tid               NUMBER;
    x_phase             VARCHAR2 (100);
    x_status            VARCHAR2 (100);
    ln_resp_id          NUMBER;
    ln_app_id           NUMBER;
    x_dev_phase         VARCHAR2 (100);
    x_dev_status        VARCHAR2 (100);
    x_message           VARCHAR2 (2000);
    v_starttid          VARCHAR2 (2000) := to_date(sysdate,'DD-MON-YY HH24:MI:SS');
    ln_org_id           NUMBER;
    lv_orig_sys_ref     VARCHAR2(240);
    lv_phase            VARCHAR2(100):='X';
    lv_status_code_conc VARCHAR2(100):='X';
  BEGIN
    ln_org_id      :=p_org_id;
    lv_orig_sys_ref:=p_orig_sys_ref;
    dbms_output.put_line(ln_org_id);
    xxcu_common_log_rt.msglog ('INFO', 'ln_org_id order import'||ln_org_id|| ' ' || lv_orig_sys_ref, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
    /* start defect 3844 */
    mo_global.init('ONT');
    mo_global.set_policy_context('S',ln_org_id);
    SELECT user_id INTO g_user_id FROM fnd_user WHERE user_name='OPERATIONS';
    SELECT responsibility_id,
      application_id
    INTO ln_resp_id,
      ln_app_id
    FROM fnd_responsibility_vl
    WHERE responsibility_name = 'PB OM Super User';
    fnd_global.apps_initialize(g_user_id, ln_resp_id, ln_app_id);
    /* end */
    --initialize_applications_OIMP;
    l_req_id := fnd_request.submit_request ( application => 'ONT' , program => 'OEOIMP' , argument1 => ln_org_id--FND_PROFILE.VALUE('ORG_ID')
    ,argument2 => g_order_source_id                                                                             -- Order Source
    ,argument3 => lv_orig_sys_ref                                                                               -- Original System Document Ref
    ,argument4 => NULL                                                                                          -- Operation Code
    ,argument5 => 'N'                                                                                           -- Validate Only?
    ,argument6 => '1'                                                                                           -- Debug Level
    ,argument7 => 4                                                                                             --g_num_conc_instances                                                                                                                           -- Number of Order Import instances
    ,argument8 => NULL                                                                                          -- Sold To Org Id
    ,argument9 => NULL                                                                                          -- Sold To Org
    ,argument10 => NULL                                                                                         -- Change Sequence
    ,argument11 => 'Y'                                                                                          -- Enable Single Line Queue for Instances
    ,argument12 => 'N'                                                                                          -- Trim Trailing Blanks
    ,argument13 => 'Y'                                                                                          -- Process Orders With No Org Specified
    ,argument14 => NULL                                                                                         --ln_org_id                                                                                    --FND_PROFILE.VALUE('ORG_ID')                                                                                                                   -- Default Operating Unit
    ,argument15 => 'Y'                                                                                          -- Validate Descriptive Flexfields?
    );
    COMMIT;
    xxcu_log_pkg.log (p_log_level => fnd_log.level_statement, p_module_name => gpackagename, p_log_text => 'To start the background process for order import. ' || l_req_id );
    xxcu_common_log_rt.msglog ('INFO', 'inside order import'||l_req_id, 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
    dbms_output.put_line('l_req_id'|| l_req_id);
    --IF l_req_id  > 0 THEN
    --l_ret_val := fnd_concurrent.wait_for_request (request_id => l_req_id, INTERVAL => 3, phase => x_phase, status => x_status, dev_phase => x_dev_phase, dev_status => x_dev_status, MESSAGE => x_message );
    /* while (lv_phase='X' or lv_status_code_conc='X')
    loop
    select phase_code,status_code into lv_phase,lv_status_code_conc from FND_CONCURRENT_REQUESTS where request_id=l_req_id;
    end loop;
    */
    --xxcu_log_pkg.LOG (p_log_level => fnd_log.level_procedure, p_module_name => gpackagename, p_log_text => 'Creation of orders from the background software ' || ' request_id: ' || l_req_id || ' - ' || x_phase || ' - ' || x_status || ' - ' || x_dev_phase || ' - ' || x_dev_status || ' - ' || x_message );
    /* update XXCU.XXCU_ONT_INT_ORDER_BATCH
    set request_id=l_req_id
    where batchid=p_batch_id;
    commit;*/
    --ELSE
    IF l_req_id = 0 THEN
      xxcu_log_pkg.log (p_log_level => fnd_log.level_procedure, p_module_name => gpackagename, p_log_text => 'Creation of orders from the background application errors' );
      --dbms_output.put_line()
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    xxcu_log_pkg.log (p_log_level => fnd_log.level_statement, p_module_name => gpackagename, p_log_text => 'Error starting background process for order import ' );
  END;
/* end defect 3310 */
-- Version 1.16
/* Version 1.10 Defect # 187 */
/* PROCEDURE submit_notification_report(
p_batch_id VARCHAR2,
p_email_id IN VARCHAR2,
p_org_id NUMBER)
AS
l_req_id     NUMBER;
l_ret_val    BOOLEAN;
l_tid        NUMBER;
x_phase      VARCHAR2 (100);
x_status     VARCHAR2 (100);
x_dev_phase  VARCHAR2 (100);
x_dev_status VARCHAR2 (100);
x_message    VARCHAR2 (2000);
v_starttid   VARCHAR2 (2000) := to_date(SYSDATE,'DD-MON-YY HH24:MI:SS');
lv_email_id  VARCHAR2(100);
ln_batch_id  VARCHAR2(240);
l_layout     BOOLEAN;
ln_org_id    NUMBER;
BEGIN
lv_email_id:=p_email_id;
ln_batch_id:=p_batch_id;
ln_org_id  :=p_org_id;
initialize_variables(ln_org_id);
--
dbms_output.put_line('notif');
--Setting Layout for the Request
--
l_layout := apps.fnd_request.add_layout( template_appl_name => 'XXCU', template_code => 'XXCU_ONT_CREDIT_NOTIF_R', template_language => 'en', template_territory => NULL, output_format => 'EXCEL');
--initialize_applications_OIMP;
l_req_id := fnd_request.submit_request ( application => 'XXCU' ,program => 'XXCU_ONT_CREDIT_NOTIF_R' , description => 'PB Notification to Credit Department (R)', start_time => sysdate, sub_request => FALSE,argument1 => ln_batch_id,argument2 => lv_email_id, argument3 => ln_org_id);
COMMIT;
IF l_req_id  > 0 THEN
l_ret_val := fnd_concurrent.wait_for_request (request_id => l_req_id, INTERVAL => 5, phase => x_phase, status => x_status, dev_phase => x_dev_phase, dev_status => x_dev_status, MESSAGE => x_message );
xxcu_log_pkg.LOG (p_log_level => fnd_log.level_procedure, p_module_name => gpackagename, p_log_text => 'Sending Notification to Credit Department ' || ' request_id: ' || l_req_id || ' - ' || x_phase || ' - ' || x_status || ' - ' || x_dev_phase || ' - ' || x_dev_status || ' - ' || x_message );
/* update XXCU.XXCU_ONT_INT_ORDER_BATCH
set request_id=l_req_id
where batchid=p_batch_id;
commit;*/
/* ELSE
dbms_output.put_line('Error in report '||l_req_id);
xxcu_log_pkg.LOG (p_log_level => fnd_log.level_procedure, p_module_name => gpackagename, p_log_text => 'Sending Notification to Credit Department Failed' );
--dbms_output.put_line()
END IF;
EXCEPTION
WHEN OTHERS THEN
dbms_output.put_line('Error in report exception'||SQLERRM);
xxcu_log_pkg.LOG (p_log_level => fnd_log.level_statement, p_module_name => gpackagename, p_log_text => 'Error starting Notification Report ' );
END;
*/
---start 10.03.2016
/* ----------------------------------------------------------------------------------------
* getpayment_term
*
*   Procedure     : getpayment_term
*   description   : Returns Payment Term ID
*   scope         : public
*   arguments
*        in                    : p_curr_code : Currency Code
*                                p_org_id : Operating Unit ID
*                                p_agreement_num : Sales Agreement Number
*                                p_cust_id : Customer Account ID
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  FUNCTION getpayment_term(
      p_org_id        NUMBER,
      p_curr_code     VARCHAR2,
      p_agreement_num VARCHAR2,
      p_cust_id       NUMBER,
      p_payment_term  VARCHAR2-- CR 4813
      ,
      p_order_source VARCHAR2 )
    RETURN NUMBER
  AS
    l_payment_term NUMBER;
  BEGIN
    /* start CR 4813 */
    BEGIN
      SELECT term_id INTO l_payment_term FROM ra_terms WHERE name=p_payment_term;
    EXCEPTION
    WHEN OTHERS THEN
      l_payment_term:=NULL;
    END;
    /* end CR 4813 */
    /* start CR 4790 */
    IF(l_payment_term IS NULL) THEN
      BEGIN
        SELECT ra.term_id
        INTO l_payment_term
        FROM ra_terms ra,
          oe_blanket_headers_all obha,
          fnd_flex_value_sets ffvs,
          fnd_flex_values ffv,
          --oe_order_sources oos,
          oe_transaction_types_tl otta,
          hz_cust_accounts hca,
          oe_blanket_headers_ext obhe
        WHERE obha.sold_to_org_id                             =hca.cust_account_id
        AND otta.transaction_type_id                          =obha.order_type_id
        AND otta.language                                     ='US'
        AND obhe.order_number                                 =obha.order_number
        AND obha.org_id                                       =p_org_id
        AND ra.term_id                                        =obha.payment_term_id
        AND upper(obha.flow_status_code)                      ='ACTIVE'
        AND ffvs.flex_value_set_name                          ='XXCU_OM_SOURCE_ORDER_TYPE'
        AND ffvs.flex_value_set_id                            =ffv.flex_value_set_id
        AND NVL(upper(ffv.attribute1),upper(ffv.flex_value) ) =upper(p_order_source)
          --  AND oos.order_source_id                               =g_order_source_id
        AND upper(ffv.attribute13) =upper(otta.name)
        AND ffv.enabled_flag       ='Y'
        AND rownum                 =1--purposely used rownum because the requirement is data should come for latest activation date order in case of multiple orders
        ORDER BY obhe.start_date_active DESC;
      EXCEPTION
      WHEN OTHERS THEN
        l_payment_term:=NULL;
      END;
    END IF;
    /* end CR 4790 */
    -----------logic used as per defaulting rules set--------------------------------------
    IF(l_payment_term IS NULL) THEN
      BEGIN
        IF(p_agreement_num IS NOT NULL) THEN
          SELECT payment_term_id
          INTO l_payment_term
          FROM oe_blanket_headers_all
          WHERE org_id                      =p_org_id
          AND upper(transactional_curr_code)=upper(p_curr_code)
          AND order_number                  =p_agreement_num
          AND sold_to_org_id                =p_cust_id;
        END IF;
      EXCEPTION
      WHEN OTHERS THEN
        l_payment_term:=NULL;
      END;
    END IF;
    IF(l_payment_term IS NULL) THEN
      BEGIN
        SELECT payment_term_id
        INTO l_payment_term
        FROM hz_cust_site_uses_all
        WHERE site_use_id=getsiteuseid(p_cust_id,'SHIP_TO',p_org_id);
      EXCEPTION
      WHEN OTHERS THEN
        l_payment_term:=NULL;
      END;
    END IF;
    IF(l_payment_term IS NULL) THEN
      BEGIN
        SELECT payment_term_id
        INTO l_payment_term
        FROM hz_cust_site_uses_all
        WHERE site_use_id=getsiteuseid(p_cust_id,'BILL_TO',p_org_id);
      EXCEPTION
      WHEN OTHERS THEN
        l_payment_term:=NULL;
      END;
    END IF;
    IF(l_payment_term IS NULL) THEN
      BEGIN
        SELECT standard_terms
        INTO l_payment_term
        FROM hz_customer_profiles
        WHERE cust_account_id=p_cust_id
        AND status           ='A'
        AND site_use_id     IS NULL;
      EXCEPTION
      WHEN OTHERS THEN
        l_payment_term:=NULL;
      END;
    END IF;
    IF(l_payment_term IS NULL) THEN
      BEGIN
        SELECT terms_id
        INTO l_payment_term
        FROM oe_price_lists_v
        WHERE price_list_id          =getpricelistid (p_curr_code)
        AND (TRUNC(end_date_active) IS NULL
        OR TRUNC(end_date_active)   >=TRUNC(sysdate));
      EXCEPTION
      WHEN OTHERS THEN
        l_payment_term:=NULL;
      END;
    END IF;
    RETURN l_payment_term;
  EXCEPTION
  WHEN OTHERS THEN
    xxcu_log_pkg.log (p_log_level => fnd_log.level_statement, p_module_name => gpackagename, p_log_text => 'Error i getpayment_term function ' );
    RETURN NULL;
  END;
/* Version 1.10 Defect # 187*/
/* ----------------------------------------------------------------------------------------
* submit_release_hold_report
*
*   Procedure     : submit_release_hold_report
*   description   : Submits PB Release Holds(P) Concurrent Program
*   scope         : public
*   arguments
*        in                    : p_batch_id : Batch ID
*                                p_org_id : Operating Unit ID
*
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  04.05.2016        Vedangi Bagwe        Created
----------------------------------------------------------------------------------------*/
  PROCEDURE submit_release_hold_report(
      p_batch_id VARCHAR2,
      p_org_id IN NUMBER)
  AS
    l_req_id     NUMBER;
    l_ret_val    BOOLEAN;
    l_tid        NUMBER;
    x_phase      VARCHAR2 (100);
    x_status     VARCHAR2 (100);
    x_dev_phase  VARCHAR2 (100);
    x_dev_status VARCHAR2 (100);
    x_message    VARCHAR2 (2000);
    v_starttid   VARCHAR2 (2000) := to_date(sysdate,'DD-MON-YY HH24:MI:SS');
    ln_org_id    NUMBER;
    ln_batch_id  VARCHAR2(240);
  BEGIN
    ln_org_id  :=p_org_id;
    ln_batch_id:=p_batch_id;
    --initialize_applications_OIMP;
    l_req_id := fnd_request.submit_request ( application => 'XXCU' ,program => 'XXCU_ONT_RELEASE_HOLD_P' ,argument1 => ln_batch_id,argument2 => ln_org_id);
    COMMIT;
    IF l_req_id  > 0 THEN
      l_ret_val := fnd_concurrent.wait_for_request (request_id => l_req_id, interval => 5, phase => x_phase, status => x_status, dev_phase => x_dev_phase, dev_status => x_dev_status, MESSAGE => x_message );
      xxcu_log_pkg.log (p_log_level => fnd_log.level_procedure, p_module_name => gpackagename, p_log_text => 'Releasing Order Holds and Closing Case folders ' || ' request_id: ' || l_req_id || ' - ' || x_phase || ' - ' || x_status || ' - ' || x_dev_phase || ' - ' || x_dev_status || ' - ' || x_message );
    ELSE
      xxcu_log_pkg.log (p_log_level => fnd_log.level_procedure, p_module_name => gpackagename, p_log_text => 'Releasing Order Holds failed' );
      --dbms_output.put_line()
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    xxcu_log_pkg.log (p_log_level => fnd_log.level_statement, p_module_name => gpackagename, p_log_text => 'Error starting Release holds program ' );
  END;
/* ----------------------------------------------------------------------------------------
* UPDATE_BATCH_STATUS
*
*   Procedure     : UPDATE_BATCH_STATUS
*   description   : Updates Batch Status in XXCU_ONT_INT_ORDER_BATCH
*   scope         : public
*   arguments
*        in                    : P_BATCHID : Batch ID
*                                P_STATUS : Status
*
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  PROCEDURE update_batch_status(
      p_batchid IN VARCHAR2,
      p_status  IN VARCHAR2)
  IS
    pragma autonomous_transaction;
  BEGIN
    UPDATE xxcu.xxcu_ont_int_order_batch
    SET status         = p_status,
      last_update_date = to_date(sysdate,'DD-MON-YY HH24:MI:SS')
    WHERE batchid      = p_batchid;
    COMMIT;
  END;
/* ----------------------------------------------------------------------------------------
* GET_CONFIG_VALUE
*
*   Function     : GET_CONFIG_VALUE
*   description   : Returns the configuration values
*   scope         : public
*   arguments
*        in                    : P_CONFIG_NAME : Configuration Name
*
*
*        in/out                :
*
*        out                   :
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  23.12.2015        Rahul Kumar Singh     Created
----------------------------------------------------------------------------------------*/
  FUNCTION get_config_value(
      p_config_name IN VARCHAR2)
    RETURN VARCHAR2
  IS
    l_ret_value VARCHAR2(100);
  BEGIN
    BEGIN
      SELECT ffv.description
      INTO l_ret_value
      FROM fnd_flex_values_vl ffv,
        fnd_flex_value_sets ffvs
      WHERE ffv.flex_value_set_id = ffvs.flex_value_set_id
      AND flex_value_set_name LIKE g_value_list_name
      AND ffv.flex_value = p_config_name;
    EXCEPTION
    WHEN no_data_found THEN
      xxcu_log_pkg.log (p_log_level => fnd_log.level_error, p_module_name => gpackagename, p_log_text => 'Fant ikke verdi i verdilisten til "' ||p_config_name ||'"' || ' :: Kontroler verdisettet XXCU_ONT_LM_CONFIG_VALUES eller parameteret:: ' );
    END;
    RETURN l_ret_value;
  END;
/*Version 1.9 added get_currencycode part of change artf4774289  */
/* ----------------------------------------------------------------------------------------------------------
* get_currencycode
*
*   function     : get_currencycode
*   description   : Returns the currency code
*
*
*   arguments
*        in       : p_cust_id : Cust Account ID
*                   p_org_id : Operating Unit ID
*
*        return   : p_currency
*
*
*  Date       Author           Description
*  ---------  ---------        -------------------------------------------------------
*  26.04.2016 Vedangi Bagwe    Created
*
*-----------------------------------------------------------------------------------------------------*/
  FUNCTION get_currencycode(
      p_cust_id IN NUMBER,
      p_org_id  IN NUMBER)
    RETURN VARCHAR2
  IS
    lv_curr_code VARCHAR2(100);
  BEGIN
    BEGIN
      SELECT hca.attribute10
      INTO lv_curr_code
      FROM hz_cust_acct_sites_all hca
      WHERE hca.cust_account_id=p_cust_id
      AND hca.org_id           =p_org_id
      AND hca.status           ='A'
      AND hca.bill_to_flag     ='P';
    EXCEPTION
    WHEN OTHERS THEN
      lv_curr_code:=NULL;
    END;
    IF(lv_curr_code IS NULL) THEN
      BEGIN
        SELECT hca.attribute10
        INTO lv_curr_code
        FROM hz_cust_accounts hca
        WHERE hca.cust_account_id=p_cust_id
        AND hca.status           ='A';
      EXCEPTION
      WHEN OTHERS THEN
        lv_curr_code:=NULL;
      END;
    END IF;
    IF(lv_curr_code IS NULL) THEN
      BEGIN
        SELECT hp.attribute10
        INTO lv_curr_code
        FROM hz_cust_accounts hca,
          hz_parties hp
        WHERE hca.cust_account_id=p_cust_id
        AND hp.party_id          =hca.party_id
        AND hca.status           ='A';
      EXCEPTION
      WHEN OTHERS THEN
        lv_curr_code:=NULL;
      END;
    END IF;
    RETURN lv_curr_code;
  END;
-----------------
/* version 1.23 CR 1899 */
/* ----------------------------------------------------------------------------------------
* insert_invoice_spec_p
*
*   Function     : insert_invoice_spec_p
*   description   : inserts the records in invoice specification tables
*   scope         : public
*   arguments
*        in                    : p_order_head_rec : Order Header Record
*                                p_order_line_rec : Order Line Record
*                                p_inv_spec_rec : Invoice Specification details
*                                p_orig_sys_document_ref : Order Reference
*                                p_line_number : Order Line ID
*                                p_status_code : Status of procedure
*
*
*        in/out                :
*
*        out                   : p_error_message : Error Message
*
*  Date               Author              Description
*  ---------         -------------        -------------------------------------------------------
*  28.09.2016        Vedangi Bagwe        Created
----------------------------------------------------------------------------------------*/
  PROCEDURE insert_invoice_spec_p(
      p_order_head_rec        IN xxcu_ont_create_order_parser.orderhead_rec,
      p_order_line_rec        IN xxcu_ont_create_order_parser.orderline_rec,
      p_inv_spec_rec          IN xxcu_ont_create_order_parser.inv_spec_rec,
      p_orig_sys_document_ref IN VARCHAR2,
      p_line_number           IN VARCHAR2,
      p_order_number          IN NUMBER,
      p_status_code           IN OUT NUMBER,
      p_error_message OUT VARCHAR2)
  AS
    -- -- v_order_head xxcu_ont_create_order_parser.order_head:= xxcu_ont_create_order_parser.order_head();
    -- v_order_line xxcu_ont_create_order_parser.order_line:=xxcu_ont_create_order_parser.order_line();
    -- v_inv_spec xxcu_ont_create_order_parser.spec_line   :=xxcu_ont_create_order_parser.spec_line();
    /*  CURSOR header_line_data (p_orig_sys_document_ref VARCHAR2,p_line_number VARCHAR2)
    IS
    SELECT ool.line_id,
    ooh.header_id,
    ooh.ordeR_number
    FROM oe_ordeR_headers_all ooh,
    oe_ordeR_lines_all ool
    WHERE ooh.header_id          =ool.header_id
    AND ool.orig_sys_line_ref    =p_line_number
    AND ooh.orig_sys_document_ref=p_orig_sys_document_ref;
    */
    ln_order_head            NUMBER;
    ln_order_head_cnt        NUMBER;
    ln_order_num             NUMBER;
    lv_orig_sys_document_ref VARCHAR2(100);
    lv_line_number           VARCHAR2(80);
    ln_cnt                   NUMBER :=0;
    ln_cnt_line              NUMBER :=0;
    ln_cnt_url               NUMBER :=0;
    ln_cnt_y                 NUMBER :=0;
    ln_spec_order_number     NUMBER;
  BEGIN
    lv_orig_sys_document_ref:=p_orig_sys_document_ref;
    lv_line_number          :=p_line_number;
    ln_spec_order_number    := p_order_number;
    --   xxcu_common_log_rt.msglog ('ERR', 'Inside Invoice spec', 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => SYSDATE, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
    -- FOR rec IN header_line_data(lv_orig_sys_document_ref,lv_line_number)
    -- LOOP
    /* start version 1.28 CR2499 */
    /* start version 1.30 Kavita CR2499 */
    /* BEGIN
    SELECT COUNT(*)
    INTO ln_cnt
    FROM XXCU_INTERFACE_SPECIFICATIONS
    WHERE ORIG_SYS_DOCUMENT_REF   =lv_orig_sys_document_ref ----1.30 Kavita Renaming  ORDER_REFERENCE to ORIG_SYS_DOCUMENT_REF
    AND ORIG_SYS_LINE_REF=lv_line_number --1.30 Kavita Renaming ORDER_LINE_REFERENCE to ORIG_SYS_LINE_REF
    AND upper(ORDER_SOURCE)       =upper(p_order_head_rec.order_source) ----1.30 Kavita Renaming SOURCE to ORDER_SOURCE
    AND specification_status='N';
    EXCEPTION
    WHEN OTHERS THEN
    ln_cnt:=0;
    END;
    */
    /* End version 1.30 Kavita CR2499 */
    /* version 1.24 CR 1929 */
    /*  BEGIN
    SELECT COUNT(*)
    INTO ln_cnt_url
    FROM XXCU_INVOICE_SPEC_URL
    WHERE order_header_id=rec.header_id
    and link_url=p_order_head_rec.LINK_URL
    and attachment_name=p_order_head_rec.attachment_name
    and link_label=p_order_head_rec.link_label
    and mime_type=p_order_head_rec.mime_type;
    EXCEPTION
    WHEN OTHERS THEN
    ln_cnt_url:=0;
    END;
    */
    ---------------------------------------------------------------------------------------------------
    /* start version 1.30 Kavita CR2499 */
    /* IF(ln_cnt>0) THEN
    UPDATE XXCU_INTERFACE_SPECIFICATIONS
    SET specification_status='E'
    WHERE ORIG_SYS_DOCUMENT_REF =lv_orig_sys_document_ref --1.30 Kavita Renaming   ORDER_REFERENCE to ORIG_SYS_DOCUMENT_REF
    AND ORIG_SYS_LINE_REF = lv_line_number --1.30 Kavita Renaming ORDER_LINE_REFERENCE to ORIG_SYS_LINE_REF
    AND upper(ORDER_SOURCE)       =upper(p_order_head_rec.order_source) --1.30 Kavita Renaming SOURCE to ORDER_SOURCE
    AND specification_status='N';
    COMMIT;
    */
    /* End version 1.30 Kavita CR2499 */
    IF(p_order_line_rec.speclines.count>0) THEN
      INSERT
      INTO xxcu_intf_spec_lines VALUES
        (
          -- XXCU_INTF_INVOICE_SPEC_LINES_S.nextval, --commented 1.30 Kavita
          -- XXCU_INTF_INVOICE_SPEC_S.currval, --commented 1.30 Kavita
          lv_line_number,
          p_inv_spec_rec.order_line_number,
          p_inv_spec_rec.order_line_text,
          p_inv_spec_rec.order_line_no_of_packages,
          p_inv_spec_rec.order_line_pallet,
          p_inv_spec_rec.order_line_pp_price,
          p_inv_spec_rec.order_line_net_weight,
          sysdate,
          g_user_id,
          g_user_id,
          sysdate,
          /* version 1.24 CR 1929 */
          p_inv_spec_rec.order_line_nop_uom ,
          p_inv_spec_rec.order_line_net_weight_uom ,
          p_inv_spec_rec.order_line_length,
          p_inv_spec_rec.order_line_width ,
          p_inv_spec_rec.order_line_height ,
          p_inv_spec_rec.order_line_dim_uom,
          ---------------------------------------------------------------------------------------------------------------------------
          /* version 1.27 CR 2468 */
          p_inv_spec_rec.order_line_date,
          p_inv_spec_rec.order_line_per_time_unit,
          p_inv_spec_rec.order_line_unit_price,
          p_inv_spec_rec.order_line_unit_amount,
          p_inv_spec_rec.order_line_cargo_type,
          p_inv_spec_rec.order_line_freight_calc_wt,
          p_inv_spec_rec.order_line_frt_calc_wt_uom,
          p_inv_spec_rec.order_line_volume ,
          p_inv_spec_rec.order_line_volume_uom,
          p_inv_spec_rec.order_line_load_meter,
          p_inv_spec_rec.order_line_cargo_label,
          /* Start 1.30 Kavita CR 2499 */
          --ln_spec_order_number,
          /* start defect 3218 */
          NVL(p_order_head_rec.printed_order_number,ln_spec_order_number),
          /* end defect 3218 */
          /* END 1.30 Kavita CR 2499 */
          /* start CR 3118 */
          p_inv_spec_rec.order_line_gross_weight,
          p_inv_spec_rec.order_line_gross_weight_uom,
          /* end CR 3118 */
          /* start CR 3487 */
          lv_orig_sys_document_ref,
          p_order_head_rec.order_source,
          /* end CR 3487 */
          g_intf_inv_spec_seq ---- Added by Divyansh for Incident#E2-IM013492120
          ------------------------------------------------------------------------------------------------------------
        );
      -- COMMIT;
    END IF;
    xxcu_common_log_rt.msglog ('INFO', 'Inserted in Spec Lines', 1117, 1, 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', xxcu_common_log_rt.set_eventjoblogstart (ip_event_id => NULL, ip_started => sysdate, ip_completed => NULL, ip_status => 1, ip_task_id => NULL, ip_msg_id => 1117, ip_source => 'xxcu_ont_create_order_parser BODY.parse_xmlmessage', ip_target_id => NULL, ip_retry => 1, ip_response => NULL, ip_paramvalues => NULL ));
    --  End Loop;
    /* end CR 2499 */
  EXCEPTION
  WHEN OTHERS THEN
    xxcu_log_pkg.log (p_log_level => fnd_log.level_exception, p_module_name => gpackagename, p_log_text => 'Unhandled errors in the xxcu_invoice_spec_p > ::Contact your system administrator:: ' || sqlerrm );
    p_status_code  := 2;
    p_error_message:='Error in invoice spec procedure'||sqlerrm||dbms_utility.format_error_backtrace;
  END;
----------------------------------------------
END xxcu_ont_create_order_pkg;